diff --git a/byerp/handlers/building.js b/byerp/handlers/building.js
index 6169abb..7452980 100644
--- a/byerp/handlers/building.js
+++ b/byerp/handlers/building.js
@@ -252,15 +252,21 @@ var Module = function (models, event) {
     this.getBuildings = function (req, res, next) {
         var response = {};
         response.data = [];
-        models.get(req.session.lastDb, 'building', buildingSchema).find({}, function (err, result) {
+        
+        models.get(req.session.lastDb, 'buildingContract', buildingContractSchema).find({})
+            .populate('projectName' , '_id name')
+            .exec(function (err, result) {
             
-            if (err) {
-                return next(err);
-            }
+                if (err) {
+                    return next(err);
+                }
+                
+                for(var i = 0; i<result.length; i++){
+                    response.data.push(result[i].projectName);
+                }
 
-            response.data = result;
-            res.send(response);
-        });
+                res.send(response);
+            });
     };
 
     this.getCustomers = function (req, res, next) {
diff --git a/byerp/handlers/employee.js b/byerp/handlers/employee.js
index 16117e6..46620f6 100644
--- a/byerp/handlers/employee.js
+++ b/byerp/handlers/employee.js
@@ -295,7 +295,8 @@ var Employee = function (event, models) {
                 .populate('scheduledPay', '_id name')
                 .populate('department', '_id name')
                 .populate('groups.group')
-                .populate('groups.owner', '_id login');
+                .populate('groups.owner', '_id login')
+                .populate('workCentre', '_id name');
 
             query.exec(function (err, foundEmployee) {
                 if (err) {
@@ -352,8 +353,7 @@ var Employee = function (event, models) {
             data.sort[keySort] = parseInt(data.sort[keySort], 10);
             sort = data.sort;
         } else {
-            //sort = {'jobType.level':-1,'createdBy.date': 1};
-            sort = {'department.nestingLevel':1,'department.name':1,'createdBy.date': 1};
+            sort = {'department.nestingLevel':1,'department.name':1, 'deptRank': 1, 'createdBy.date': 1};
         }
 
         accessRollSearcher = function (cb) {
@@ -947,7 +947,7 @@ var Employee = function (event, models) {
         var now = new Date();
         var Birthdays = models.get(req.session.lastDb, 'birthdays', birthdaysSchema);
           data.date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
-     
+        console.log('set');
         data.currentEmployees = currentEmployees;
 
         Birthdays.findByIdAndUpdate({_id: 1}, data, {new: true, upsert: true}, function (err, birth) {
@@ -1874,14 +1874,14 @@ var Employee = function (event, models) {
                     if (err) {
                         return waterfallCb(err);
                     }
-
+                    console.log('user');
                     waterfallCb(null, employee, user);
                 });
             }
 
             function employeeUpdater(employee, user, waterfallCb) {
                 var _id = employee._id;
-
+                console.log('update');
                 EmployeeService.findByIdAndUpdate(_id, {$set: {relatedUser: user._id}}, {dbName: dbName}, waterfallCb);
             }
 
@@ -1902,7 +1902,7 @@ var Employee = function (event, models) {
                     if (err) {
                         return next(err);
                     }
-
+                    console.log('ok');
                     res.status(201).send({result: employee, id: employee._id});
                 });
             });
@@ -2055,7 +2055,7 @@ var Employee = function (event, models) {
      }*/
 
     this.updateOnlySelectedFields = function (req, res, next) {
-        console.log(2233);
+
         var dbName = req.session.lastDb;
         var Model = models.get(dbName, 'Employees', EmployeeSchema);
         var _id = req.params.id;
@@ -2402,7 +2402,7 @@ var Employee = function (event, models) {
                 }
             }, {
                 $project: {
-                    later: {$substrCP: ['$name.last', 0, 1]}
+                    later: {$substrCP: ['$name.alpha', 0, 1]}
                     //later: {$substr: ['$name.last', 0, 1]}
                 }
             }, {
diff --git a/byerp/handlers/goodsInNote.js b/byerp/handlers/goodsInNote.js
index 78bb01f..f799a9b 100644
--- a/byerp/handlers/goodsInNote.js
+++ b/byerp/handlers/goodsInNote.js
@@ -463,6 +463,7 @@ var GoodsInNotes = function (models, event) {
                             query : {
                                 goodsInNote: goodsNote._id,
                                 product    : goodsOrderRow.product,
+                                quantity   : goodsOrderRow.quantity,
                                 warehouse  : goodsNote.warehouse
                             }
                         }, function (err) {
diff --git a/byerp/handlers/goodsOutNote.js b/byerp/handlers/goodsOutNote.js
index eaf595e..e1dd29f 100644
--- a/byerp/handlers/goodsOutNote.js
+++ b/byerp/handlers/goodsOutNote.js
@@ -13,6 +13,7 @@ var GoodsOutNotes = function (models, event) {
     var OrderRowsSchema = mongoose.Schemas.OrderRow;
     var OrderSchema = mongoose.Schemas.Order;
     var BarCodeSchema = mongoose.Schemas.barCode;
+    var writeOffsSchema = mongoose.Schemas.WriteOffs;
     var JournalEntryHandler = require('./journalEntry');
     var journalEntry = new JournalEntryHandler(models);
     var AvailabilityService = require('../services/productAvailability')(models);
@@ -767,6 +768,63 @@ var GoodsOutNotes = function (models, event) {
         })
 
     };
+
+    this.getBarCodesByGoodNote = function (req, res, next) {
+        var retObj = {};
+        var barCodes = [];
+        var lastDb = req.session.lastDb || 'saas';
+        var GoodsOutNote = models.get(lastDb, 'GoodsOutNote', GoodsOutSchema);
+        var BarCode = models.get(lastDb, 'barCode', BarCodeSchema);
+        var id = req.query.id || req.params.id;
+
+        GoodsOutNote.findOne({_id: id}, function(err, goodsOutNote){
+            if(err){
+                return next(err)
+            }
+
+            if(goodsOutNote === null){
+                retObj.retStatus = 'Fail';
+                retObj.retError = '暂无该发货计划';
+                res.status(200).send(retObj);
+            }else{
+                async.each(goodsOutNote.orderRows, function (orderRow, eachCb1) {
+                    async.each(orderRow.barCodes, function (barCodeId, eachCb2) {
+                        BarCode.findById(barCodeId)
+                            .exec(function (err, barCode) {
+                                if (err) {
+                                    eachCb2(err);
+                                }
+
+                                barCodes.push(barCode);
+
+                                eachCb2(null);
+                            });
+                    }, function (err) {
+                        if (err) {
+                            return eachCb1(err);
+                        }
+
+                        eachCb1(null);
+                    });
+                }, function (err) {
+                    if (err) {
+                        return next(err);
+                    }
+
+                    if(barCodes.length == 0){
+                        retObj.retStatus = 'Fail';
+                        retObj.retError = '该发货计划没有找到对应发货条码';
+                        res.status(200).send(retObj);
+                    }else{
+                        retObj.retStatus = 'OK';
+                        retObj.retValue = barCodes;
+                        res.status(200).send(retObj);
+                    }
+                });
+            }
+        })
+
+    };
 };
 
 module.exports = GoodsOutNotes;
diff --git a/byerp/handlers/labourAttendance.js b/byerp/handlers/labourAttendance.js
index 2143bb5..5825c13 100644
--- a/byerp/handlers/labourAttendance.js
+++ b/byerp/handlers/labourAttendance.js
@@ -877,7 +877,7 @@ var Module = function (models) {
 
                                     resultItem = result && result.length ? result[0] : {};
 
-                                    pcb(null, resultItem.endowmentInd||0);
+                                    pcb(null, resultItem.endowmentInd*100||0);
                             });
                         }
 
@@ -902,7 +902,7 @@ var Module = function (models) {
 
                                 resultItem = result && result.length ? result[0] : {};
 
-                                pcb(null, resultItem.unemployeeInd||0);
+                                pcb(null, resultItem.unemployeeInd*100||0);
                             });
                         }
 
@@ -927,7 +927,7 @@ var Module = function (models) {
 
                                 resultItem = result && result.length ? result[0] : {};
 
-                                pcb(null, resultItem.medicalInd||0);
+                                pcb(null, resultItem.medicalInd*100||0);
                             });
                         }
 
@@ -953,7 +953,7 @@ var Module = function (models) {
 
                                 resultItem = result && rseult.length? result[0]: {};
 
-                                pcb(null, resultItem.cityHealth||0);
+                                pcb(null, resultItem.cityHealth*100||0);
                             });
                         }
 
diff --git a/byerp/handlers/order.js b/byerp/handlers/order.js
index 3f022aa..a7ef11f 100644
--- a/byerp/handlers/order.js
+++ b/byerp/handlers/order.js
@@ -1,2469 +1,2459 @@
-var mongoose = require('mongoose');
-
-var Module = function (models, event) {
-    'use strict';
-
-    var DepartmentSchema = mongoose.Schemas.Department;
-    var purchaseOrdersSchema = mongoose.Schemas.purchaseOrders;
-    var JobsSchema = mongoose.Schemas.jobs;
-    var wTrackSchema = mongoose.Schemas.wTrack;
-    var objectId = mongoose.Types.ObjectId;
-    var InvoiceSchema = mongoose.Schemas.Invoices;
-    var QuotationSchema = mongoose.Schemas.QuotationSchema;
-    var WorkflowSchema = mongoose.Schemas.workflow;
-    var rewriteAccess = require('../helpers/rewriteAccess');
-    var accessRoll = require('../helpers/accessRollHelper.js')(models);
-    var Uploader = require('../services/fileStorage/index');
-    var uploader = new Uploader();
-    var RESPONSES = require('../constants/responses');
-    var async = require('async');
-    var mapObject = require('../helpers/bodyMaper');
-    var _ = require('../node_modules/underscore');
-    //var ratesService = require('../services/rates')(models);
-    var goodsOutNotesService = require('../services/goodsOutNotes')(models);
-    var goodsInNotesService = require('../services/goodsInNotes')(models);
-    var OrderSchema = mongoose.Schemas.Order;
-    var GoodsOutSchema = mongoose.Schemas.GoodsOutNote;
-    var GoodsInSchema = mongoose.Schemas.GoodsInNote;
-    var OrderRowsSchema = mongoose.Schemas.OrderRow;
-    var ProjectSchema = mongoose.Schemas.Project;
-    var ProductSchema = mongoose.Schemas.Products;
-    var PrepaymentSchema = mongoose.Schemas.Prepayment;
-    var AvailabilitySchema = mongoose.Schemas.productsAvailability;
-    var CurrencySchema = mongoose.Schemas.Currency;
-    var crawlerResultsSchema = mongoose.Schemas.crawlerResults;
-    var marketSettingsSchema = mongoose.Schemas.marketSettings;
-    var QuotationContractSchema = mongoose.Schemas.purchaseContract;
-    var HistoryService = require('../services/history.js')(models);
-    var StockReturnsService = require('../services/stockReturns.js')(models);
-    var path = require('path');
-    var CONSTANTS = require('../constants/mainConstants.js');
-    var pageHelper = require('../helpers/pageHelper');
-    var moment = require('../public/js/libs/moment/moment');
-    //var ratesRetriever = require('../helpers/ratesRetriever')();
-    var FilterMapper = require('../helpers/filterMapper');
-    var filterMapper = new FilterMapper();
-    var GoodsOutNote = require('./goodsOutNote');
-    var goodsOutNote = new GoodsOutNote(models, event);
-    var GoodsInNotes = require('./goodsInNote');
-    var goodsInNotes = new GoodsInNotes(models, event);
-    var fs = require('fs');
-    var orderCT = 'order';
-    var purchaseOrderCT = 'purchaseOrders';
-    var xlsx = require('node-xlsx');
-    var barCodeSchema = mongoose.Schemas.barCode;
-
-    function updateOnlySelectedFields(req, res, next, id, data) {
-        var dbName = req.session.lastDb;
-        var Order = models.get(dbName, 'Order', OrderSchema);
-        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
-
-        var orderRows;
-        var fileName;
-        var os;
-        var _id;
-        var osType;
-        var path;
-        var dir;
-        var newDirname;
-        var obj;
-        var deletedOrderRows;
-
-        if (data.orderRows) {
-            orderRows = data.orderRows;
-            delete data.orderRows;
-        }
-
-        if (data.deletedProducts) {
-            deletedOrderRows = data.deletedProducts;
-            delete data.deletedProducts;
-        }
-
-        if (data.notes && data.notes.length !== 0) {
-            obj = data.notes[data.notes.length - 1];
-
-            if (!obj._id) {
-                obj._id = mongoose.Types.ObjectId();
-            }
-
-            if (!obj.user) {
-                obj.user = {};
-                obj.user._id = req.session.uId;
-                obj.user.login = req.session.uName;
-            }
-
-            data.notes[data.notes.length - 1] = obj;
-        }
-
-        if (deletedOrderRows) {
-            async.each(deletedOrderRows, function (orderRowId, cb) {
-                OrderRows.findByIdAndRemove(orderRowId, function (err) {
-                    if (err) {
-                        return cb(err);
-                    }
-
-                    cb();
-                });
-            }, function (err) {
-                if (err) {
-                    return next(err);
-                }
-
-                updateOrderRows();
-            });
-        } else {
-            updateOrderRows();
-        }
-
-        function updateOrderRows() {
-            if (data.fileName) {
-
-                fileName = data.fileName;
-                os = require('os');
-                osType = (os.type().split('_')[0]);
-
-                _id = id;
-
-                switch (osType) {
-                    case 'Windows':
-                        newDirname = __dirname.replace('handlers', 'routes');
-
-                        while (newDirname.indexOf('\\') !== -1) {
-                            newDirname = newDirname.replace('\\', '\/');
-                        }
-                        path = newDirname + '\/uploads\/' + _id + '\/' + fileName;
-                        dir = newDirname + '\/uploads\/' + _id;
-                        break;
-                    case 'Linux':
-                        newDirname = __dirname.replace('handlers', 'routes');
-
-                        while (newDirname.indexOf('\\') !== -1) {
-                            newDirname = newDirname.replace('\\', '\/');
-                        }
-                        path = newDirname + '\/uploads\/' + _id + '\/' + fileName;
-                        dir = newDirname + '\/uploads\/' + _id;
-                        break;
-                    //skip default;
-                }
-
-                fs.unlink(path, function (err) {
-                    fs.readdir(dir, function () {
-                        if (data.attachments && data.attachments.length === 0) {
-                            fs.rmdir(dir, function () {
-                            });
-                        }
-                    });
-                });
-
-                delete data.fileName;
-
-                Order.findByIdAndUpdate(id, {$set: data}, {new: true}, function (err, oredr) {
-                    if (err) {
-                        return next(err);
-                    }
-
-                    getById(req, res, next);
-                });
-
-            } else {
-                Order.findByIdAndUpdate(id, {$set: data}, {new: true}, function (err, order) {
-                    var historyOptions;
-
-                    if (err) {
-                        return next(err);
-                    }
-
-                    historyOptions = {
-                        contentType: 'order',
-                        data       : data,
-                        dbName     : dbName,
-                        contentId  : id
-                    };
-
-                    HistoryService.addEntry(historyOptions, function () {
-                        if (orderRows) {
-                            async.each(orderRows, function (orderRow, cb) {
-                                var id = orderRow.id;
-                                var row;
-
-                                if (!id) {
-                                    orderRow.order = order._id;
-                                    row = new OrderRows(orderRow);
-                                    row.save(function (err, elem) {
-                                        if (err) {
-                                            return cb(err);
-                                        }
-                                        cb();
-                                    });
-                                } else {
-                                    delete orderRow.id;
-                                    OrderRows.findByIdAndUpdate(id, orderRow, {new: true}, function (err, doc) {
-                                        if (err) {
-                                            return cb(err);
-                                        }
-                                        cb();
-                                    });
-                                }
-
-                            }, function (err) {
-                                if (err) {
-                                    return next(err);
-                                }
-
-                                event.emit('recalculateStatus', req, order._id, next);
-
-                                getById(req, res, next);
-                            });
-
-                        } else {
-                            getById(req, res, next);
-                        }
-                    });
-                });
-            }
-        }
-    }
-
-    function getHistory(req, order, cb) {
-        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
-
-        var historyOptions = {
-            forNote: true,
-            dbName : req.session.lastDb,
-            id     : order._id
-        };
-
-        HistoryService.getHistoryForTrackedObject(historyOptions, function (err, history) {
-            var notes;
-
-            if (err) {
-                return cb(err);
-            }
-
-            notes = history.map(function (elem) {
-                return {
-                    date   : elem.date,
-                    history: elem,
-                    user   : elem.editedBy
-                };
-            });
-
-            if (!order.notes) {
-                order.notes = [];
-            }
-            order.notes = order.notes.concat(notes);
-            order.notes = _.sortBy(order.notes, 'date');
-            cb(null, order);
-
-        }, true);
-
-    }
-
-    this.create = function (req, res, next) {
-        var db = req.session.lastDb;
-        var Order = models.get(db, 'Order', OrderSchema);
-        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
-        var JobsModel = models.get(req.session.lastDb, 'jobs', JobsSchema);
-        var body = mapObject(req.body);
-        var order;
-        var mid = parseInt(req.headers.mid, 10) || 129;
-        var arrayRows = body.products;
-        var rates;
-        var currency = body.currency;
-        var base;
-        
-        if (mid === 129) {
-            Order = models.get(db, 'purchaseOrders', purchaseOrdersSchema);
-        }
-
-        // currencyHalper(body.orderDate, function (err, oxr) {
-
-        // ratesService.getById({dbName: db, id: body.orderDate}, function (err, ratesObject) {
-            // rates = ratesObject ? ratesObject.rates : {};
-            // base = ratesObject ? ratesObject.base : 'USD';
-
-            body.currency = body.currency || {};
-            // body.currency.rate = ratesRetriever.getRate(rates, base, currency.name);
-            body.currency.rate = 1;
-
-            order = new Order(body);
-
-            if (req.session.uId) {
-                order.createdBy.user = req.session.uId;
-                order.editedBy.user = req.session.uId;
-            }
-
-            order.save(function (err, _order) {
-                var historyOptions;
-                var arr;
-                if (err) {
-                    return next(err);
-                }
-
-                historyOptions = {
-                    contentType: 'order',
-                    data       : _order.toJSON(),
-                    dbName     : db,
-                    contentId  : _order._id
-                };
-                HistoryService.addEntry(historyOptions, function () {
-                });
-
-                arr = arrayRows.map(function (elem) {
-                    elem._id = objectId();
-                    elem.product = objectId(elem.product);
-                    elem.warehouse = objectId(elem.warehouse);
-                    elem.debitAccount = elem.debitAccount ? objectId(elem.debitAccount) : null;
-                    elem.creditAccount = elem.creditAccount ? objectId(elem.creditAccount) : null;
-                    elem.order = _order._id;
-                    elem.quantity = parseInt(elem.quantity, 10);
-
-                    return elem;
-                });
-
-                OrderRows.collection.insertMany(arr, function (err, docs) {
-                    var insertedIds;
-
-                    if (err) {
-                        return next(err);
-                    }
-
-                    insertedIds = docs.insertedIds;
-
-                    OrderRows.aggregate([{
-                        $match: {_id: {$in: insertedIds}}
-                    }, {
-                        $lookup: {
-                            from        : 'Products',
-                            localField  : 'product',
-                            foreignField: '_id',
-                            as          : 'product'
-                        }
-                    }, {
-                        $project: {
-                            product: {$arrayElemAt: ['$product', 0]}
-                        }
-                    }, {
-                        $group: {
-                            _id : null,
-                            jobs: {$addToSet: '$product.job'}
-                        }
-                    }], function (err, result) {
-                        var jobIds;
-                        var body;
-
-                        if (err) {
-                            return next(err);
-                        }
-
-                        body = {
-                            order: _order._id,
-                            type : 'Ordered'
-                        };
-
-                        jobIds = result && result.length ? result[0].jobs : [];
-
-                        JobsModel.update({_id: {$in: jobIds}}, {$set: body}, {multi: true}, function (rer, result) {
-                            if (err) {
-                                return next(err);
-                            }
-
-                            res.status(201).send(_order);
-                        });
-                    });
-
-                });
-
-            });
-        // });
-    };
-
-    this.putchModel = function (req, res, next) {
-        var db = req.session.lastDb;
-        var id = req.params.id;
-        var data = mapObject(req.body);
-        var mid = parseInt(req.headers.mid, 10);
-        var waterfallTasks;
-        var getGoodsOutNotes;
-        var updateFields;
-        var removeGoods;
-
-        data.editedBy = {
-            user: req.session.uId,
-            date: new Date().toISOString()
-        };
-        data.currency = data.currency || {};
-
-        if (data.cancel && data.forSales) {
-            getGoodsOutNotes = function (callback) {
-                goodsOutNotesService.getByOrder({dbName: db, order: objectId(id)}, callback);
-            };
-
-            removeGoods = function (ids, callback) {
-                var options = {
-                    ids   : ids,
-                    dbName: db,
-                    req   : req
-                };
-                goodsOutNote.removeByOrder(options, callback);
-            };
-
-            updateFields = function (callback) {
-                callback();
-                updateOnlySelectedFields(req, res, next, id, data);
-            };
-
-            waterfallTasks = [getGoodsOutNotes, removeGoods, updateFields];
-            async.waterfall(waterfallTasks, function () {
-
-            });
-
-            return false;
-        }
-
-        if (data.cancel) {
-            getGoodsOutNotes = function (callback) {
-                goodsInNotesService.getByOrder({dbName: db, order: objectId(id)}, callback);
-            };
-
-            removeGoods = function (ids, callback) {
-                var options = {
-                    ids   : ids,
-                    dbName: db,
-                    req   : req
-                };
-                goodsInNotes.removeByOrder(options, function (err) {
-                    if (err && err.status !== 400) {
-                        return next(err);
-                    } else if (err && err.status === 400) {
-                        res.status(400).send({error: err.message});
-                    }
-
-                    callback();
-                });
-            };
-
-            updateFields = function (callback) {
-                callback();
-                updateOnlySelectedFields(req, res, next, id, data);
-            };
-
-            waterfallTasks = [getGoodsOutNotes, removeGoods, updateFields];
-            async.waterfall(waterfallTasks, function () {
-
-            });
-
-            return false;
-        }
-
-        // if (data.orderDate) {
-        //     ratesService.getById({dbName: db, id: data.orderDate}, function (err, oxr) {
-        //         var currency = data.currency ? data.currency.name : 'USD';
-        //         var rates;
-        //         var base;
-
-        //         oxr = oxr || {};
-        //         rates = oxr.rates || {};
-        //         base = oxr.base || 'USD';
-        //         data.currency.rate = ratesRetriever.getRate(rates, base, currency);
-        //         updateOnlySelectedFields(req, res, next, id, data);
-        //     });
-        // } else {
-        updateOnlySelectedFields(req, res, next, id, data);
-
-        // }
-    };
-
-    this.updateModel = function (req, res, next) {
-        var db = req.session.lastDb;
-        var id = req.params.id;
-        var data = mapObject(req.body);
-        var waterfallTasks;
-        var getGoodsOutNotes;
-        var updateFields;
-        var removeGoods;
-
-        data.editedBy = {
-            user: req.session.uId,
-            date: new Date().toISOString()
-        };
-        data.currency = data.currency || {};
-
-        if (data.cancel && data.forSales) {
-
-            getGoodsOutNotes = function (callback) {
-                goodsOutNotesService.getByOrder({dbName: db, order: objectId(id)}, callback);
-            };
-
-            removeGoods = function (ids, callback) {
-                var options = {
-                    ids   : ids,
-                    dbName: db,
-                    req   : req
-                };
-                goodsOutNote.removeByOrder(options, callback);
-            };
-
-            updateFields = function (callback) {
-                callback();
-                updateOnlySelectedFields(req, res, next, id, data);
-            };
-
-            waterfallTasks = [getGoodsOutNotes, removeGoods, updateFields];
-            async.waterfall(waterfallTasks, function () {
-
-            });
-
-            return false;
-        }
-
-        if (data.orderDate) {
-/**
-            ratesService.getById({dbName: db, id: data.orderDate}, function (err, oxr) {
-                var currency = data.currency ? data.currency.name : 'USD';
-                var rates;
-                var base;
-
-                oxr = oxr || {};
-                rates = oxr.rates;
-                base = oxr.base || 'USD';
-                data.currency.rate = rates[currency][base] || 1;
-
-                updateOnlySelectedFields(req, res, next, id, data);
-            }); **/
-        } else {
-            updateOnlySelectedFields(req, res, next, id, data);
-
-        }
-    };
-
-
-    this.uploadFile = function (req, res, next) {
-        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
-        var headers = req.headers;
-        var addNote = headers.addnote;
-        var id = headers.modelid || 'empty';
-        var contentType = headers.modelname || 'order';
-        var files = req.files && req.files.attachfile ? req.files.attachfile : null;
-        var dir;
-        var err;
-
-        contentType = contentType.toLowerCase();
-        dir = path.join(contentType, id);
-
-        if (!files) {
-            err = new Error(RESPONSES.BAD_REQUEST);
-            err.status = 400;
-
-            return next(err);
-        }
-
-        uploader.postFile(dir, files, {userId: req.session.uName}, function (err, file) {
-            var notes = [];
-            if (err) {
-                return next(err);
-            }
-
-            if (addNote) {
-                notes = file.map(function (elem) {
-                    return {
-                        _id       : mongoose.Types.ObjectId(),
-                        attachment: {
-                            name    : elem.name,
-                            shortPas: elem.shortPas
-                        },
-
-                        user: {
-                            _id  : req.session.uId,
-                            login: req.session.uName
-                        },
-
-                        date: new Date()
-                    };
-                });
-            }
-
-            Order.findByIdAndUpdate(id, {
-                $push: {
-                    attachments: {$each: file},
-                    notes      : {$each: notes}
-                }
-            }, {new: true}, function (err, response) {
-                if (err) {
-                    return next(err);
-                }
-
-                res.status(200).send({success: 'Order updated success', data: response});
-            });
-        });
-    };
-    function getByViewType(req, res, next) {
-        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
-        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
-        var data = req.query;
-        var paginationObject = pageHelper(data);
-        var limit = paginationObject.limit;
-        var skip = paginationObject.skip;
-        var accessRollSearcher;
-        var contentSearcher;
-        var waterfallTasks;
-        var contentType = data.contentType;
-        var sort = {};
-        var filter = data.filter || {};
-        var key;
-        var queryObject = {};
-        var optionsObject = {};
-        var pastDue = filter.pastDue;
-
-        queryObject.$and = [];
-
-        if (filter && typeof filter === 'object') {
-             queryObject.$and.push(filterMapper.mapFilter(filter, {contentType: contentType})); // caseFilter(filter);
-        }
-
-        if (data.sort) {
-            key = Object.keys(data.sort)[0];
-            data.sort[key] = parseInt(data.sort[key], 10);
-            sort = data.sort;
-        } else {
-            sort = {orderDate: -1};
-        }
-
-        if (contentType !== 'order' && contentType !== 'integrationUnlinkedOrders') {
-            Order = models.get(req.session.lastDb, 'purchaseOrders', purchaseOrdersSchema);
-
-            queryObject.$and.push({_type: 'purchaseOrders'});
-        } else {
-            queryObject.$and.push({_type: 'Order', orderType: 'salesOrder'});
-        }
-
-        if (pastDue) {
-            optionsObject.$and.push({expectedDate: {$gt: new Date(filter.date.value[1])}}, {'workflow.status': {$ne: 'Done'}});
-        }
-
-        accessRollSearcher = function (cb) {
-            accessRoll(req, Order, cb);
-        };
-
-        contentSearcher = function (ids, cb) {
-            var newQueryObj = {};
-
-            var salesManagerMatch = {
-                $and: [
-                    {$eq: ['$$projectMember.projectPositionId', objectId(CONSTANTS.SALESMANAGER)]},
-                    {
-                        $or: [{
-                            $and: [{
-                                $eq: ['$$projectMember.startDate', null]
-                            }, {
-                                $eq: ['$$projectMember.endDate', null]
-                            }]
-                        }, {
-                            $and: [{
-                                $lte: ['$$projectMember.startDate', '$orderDate']
-                            }, {
-                                $eq: ['$$projectMember.endDate', null]
-                            }]
-                        }, {
-                            $and: [{
-                                $eq: ['$$projectMember.startDate', null]
-                            }, {
-                                $gte: ['$$projectMember.endDate', '$orderDate']
-                            }]
-                        }, {
-                            $and: [{
-                                $lte: ['$$projectMember.startDate', '$orderDate']
-                            }, {
-                                $gte: ['$$projectMember.endDate', '$orderDate']
-                            }]
-                        }]
-                    }]
-            };
-
-            /*if (queryObject && queryObject.$and && queryObject.$and.length && queryObject.$and[0].name) {
-             queryObject.$and[0] = {
-             name: queryObject.$and[0].name.$in[0]
-             };
-             }*/
-
-            newQueryObj.$and = [];
-            newQueryObj.$and.push(queryObject);
-            newQueryObj.$and.push({_id: {$in: ids}});
-
-            Order.aggregate([{
-                $lookup: {
-                    from        : 'projectMembers',
-                    localField  : 'project',
-                    foreignField: 'projectId',
-                    as          : 'projectMembers'
-                }
-            }, {
-                $lookup: {
-                    from        : 'Payment',
-                    localField  : '_id',
-                    foreignField: 'order',
-                    as          : 'payments'
-                }
-            }, {
-                $lookup: {
-                    from        : 'Customers',
-                    localField  : 'supplier',
-                    foreignField: '_id',
-                    as          : 'supplier'
-                }
-            }, {
-                $lookup: {
-                    from        : 'workflows',
-                    localField  : 'workflow',
-                    foreignField: '_id',
-                    as          : 'workflow'
-                }
-            }, {
-                $lookup: {
-                    from        : 'currency',
-                    localField  : 'currency._id',
-                    foreignField: '_id',
-                    as          : 'currency._id'
-                }
-            }, {
-                $lookup: {
-                    from        : 'Project',
-                    localField  : 'project',
-                    foreignField: '_id',
-                    as          : 'project'
-                }
-            }, {
-                $lookup: {
-                    from        : 'Employees',
-                    localField  : 'salesPerson',
-                    foreignField: '_id',
-                    as          : 'salesPerson'
-                }
-            }, {
-                $lookup: {
-                    from        : 'integrations',
-                    localField  : 'channel',
-                    foreignField: '_id',
-                    as          : 'channel'
-                }
-            }, {
-                $lookup: {
-                    from        : 'orderRows',
-                    localField  : '_id',
-                    foreignField: 'order',
-                    as          : 'products'
-                }
-            }, {
-                $project: {
-                    workflow       : {$arrayElemAt: ['$workflow', 0]},
-                    supplier       : {$arrayElemAt: ['$supplier', 0]},
-                    'currency._id' : {$arrayElemAt: ['$currency._id', 0]},
-                    payments       : 1,
-                    'currency.rate': 1,
-                    salesManagers  : {
-                        $filter: {
-                            input: '$projectMembers',
-                            as   : 'projectMember',
-                            cond : salesManagerMatch
-                        }
-                    },
-
-                    channel    : {$arrayElemAt: ['$channel', 0]},
-                    salesPerson: {$arrayElemAt: ['$salesPerson', 0]},
-                    orderRows  : 1,
-                    paymentInfo: 1,
-                    orderDate  : 1,
-                    name       : 1,
-                    status     : 1,
-                    _type      : 1,
-                    forSales   : 1,
-                    products   : 1,
-                    orderType  : 1,
-                    project    : {$arrayElemAt: ['$project', 0]}
-                }
-            }, 
-
-            {
-                $project: {
-                    salesManager: {$arrayElemAt: ['$salesManagers', 0]},
-                    supplier    : {
-                        _id : '$supplier._id',
-                        name: {$concat: ['$supplier.name.first', ' ', '$supplier.name.last']}
-                    },
-
-                    workflow: {
-                        _id   : '$workflow._id',
-                        status: '$workflow.status',
-                        name  : '$workflow.name'
-                    },
-
-                    channel: {
-                        _id : '$channel._id',
-                        name: '$channel.channelName',
-                        type: '$channel.type'
-                    },
-
-                    currency       : 1,
-                    paymentInfo    : 1,
-                    orderDate      : 1,
-                    salesPerson    : 1,
-                    name           : 1,
-                    isOrder        : 1,
-                    proformaCounter: 1,
-                    payments       : 1,
-                    status         : 1,
-                    _type          : 1,
-                    forSales       : 1,
-                    products       : 1,
-                    orderType      : 1,
-                    project        : 1
-                }
-            }, {
-                $lookup: {
-                    from        : 'Employees',
-                    localField  : 'salesManager.employeeId',
-                    foreignField: '_id',
-                    as          : 'salesManager'
-                }
-            }, {
-                $project: {
-                    salesPerson: {$ifNull: ['$salesPerson', {$arrayElemAt: ['$salesManager', 0]}]},
-                    workflow   : 1,
-                    supplier   : 1,
-                    currency   : 1,
-                    paymentInfo: 1,
-                    orderDate  : 1,
-                    payments   : 1,
-                    name       : 1,
-                    status     : 1,
-                    _type      : 1,
-                    forSales   : 1,
-                    channel    : 1,
-                    products   : 1,
-                    orderType  : 1,
-                    project    : 1
-                }
-            }, {
-                $project: {
-                    salesPerson: {
-                        _id : '$salesPerson._id',
-                        name: {$concat: ['$salesPerson.name.first', ' ', '$salesPerson.name.last']}
-                    },
-                    workflow   : 1,
-                    supplier   : 1,
-                    currency   : 1,
-                    paymentInfo: 1,
-                    orderDate  : 1,
-                    name       : 1,
-                    status     : 1,
-                    _type      : 1,
-                    forSales   : 1,
-                    channel    : 1,
-                    payments   : 1,
-                    products   : 1,
-                    orderType  : 1,
-                    project    : 1,
-                    removable  : {
-                        $cond: {
-                            if  : {$and: [{$ne: ['$workflow.status', 'Done']}, {$ne: ['$status.fulfillStatus', 'ALL']}]},
-                            then: true,
-                            else: false
-                        }
-                    }
-                }
-            }, {
-                $match: newQueryObj
-            }, {
-                $group: {
-                    _id  : null,
-                    total: {$sum: 1},
-                    root : {$push: '$$ROOT'}
-                }
-            }, {
-                $unwind: '$root'
-            }, {
-                $project: {
-                    _id        : '$root._id',
-                    salesPerson: '$root.salesPerson',
-                    workflow   : '$root.workflow',
-                    supplier   : '$root.supplier',
-                    currency   : '$root.currency',
-                    paymentInfo: '$root.paymentInfo',
-                    orderDate  : '$root.orderDate',
-                    name       : '$root.name',
-                    status     : '$root.status',
-                    removable  : '$root.removable',
-                    channel    : '$root.channel',
-                    payments   : '$root.payments',
-                    products   : '$root.products',
-                    orderType  : '$root.orderType',
-                    project    : '$root.project',
-                    total      : 1
-                }
-            }, {
-                $unwind: {
-                    path                      : '$payments',
-                    preserveNullAndEmptyArrays: true
-                }
-            }, {
-                $project: {
-                    salesPerson          : 1,
-                    workflow             : 1,
-                    supplier             : 1,
-                    currency             : 1,
-                    paymentInfo          : 1,
-                    orderDate            : 1,
-                    name                 : 1,
-                    status               : 1,
-                    removable            : 1,
-                    channel              : 1,
-                    products             : 1,
-                    orderType            : 1,
-                    project              : 1,
-                    total                : 1,
-                    'payments.currency'  : 1,
-                    'payments.paidAmount': {$cond: [{$eq: ['$payments.refund', true]}, {$multiply: ['$payments.paidAmount', -1]}, '$payments.paidAmount']}
-                }
-            }, {
-                $group: {
-                    _id         : '$_id',
-                    salesPerson : {$first: '$salesPerson'},
-                    workflow    : {$first: '$workflow'},
-                    supplier    : {$first: '$supplier'},
-                    currency    : {$first: '$currency'},
-                    paymentInfo : {$first: '$paymentInfo'},
-                    orderDate   : {$first: '$orderDate'},
-                    name        : {$first: '$name'},
-                    status      : {$first: '$status'},
-                    removable   : {$first: '$removable'},
-                    channel     : {$first: '$channel'},
-                    products    : {$first: '$products'},
-                    orderType   : {$first: '$orderType'},
-                    project     : {$first: '$project'},
-                    paymentsPaid: {$sum: {$divide: ['$payments.paidAmount', '$payments.currency.rate']}},
-                    total       : {$first: '$total'}
-                }
-            }, {
-                $sort: sort
-            }, {
-                $skip: skip
-            }, {
-                $limit: limit
-            }], cb);
-        };
-
-        waterfallTasks = [accessRollSearcher, contentSearcher];
-
-        async.waterfall(waterfallTasks, function (err, result) {
-            var count;
-            var firstElement;
-            var response = {};
-
-            if (err) {
-                return next(err);
-            }
-
-            firstElement = result[0];
-            count = firstElement && firstElement.total ? firstElement.total : 0;
-            response.total = count;
-            response.count = result.length;
-            response.data = result;
-            res.status(200).send(response);
-        });
-    }
-
-    function getAvailableForRows(req, docs, forSales, cb) {
-        var Availability = forSales ? models.get(req.session.lastDb,'barCode',barCodeSchema) : models.get(req.session.lastDb, 'productsAvailability', AvailabilitySchema);
-        var GoodsOutNote = models.get(req.session.lastDb, 'GoodsOutNote', GoodsOutSchema);
-        var GoodsInNote = models.get(req.session.lastDb, 'GoodsInNote', GoodsInSchema);
-        var populateDocs = [];
-        var allGoodsNotes = [];
-
-        if (docs && docs.length) {
-            async.each(docs, function (elem, eachCb) {
-                var product;
-                var warehouseId;
-
-                var parallelTasks;
-
-                elem = elem.toJSON();
-
-                product = elem.product ? elem.product._id : null;
-                warehouseId = elem.warehouse ? objectId(elem.warehouse._id) : null;
-
-                function getAvailabilities(parallelCb) {
-
-                    if(forSales){
-                        Availability.aggregate([{
-                            $match: {
-                                orderRowId : elem._id
-                            }
-                        },{
-                            $lookup: {
-                                from        : 'workCentres',
-                                localField  : 'curWorkCentre',
-                                foreignField: '_id',
-                                as          : 'curWorkCentre'
-                            }
-                        },{
-                            $project: {
-                                curWorkCentre : {$arrayElemAt: ['$curWorkCentre', 0]}
-                            }
-                        }], function (err, availability) {
-                            if (err) {
-                                return parallelCb(err);
-                            }
-                            var result = [];
-                            result[0] = {
-                                allocated : 0,
-                                onHand : 0,
-                                inStock : 0,
-                                onOrder : 0
-                            };
-
-                            if(availability.length){
-                                result[0].inStock = availability.length;
-                                for(var i=0; i<availability.length; i++){
-                                    if(availability[i].curWorkCentre.code === "07"){
-                                        result[0].onHand++;
-                                    }
-                                }
-                            }
-
-                            parallelCb(null, result);
-                        });
-                    }else{
-                        Availability.aggregate([{
-                            $match: {
-                                product  : objectId(product),
-                                warehouse: warehouseId
-                            }
-                        }, {
-                            $project: {
-                                product      : 1,
-                                warehouse    : 1,
-                                onHand       : 1,
-                                filterRows   : {
-                                    $filter: {
-                                        input: '$orderRows',
-                                        as   : 'elem',
-                                        cond : {$eq: ['$$elem.orderRowId', objectId(elem._id)]}
-                                    }
-                                },
-                                orderRows    : 1,
-                                goodsOutNotes: 1
-                            }
-                        }, {
-                            $project: {
-                                product  : 1,
-                                warehouse: 1,
-                                onHand   : 1,
-                                allocated: {
-                                    $sum: '$filterRows.quantity'
-                                },
-
-                                allocatedAll: {
-                                    $sum: '$orderRows.quantity'
-                                },
-
-                                fulfillAll: {
-                                    $sum: '$goodsOutNotes.quantity'
-                                }
-                            }
-                        }, {
-                            $project: {
-                                product  : 1,
-                                warehouse: 1,
-                                onHand   : 1,
-                                allocated: 1,
-                                inStock  : {
-                                    $add: ['$onHand', '$allocatedAll', '$fulfillAll']
-                                }
-                            }
-                        }, {
-                            $group: {
-                                _id      : '$warehouse',
-                                allocated: {
-                                    $sum: '$allocated'
-                                },
-
-                                onHand: {
-                                    $sum: '$onHand'
-                                },
-
-                                inStock: {
-                                    $sum: '$inStock'
-                                },
-
-                                onOrder: {
-                                    $sum: '$onOrder'
-                                }
-                            }
-                        }], function (err, availability) {
-                            if (err) {
-                                return parallelCb(err);
-                            }
-                            parallelCb(null, availability);
-                        });
-                    }
-                }
-
-                function getNotes(parallelCb) {
-                    var Model = forSales ? GoodsOutNote : GoodsInNote;
-
-                    Model.aggregate([{
-                        $match: {
-                            'orderRows.orderRowId': elem._id,
-                            _type                 : forSales ? 'GoodsOutNote' : 'GoodsInNote',
-                            archived              : {$ne: true}
-                        }
-                    }, {
-                        $lookup: {
-                            from        : 'warehouse',
-                            localField  : 'warehouse',
-                            foreignField: '_id',
-                            as          : 'warehouse'
-                        }
-                    }, {
-                        $lookup: {
-                            from        : 'productsAvailability',
-                            localField  : '_id',
-                            foreignField: 'goodsInNote',
-                            as          : 'goodsInNote'
-                        }
-                    }, {
-                        $lookup: {
-                            from        : 'Users',
-                            localField  : 'status.printedById',
-                            foreignField: '_id',
-                            as          : 'status.printedById'
-                        }
-                    }, {
-                        $lookup: {
-                            from        : 'Users',
-                            localField  : 'status.pickedById',
-                            foreignField: '_id',
-                            as          : 'status.pickedById'
-                        }
-                    }, {
-                        $lookup: {
-                            from        : 'Users',
-                            localField  : 'status.packedById',
-                            foreignField: '_id',
-                            as          : 'status.packedById'
-                        }
-                    }, {
-                        $lookup: {
-                            from        : 'Users',
-                            localField  : 'status.shippedById',
-                            foreignField: '_id',
-                            as          : 'status.shippedById'
-                        }
-                    }, {
-                        $lookup: {
-                            from        : 'Order',
-                            localField  : 'order',
-                            foreignField: '_id',
-                            as          : 'order'
-                        }
-                    }, {
-                        $project: {
-                            name    : '$name',
-                            orderRow: {
-                                $filter: {
-                                    input: '$orderRows',
-                                    as   : 'elem',
-                                    cond : {$eq: ['$$elem.orderRowId', objectId(elem._id)]}
-                                }
-                            },
-
-                            goodsInNote         : {$arrayElemAt: ['$goodsInNote', 0]},
-                            warehouse           : {$arrayElemAt: ['$warehouse', 0]},
-                            order               : {$arrayElemAt: ['$order', 0]},
-                            'status.printedById': {$arrayElemAt: ['$status.printedById', 0]},
-                            'status.pickedById' : {$arrayElemAt: ['$status.pickedById', 0]},
-                            'status.packedById' : {$arrayElemAt: ['$status.packedById', 0]},
-                            'status.shippedById': {$arrayElemAt: ['$status.shippedById', 0]},
-                            'status.printedOn'  : 1,
-                            'status.pickedOn'   : 1,
-                            'status.packedOn'   : 1,
-                            'status.shippedOn'  : 1,
-                            'status.receivedOn' : 1,
-                            'status.shipped'    : 1,
-                            'status.picked'     : 1,
-                            'status.packed'     : 1,
-                            'status.printed'    : 1
-                        }
-                    }, {
-                        $project: {
-                            name                : '$name',
-                            orderRow            : {$arrayElemAt: ['$orderRow', 0]},
-                            status              : 1,
-                            warehouse           : 1,
-                            'goodsInNote._id'   : 1,
-                            'goodsInNote.onHand': 1,
-                            'order.name'        : 1
-                        }
-                    }, {
-                        $project: {
-                            name        : '$name',
-                            orderRow    : '$orderRow.orderRowId',
-                            quantity    : '$orderRow.quantity',
-                            status      : 1,
-                            warehouse   : 1,
-                            goodsInNote : 1,
-                            'order.name': 1
-                        }
-                    }], function (err, docs) {
-                        if (err) {
-                            return parallelCb(err);
-                        }
-                        if (docs && docs.length) {
-                            docs = docs.map(function (el) {
-                                el._id = el._id.toJSON();
-                                return el;
-                            });
-                        }
-
-                        parallelCb(null, docs);
-                    });
-                }
-
-                parallelTasks = [getNotes, getAvailabilities];
-
-                async.parallel(parallelTasks, function (err, response) {
-                    var availability;
-                    var goodsNotes;
-
-                    if (err) {
-                        return eachCb(err);
-                    }
-
-                    availability = response[1];
-                    goodsNotes = response[0];
-                    allGoodsNotes = allGoodsNotes.concat(goodsNotes);
-                    availability = availability && availability.length ? availability[0] : null;
-
-                    if (availability) {
-                        elem.inStock = availability.inStock;
-                        elem.onHand = availability.onHand;
-                        elem.allocated = availability.allocated;
-                    }
-                    elem.goodsNotes = goodsNotes;
-                    elem.fulfilled = 0;
-
-                    if (goodsNotes && goodsNotes.length) {
-                        goodsNotes.forEach(function (el) {
-                            elem.fulfilled += el.quantity;
-                        });
-                    }
-
-                    populateDocs.push(elem);
-                    eachCb();
-                });
-
-            }, function (err) {
-                if (err) {
-                    return cb(err);
-                }
-
-                allGoodsNotes = _.uniq(allGoodsNotes, '_id');
-
-                cb(null, populateDocs, allGoodsNotes);
-
-            });
-        } else {
-            cb();
-        }
-
-    }
-
-    function getById(req, res, next) {
-        var id = req.query.id || req.params.id;
-        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
-        var Prepayments = models.get(req.session.lastDb, 'prepayment', PrepaymentSchema);
-        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
-        var Invoice = models.get(req.session.lastDb, 'Invoices', InvoiceSchema);
-        var BarCode = models.get(req.session.lastDb,'barCode',barCodeSchema);
-        var departmentSearcher;
-        var contentIdsSearcher;
-        var orderRowsSearcher;
-        var contentSearcher;
-        var prepaymentsSearcher;
-        var invoiceSearcher;
-        var stockReturnsSearcher;
-        var waterfallTasks;
-
-        if (id.length < 24) {
-            return res.status(400).send();
-        }
-
-        /* var contentType = req.query.contentType;
-         var isOrder = ((contentType === 'Orders') || (contentType === 'salesOrders'));*/
-
-        departmentSearcher = function (waterfallCallback) {
-            models.get(req.session.lastDb, 'Department', DepartmentSchema).aggregate(
-                {
-                    $match: {
-                        users: objectId(req.session.uId)
-                    }
-                }, {
-                    $project: {
-                        _id: 1
-                    }
-                },
-
-                waterfallCallback);
-        };
-
-        contentIdsSearcher = function (deps, waterfallCallback) {
-            var everyOne = rewriteAccess.everyOne();
-            var owner = rewriteAccess.owner(req.session.uId);
-            var group = rewriteAccess.group(req.session.uId, deps);
-            var whoCanRw = [everyOne, owner, group];
-            var matchQuery = {
-                $or: whoCanRw
-            };
-
-            var Model = models.get(req.session.lastDb, 'Order', OrderSchema);
-
-            Model.aggregate({
-                $match: matchQuery
-            }, {
-                $project: {
-                    _id: 1
-                }
-            }, waterfallCallback);
-        };
-
-        contentSearcher = function (quotationsIds, waterfallCallback) {
-            var query;
-
-            query = Order.findById(id);
-
-            query
-                .populate('supplier', '_id name fullName address')
-                .populate('destination')
-                // .populate('currency._id')
-                .populate('incoterm')
-                .populate('priceList', 'name')
-                .populate('costList', 'name')
-                .populate('warehouse', 'name')
-                .populate('salesPerson', 'name')
-                .populate('invoiceControl')
-                .populate('paymentTerm')
-                .populate('paymentMethod', '_id name account bank address swiftCode owner')
-                .populate('editedBy.user', '_id login')
-                .populate('deliverTo', '_id, name')
-                .populate('project', '_id name')
-                .populate('shippingMethod', '_id name')
-                .populate('workflow', '_id name status')
-                .populate('contract', '_id number');
-            query.exec(waterfallCallback);
-        };
-
-        orderRowsSearcher = function (order, waterfallCallback) {
-
-            OrderRows.find({order: order._id})
-                .populate('product', 'cost name sku info')
-                .populate('debitAccount', 'name')
-                .populate('creditAccount', 'name')
-                .populate('taxes.taxCode', 'fullName rate')
-                .populate('warehouse', 'name')
-                .sort('products')
-                .exec(function (err, docs) {
-                    if (err) {
-                        return waterfallCallback(err);
-                    }
-
-                    order = order.toJSON();
-                    getAvailableForRows(req, docs, order.forSales, function (err, docs, goodsNotes) {
-                        if (err) {
-                            return waterfallCallback(err);
-                        }
-
-                        order.products = docs;
-                        order.account = docs && docs.length ? docs[0].debitAccount : {};
-
-                        if (!order.forSales) {
-                            order.account = docs && docs.length ? docs[0].creditAccount : {};
-                        }
-
-                        order.goodsNotes = goodsNotes;
-
-                        waterfallCallback(null, order);
-                    });
-                });
-        };
-
-        prepaymentsSearcher = function (order, waterfallCallback) {
-            Prepayments.aggregate([{
-                $match: {
-                    order: objectId(id)
-                }
-            }, {
-                $project: {
-                    paidAmount: 1,
-                    currency  : 1,
-                    date      : 1,
-                    name      : 1,
-                    refund    : 1
-                }
-            }, {
-                $project: {
-                    paidAmount: {$divide: ['$paidAmount', '$currency.rate']},
-                    date      : 1,
-                    name      : 1,
-                    refund    : 1
-                }
-            }, {
-                $project: {
-                    paidAmount: {$cond: [{$eq: ['$refund', true]}, {$multiply: ['$paidAmount', -1]}, '$paidAmount']},
-                    date      : 1,
-                    name      : 1,
-                    refund    : 1
-                }
-            }, {
-                $group: {
-                    _id  : null,
-                    sum  : {$sum: '$paidAmount'},
-                    names: {$push: '$name'},
-                    date : {$min: '$date'}
-                }
-            }], function (err, result) {
-                if (err) {
-                    return waterfallCallback(err);
-                }
-
-                order.prepayment = result && result.length ? result[0] : {};
-
-                waterfallCallback(null, order);
-            });
-        };
-
-        invoiceSearcher = function (order, waterfallCallback) {
-            Invoice.aggregate([{
-                $match: {
-                    sourceDocument: objectId(id)
-                }
-            }, {
-                $project: {
-                    name: 1
-                }
-            }], function (err, result) {
-                if (err) {
-                    return waterfallCallback(err);
-                }
-
-                order.invoice = result && result.length ? result[0] : {};
-                waterfallCallback(null, order);
-            });
-        };
-
-        stockReturnsSearcher = function (order, waterfallCallback) {
-            StockReturnsService.findForOrder({
-                query : {order: objectId(order._id)},
-                dbName: req.session.lastDb
-            }, function (err, docs) {
-                if (err) {
-                    return waterfallCallback(err);
-                }
-
-                order.stockReturns = docs || [];
-
-                waterfallCallback(null, order);
-            })
-        };
-
-        waterfallTasks = [departmentSearcher, contentIdsSearcher, contentSearcher, orderRowsSearcher, prepaymentsSearcher, invoiceSearcher, stockReturnsSearcher];
-
-        async.waterfall(waterfallTasks, function (err, result) {
-
-            if (err) {
-                return next(err);
-            }
-            getHistory(req, result, function (err, order) {
-                if (err) {
-                    return next(err);
-                }
-                res.status(200).send(order);
-            });
-        });
-    }
-
-
-
-
-
-    this.getById = function (req, res, next) {
-        getById(req, res, next);
-    };
-
-    this.getByViewType = function (req, res, next) {
-        var query = req.query;
-        var viewType = query.viewType;
-        var id = req.query.id;
-
-        if (id && id.length >= 24) {
-            getById(req, res, next);
-            return false;
-        }
-
-        switch (viewType) {
-            case 'form':
-                getById(req, res, next);
-                break;
-            default:
-                getByViewType(req, res, next);
-                break;
-        }
-    };
-
-    this.remove = function (req, res, next) {
-        var id = req.params.id;
-        var project;
-        var type = 'Not Ordered';
-        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
-        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
-        var GoodsOutNote = models.get(req.session.lastDb, 'GoodsOutNote', GoodsOutSchema);
-        var JobsModel = models.get(req.session.lastDb, 'jobs', JobsSchema);
-        var wTrack = models.get(req.session.lastDb, 'wTrack', wTrackSchema);
-        var Availability = models.get(req.session.lastDb, 'productsAvailability', AvailabilitySchema);
-        var editedBy = {
-            user: req.session.uId,
-            date: new Date()
-        };
-
-        Order.findByIdAndRemove(id, function (err, order) {
-            if (err) {
-                return next(err);
-            }
-
-            OrderRows.find({order: id}).populate('product', 'job').exec(function (err, docs) {
-                    if (err) {
-                        return next(err);
-                    }
-
-                    GoodsOutNote.remove({order: order._id}, function () {
-                    });
-
-                    async.each(docs, function (orderRow, cb) {
-                        if (!orderRow.product.job) {
-                            return cb();
-                        }
-
-                        Availability.update({product: orderRow.product._id}, {$set: {onHand: 1}}, function (err) {
-                            if (err) {
-                                return cb(err);
-                            }
-
-                            JobsModel.findByIdAndUpdate(orderRow.product.job, {
-                                type    : type,
-                                order   : null,
-                                editedBy: editedBy
-                            }, {new: true}, function (err, result) {
-                                var wTracks;
-
-                                if (err) {
-                                    return cb(err);
-                                }
-
-                                project = result ? result.get('project') : null;
-                                wTracks = result ? result.wTracks : [];
-
-                                async.each(wTracks, function (wTr, callback) {
-                                    wTrack.findByIdAndUpdate(wTr, {$set: {revenue: 0}}, callback);
-                                }, function () {
-                                    cb();
-                                });
-                            });
-                        });
-
-                    }, function () {
-                        OrderRows.remove({order: id}, function (err) {
-                            if (err) {
-                                return next(err);
-                            }
-                        });
-
-                        res.status(200).send({success: order});
-                    });
-                }
-            );
-        });
-    };
-
-    this.getForProject = function (req, res, next) {
-        var db = req.session.lastDb;
-        var projectId = req.params.id;
-        var Order = models.get(db, 'Order', OrderSchema);
-        var query = req.query;
-        var queryObject = {};
-        var optionsObject = {};
-        var sort = {};
-        var paginationObject = pageHelper(query);
-        var limit = paginationObject.limit;
-        var skip = paginationObject.skip;
-        var key;
-
-        var departmentSearcher;
-        var contentIdsSearcher;
-        var contentSearcher;
-        var waterfallTasks;
-
-        projectId = projectId ? objectId(projectId) : null;
-
-        if (projectId) {
-            queryObject.project = projectId;
-        }
-
-        if (req.query.sort) {
-            key = Object.keys(req.query.sort)[0];
-            req.query.sort[key] = parseInt(req.query.sort[key], 10);
-            sort = req.query.sort;
-        } else {
-            sort = {workflow: -1};
-        }
-
-        departmentSearcher = function (waterfallCallback) {
-            models.get(req.session.lastDb, 'Department', DepartmentSchema).aggregate(
-                {
-                    $match: {
-                        users: objectId(req.session.uId)
-                    }
-                }, {
-                    $project: {
-                        _id: 1
-                    }
-                },
-                waterfallCallback);
-        };
-
-        contentIdsSearcher = function (deps, waterfallCallback) {
-            var everyOne = rewriteAccess.everyOne();
-            var owner = rewriteAccess.owner(req.session.uId);
-            var group = rewriteAccess.group(req.session.uId, deps);
-            var whoCanRw = [everyOne, owner, group];
-            var matchQuery = {
-                $and: [
-                    queryObject,
-                    {
-                        $or: whoCanRw
-                    }
-                ]
-            };
-
-            Order.aggregate([{
-                $match: matchQuery
-            }, {
-                $project: {
-                    _id: 1
-                }
-            }], waterfallCallback);
-        };
-
-        contentSearcher = function (ids, waterfallCallback) {
-            var salesManagerMatch = {
-                $and: [
-                    {$eq: ['$$projectMember.projectPositionId', objectId(CONSTANTS.SALESMANAGER)]},
-                    {
-                        $or: [{
-                            $and: [{
-                                $eq: ['$$projectMember.startDate', null]
-                            }, {
-                                $eq: ['$$projectMember.endDate', null]
-                            }]
-                        }, {
-                            $and: [{
-                                $lte: ['$$projectMember.startDate', '$quotation.orderDate']
-                            }, {
-                                $eq: ['$$projectMember.endDate', null]
-                            }]
-                        }, {
-                            $and: [{
-                                $eq: ['$$projectMember.startDate', null]
-                            }, {
-                                $gte: ['$$projectMember.endDate', '$quotation.orderDate']
-                            }]
-                        }, {
-                            $and: [{
-                                $lte: ['$$projectMember.startDate', '$quotation.orderDate']
-                            }, {
-                                $gte: ['$$projectMember.endDate', '$quotation.orderDate']
-                            }]
-                        }]
-                    }]
-            };
-
-            optionsObject.$and = [];
-
-            optionsObject.$and.push({_id: {$in: _.pluck(ids, '_id')}});
-
-            Order
-                .aggregate([{
-                    $match: queryObject
-                }, {
-                    $lookup: {
-                        from        : 'projectMembers',
-                        localField  : 'project',
-                        foreignField: 'projectId',
-                        as          : 'projectMembers'
-                    }
-                }, {
-                    $lookup: {
-                        from        : 'Customers',
-                        localField  : 'supplier',
-                        foreignField: '_id',
-                        as          : 'supplier'
-                    }
-                }, {
-                    $lookup: {
-                        from        : 'workflows',
-                        localField  : 'workflow',
-                        foreignField: '_id',
-                        as          : 'workflow'
-                    }
-                }, {
-                    $lookup: {
-                        from        : 'currency',
-                        localField  : 'currency._id',
-                        foreignField: '_id',
-                        as          : 'currency._id'
-                    }
-                }, {
-                    $project: {
-                        workflow       : {$arrayElemAt: ['$workflow', 0]},
-                        supplier       : {$arrayElemAt: ['$supplier', 0]},
-                        'currency._id' : {$arrayElemAt: ['$currency._id', 0]},
-                        'currency.rate': 1,
-
-                        salesManagers: {
-                            $filter: {
-                                input: '$projectMembers',
-                                as   : 'projectMember',
-                                cond : salesManagerMatch
-                            }
-                        },
-
-                        paymentInfo: 1,
-                        orderDate  : 1,
-                        name       : 1,
-                        status     : 1
-                    }
-                }, {
-                    $project: {
-                        salesManagers: {$arrayElemAt: ['$salesManagers', 0]},
-
-                        supplier: {
-                            _id : '$supplier._id',
-                            name: '$supplier.name'
-                        },
-
-                        workflow: {
-                            status: '$workflow.status',
-                            name  : '$workflow.name'
-                        },
-
-                        currency   : 1,
-                        paymentInfo: 1,
-                        orderDate  : 1,
-                        status     : 1,
-                        name       : 1
-                    }
-                }, {
-                    $lookup: {
-                        from        : 'Employees',
-                        localField  : 'salesManagers.employeeId',
-                        foreignField: '_id',
-                        as          : 'salesManagers'
-                    }
-                }, {
-                    $project: {
-                        salesPerson: {$arrayElemAt: ['$salesManagers', 0]},
-                        workflow   : 1,
-                        supplier   : 1,
-                        currency   : 1,
-                        paymentInfo: 1,
-                        orderDate  : 1,
-                        name       : 1,
-                        status     : 1
-                    }
-                }, {
-                    $project: {
-                        salesPerson: {
-                            _id : '$salesPerson._id',
-                            name: '$salesPerson.name'
-                        },
-
-                        workflow   : 1,
-                        supplier   : 1,
-                        currency   : 1,
-                        paymentInfo: 1,
-                        orderDate  : 1,
-                        name       : 1,
-                        status     : 1,
-                        removable  : {
-                            $cond: {
-                                if  : {$and: [{$ne: ['$workflow.status', 'Done']}, {$ne: ['$status.fulfillStatus', 'ALL']}]},
-                                then: true,
-                                else: false
-                            }
-                        }
-                    }
-                }, {
-                    $match: optionsObject
-                }, {
-                    $group: {
-                        _id  : null,
-                        total: {$sum: 1},
-                        root : {$push: '$$ROOT'}
-                    }
-                }, {
-                    $unwind: '$root'
-                }, {
-                    $project: {
-                        _id        : '$root._id',
-                        salesPerson: '$root.salesPerson',
-                        workflow   : '$root.workflow',
-                        supplier   : '$root.supplier',
-                        currency   : '$root.currency',
-                        paymentInfo: '$root.paymentInfo',
-                        orderDate  : '$root.orderDate',
-                        status     : '$root.status',
-                        name       : '$root.name',
-                        removable  : '$root.removable',
-                        total      : 1
-                    }
-                }, {
-                    $sort: sort
-                }, {
-                    $skip: skip
-                }, {
-                    $limit: limit
-                }], function (err, result) {
-                    waterfallCallback(null, result);
-                });
-        };
-
-        waterfallTasks = [departmentSearcher, contentIdsSearcher, contentSearcher];
-
-        async.waterfall(waterfallTasks, function (err, result) {
-            var count;
-            var firstElement;
-            var response = {};
-
-            if (err) {
-                return next(err);
-            }
-
-            firstElement = result[0];
-            count = firstElement && firstElement.total ? firstElement.total : 0;
-            response.total = count;
-            response.data = result;
-
-            res.status(200).send(response);
-        });
-    };
-
-    this.getFilterValues = function (req, res, next) {
-        var Quotation = models.get(req.session.lastDb, 'Quotation', QuotationSchema);
-
-        async.waterfall([
-            function (cb) {
-                Quotation
-                    .aggregate([
-                        {
-                            $group: {
-                                _id         : null,
-                                'Order date': {
-                                    $addToSet: '$orderDate'
-                                }
-                            }
-                        }
-                    ], function (err, quot) {
-                        if (err) {
-                            return cb(err);
-
-                        }
-
-                        cb(null, quot);
-                    });
-            },
-            function (quot, cb) {
-                cb(null, quot);
-            }
-
-        ], function (err, result) {
-            if (err) {
-                return next(err);
-            }
-            res.status(200).send(result);
-
-        });
-    };
-
-    this.bulkRemove = function (req, res, next) {
-        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
-        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
-        var body = req.body || {ids: []};
-        var ids = body.ids;
-
-        // todo some validation on ids array, like check for objectId
-
-        Order.remove({_id: {$in: ids}}, function (err, removed) {
-            if (err) {
-                return next(err);
-            }
-
-            OrderRows.remove({order: {$in: ids}}, function (err, docs) {
-                if (err) {
-                    return next(err);
-                }
-                res.status(200).send(removed);
-            });
-
-        });
-    };
-
-    this.getByWorkflows = function (req, res, next) {
-        var dbIndex = req.session.lastDb;
-        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
-        var data = req.query;
-        var forSales = data.forSales === 'true';
-        var filter = data.filter || {};
-        var match = filterMapper.mapFilter(filter, {contentType: orderCT});
-
-        if (!forSales) {
-            Order = models.get(dbIndex, purchaseOrderCT, purchaseOrdersSchema);
-            match = filterMapper.mapFilter(filter, {contentType: purchaseOrderCT});
-        }
-
-        Order.aggregate([{
-            $match: match
-        }, {
-            $match: {
-                forSales: forSales
-            }
-        }, {
-            $lookup: {
-                from        : 'workflows',
-                localField  : 'workflow',
-                foreignField: '_id',
-                as          : 'workflow'
-            }
-        }, {
-            $project: {
-                sum     : {$divide: ['$paymentInfo.total', '$currency.rate']},
-                workflow: {$arrayElemAt: ['$workflow', 0]},
-                status  : 1
-            }
-        }, {
-            $group: {
-                _id   : '$workflow._id',
-                total : {$sum: '$sum'},
-                status: {$addToSet: '$status'},
-                name  : {$first: '$workflow.name'},
-                count : {$sum: 1}
-            }
-        }, {
-            $project: {
-                total : {$divide: ['$total', 100]},
-                name  : 1,
-                count : 1,
-                status: 1
-            }
-        }], function (err, result) {
-            if (err) {
-                return next(err);
-            }
-
-            res.status(200).send(result);
-        });
-
-    };
-
-    this.getBySupplier = function(req, res, next) {
-        var ids = req.query.ids || req.params.ids;
-        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
-        var Prepayments = models.get(req.session.lastDb, 'prepayment', PrepaymentSchema);
-        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
-        var Invoice = models.get(req.session.lastDb, 'Invoices', InvoiceSchema);
-        var Currency = models.get(req.session.lastDb, 'currency', CurrencySchema);
-        var arr = [];
-        
-        async.map(ids, function(id, cb) {
-
-            var departmentSearcher;
-            var contentIdsSearcher;
-            var orderRowsSearcher;
-            var contentSearcher;
-            var prepaymentsSearcher;
-            var invoiceSearcher;
-            var stockReturnsSearcher;
-            var waterfallTasks;
-
-            departmentSearcher = function (waterfallCallback) {
-                models.get(req.session.lastDb, 'Department', DepartmentSchema).aggregate(
-                    {
-                        $match: {
-                            users: objectId(req.session.uId)
-                        }
-                    }, {
-                        $project: {
-                            _id: 1
-                        }
-                    },
-
-                    waterfallCallback);
-            };
-
-            contentIdsSearcher = function (deps, waterfallCallback) {
-                var everyOne = rewriteAccess.everyOne();
-                var owner = rewriteAccess.owner(req.session.uId);
-                var group = rewriteAccess.group(req.session.uId, deps);
-                var whoCanRw = [everyOne, owner, group];
-                var matchQuery = {
-                    $or: whoCanRw
-                };
-
-                var Model = models.get(req.session.lastDb, 'Order', OrderSchema);
-
-                Model.aggregate({
-                    $match: matchQuery
-                }, {
-                    $project: {
-                        _id: 1
-                    }
-                }, waterfallCallback);
-            };
-
-            contentSearcher = function (quotationsIds, waterfallCallback) {
-                var query;
-
-                query = Order.findById(id);
-
-                query
-                    .populate('supplier', '_id name fullName address')
-                    .populate('destination')
-                    .populate('currency._id')
-                    .populate('incoterm')
-                    .populate('priceList', 'name')
-                    .populate('costList', 'name')
-                    .populate('warehouse', 'name')
-                    .populate('salesPerson', 'name')
-                    .populate('invoiceControl')
-                    .populate('paymentTerm')
-                    .populate('paymentMethod', '_id name account bank address swiftCode owner')
-                    .populate('editedBy.user', '_id login')
-                    .populate('deliverTo', '_id, name')
-                    .populate('project', '_id name')
-                    .populate('shippingMethod', '_id name')
-                    .populate('workflow', '_id name status');
-
-                query.exec(waterfallCallback);
-            };
-
-            orderRowsSearcher = function (order, waterfallCallback) {
-
-
-                OrderRows.find({order: order._id})
-                    .populate('product')
-                    .populate('debitAccount', 'name')
-                    .populate('creditAccount', 'name')
-                    .populate('taxes.taxCode', 'fullName rate')
-                    .populate('warehouse', 'name')
-                    .sort('products')
-                    .exec(function (err, docs) {
-                        if (err) {
-                            return waterfallCallback(err);
-                        }
-
-                        order = order.toJSON();
-
-                        getAvailableForRows(req, docs, order.forSales, function (err, docs, goodsNotes) {
-                            if (err) {
-                                return waterfallCallback(err);
-                            }
-
-                            order.products = docs;
-                            order.account = docs && docs.length ? docs[0].debitAccount : {};
-
-                            order.goodsNotes = goodsNotes;
-                            waterfallCallback(null, order);
-                        });
-
-                    });
-            };
-
-            prepaymentsSearcher = function (order, waterfallCallback) {
-                Prepayments.aggregate([{
-                    $match: {
-                        order: objectId(id)
-                    }
-                }, {
-                    $project: {
-                        paidAmount: 1,
-                        currency  : 1,
-                        date      : 1,
-                        name      : 1,
-                        refund    : 1
-                    }
-                }, {
-                    $project: {
-                        paidAmount: {$divide: ['$paidAmount', '$currency.rate']},
-                        date      : 1,
-                        name      : 1,
-                        refund    : 1
-                    }
-                }, {
-                    $project: {
-                        paidAmount: {$cond: [{$eq: ['$refund', true]}, {$multiply: ['$paidAmount', -1]}, '$paidAmount']},
-                        date      : 1,
-                        name      : 1,
-                        refund    : 1
-                    }
-                }, {
-                    $group: {
-                        _id  : null,
-                        sum  : {$sum: '$paidAmount'},
-                        names: {$push: '$name'},
-                        date : {$min: '$date'}
-                    }
-                }], function (err, result) {
-                    if (err) {
-                        return waterfallCallback(err);
-                    }
-
-                    order.prepayment = result && result.length ? result[0] : {};
-
-                    waterfallCallback(null, order);
-                });
-            };
-
-            invoiceSearcher = function (order, waterfallCallback) {
-                Invoice.aggregate([{
-                    $match: {
-                        sourceDocument: objectId(id)
-                    }
-                }, {
-                    $project: {
-                        name: 1
-                    }
-                }], function (err, result) {
-                    if (err) {
-                        return waterfallCallback(err);
-                    }
-
-                    order.invoice = result && result.length ? result[0] : {};
-                    waterfallCallback(null, order);
-                });
-            };
-
-            stockReturnsSearcher = function (order, waterfallCallback) {
-                StockReturnsService.findForOrder({
-                    query : {order: objectId(order._id)},
-                    dbName: req.session.lastDb
-                }, function (err, docs) {
-                    if (err) {
-                        return waterfallCallback(err);
-                    }
-
-                    order.stockReturns = docs || [];
-
-                    waterfallCallback(null, order);
-                })
-            };
-
-            waterfallTasks = [departmentSearcher, contentIdsSearcher, contentSearcher, orderRowsSearcher, prepaymentsSearcher, invoiceSearcher, stockReturnsSearcher];
-
-            async.waterfall(waterfallTasks, function (err, result) {
-
-                if (err) {
-                    return next(err);
-                }
-
-                getHistory(req, result, function (err, order) {
-                    if (err) {
-                        return next(err);
-                    }
-
-                    arr.push(order);
-                    cb(null,order);
-                });
-            });
-
-        }, function(err){
-            if (err) {
-                return next(err);
-            }
-
-            res.status(200).send(arr);
-        });
-    };
-
-    this.importexcel = function(req, res, next){
-        var data = req.body;
-        var file = req.files && req.files.file ? req.files.file : null;
-        var Project = models.get(req.session.lastDb, 'Project', ProjectSchema);
-        var Product = models.get(req.session.lastDb, 'Product', ProductSchema);
-        var Availability = models.get(req.session.lastDb, 'productsAvailability', AvailabilitySchema);
-        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
-        var purchaseOrders = models.get(req.session.lastDb, 'purchaseOrders', purchaseOrdersSchema);
-        var GoodsInNote = models.get(req.session.lastDb, 'GoodsInNote', GoodsInSchema);
-        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
-        var Workflow = models.get(req.session.lastDb, 'workflow', WorkflowSchema);
-        var userId = req.session.uId;
-        var list = xlsx.parse(file.path);
-        var tempResult = [];
-        var error;
-        var status = {
-            allocateStatus: 'NOT',
-            fulfillStatus : 'NOT',
-            shippingStatus: 'NOT'
-
-        };
-
-        var excelName = req.params.id.search('.xlsx');
-
-        if(excelName == -1){
-            var jsonfileName = '../uploads/exceljson/' + req.params.id.replace('.xls','') + '.json';
-        }
-        else{
-            var jsonfileName = '../uploads/exceljson/' + req.params.id.replace('.xlsx','') + '.json';
-        }
-
-        var jsonFile = require(jsonfileName);
-
-        function findAndReplaceId(callback){
-
-            if(list[0].data.length != 0){
-                list[0].data.shift();
-            };
-            
-            var projectName = list[0].data[0][1];
-            var projectId;
-            
-            Project.findOne({name : projectName}, function (err, mod) {
-
-                if (err) {
-                    console.log(err);
-                } else {
-                    if (mod) {
-                        projectId = mod._id;
-                        callback(null,projectId);
-
-                    } else {
-                        error = new Error('name = ' + projectName + ' 在数据库中不存在');
-                        error.status = 400;
-                        console.log(error);
-                    }
-                }
-            });
-
-
-        };
-
-        function findWorkflow(projectId, callback){
-            Workflow.find({status : "New", wId : "Purchase Order"})
-                .exec(function (err, workflow) {
-                    if (err) {
-                        return waterfallCallback(err);
-                    }
-
-                    var para = {};
-                    para.projectId = projectId;
-                    para.workflowId = workflow[0]._id;
-
-                    callback(null,para);
-            });
-        };
-
-        function getTotal(para, callback){
-
-            async.each(list,function(listObj, asyncCb){
-
-                var projectName = listObj.data[0][1];
-
-                for(var i = 2; i < jsonFile.startLine; i++){
-                    listObj.data.shift();
-                }
-
-                var orderData = {
-                    project : para.projectId,
-                    status  : status,
-                    orderType : 'purchaseOrder',
-                    forSales : false,
-                    workflow : para.workflowId 
-                };
-
-                orderData.createdBy = {};
-
-                orderData.createdBy.user = req.session.uId;
-
-                var order = new purchaseOrders(orderData);
-                order.save(function(err, result){
-                    if(err){
-                        return next(err);
-                    }
-
-                    async.each(listObj.data,function(tempObj, asyncCb){
-                        if(tempObj[0] != null && tempObj[0] != '总计'){
-                            var xlsData = {};
-                            var parameters = [];
-                            var tempCode;                
-
-                            var priceQty = tempObj[3] ? tempObj[3] : '';
-                            var product = tempObj[1] ? tempObj[1] : '';
-                            var quantity = tempObj[2] ? tempObj[2] : '';
-                            var description = tempObj[4] ? tempObj[4] : '';
-
-                            xlsData.F = tempObj[5] ? tempObj[5] : '';
-                            xlsData.G = tempObj[6] ? tempObj[6] : '';
-                            xlsData.H = tempObj[7] ? tempObj[7] : '';
-                            xlsData.I = tempObj[8] ? tempObj[8] : '';
-                            xlsData.J = tempObj[9] ? tempObj[9] : '';
-                            xlsData.K = tempObj[10] ? tempObj[10] : '';
-                            xlsData.L = tempObj[11] ? tempObj[11] : '';
-                            xlsData.M = tempObj[12] ? tempObj[12] : '';
-                            xlsData.N = tempObj[13] ? tempObj[13] : '';
-                            xlsData.O = tempObj[14] ? tempObj[14] : '';
-                            xlsData.P = tempObj[15] ? tempObj[15] : '';
-                            xlsData.Q = tempObj[16] ? tempObj[16] : '';
-
-                            for(var key in jsonFile.fields_name){
-                                parameters.push({
-                                    paraname     : jsonFile.fields_name[key],
-                                    value        : xlsData[key]
-                                });
-                            }
-
-                            Product.findOne({name : product}, function (err, mod) {
-
-                                if (err) {
-                                    console.log(err);
-                                }
-
-                                tempCode = mod._id;
-
-                                var orderRowsData = {
-                                    product    : tempCode,
-                                    priceQty   : priceQty,
-                                    quantity   : quantity,
-                                    description: description,
-                                    parameters : parameters,
-                                    order      : result._id
-                                }
-
-                                var orderRows = new OrderRows(orderRowsData);
-                                orderRows.save(function(err, rowsResult){
-                                    if(err){
-                                        return next(err);
-                                    }
-                                })
-
-                                tempResult.push(orderRowsData);
-                                
-                                });
-
-                        }
-                    });
-
-                })
-
-                asyncCb(null, tempResult);
-
-            });
-
-            callback(null,tempResult);
-        };
-
-        async.waterfall([findAndReplaceId, findWorkflow, getTotal], function(err, excelResult){
-
-            if(err){
-                return next(err);
-            }
-
-            var response = {};
-
-            response.data = excelResult;
-           
-            res.status(200).send(response);
-        });        
-    };
-
-    this.catchPrices = function(req, res, next){
-        var crawlerResultsModel = models.get(req.session.lastDb, 'crawlerResults', crawlerResultsSchema);
-        var marketSettingsModel = models.get(req.session.lastDb, 'marketSettings', marketSettingsSchema);
-        var data = req.query;
-        var date = data.date;
-        var products = [];
-        var dayTime = date.split("-");
-        dayTime = dayTime.join("");
-        var Tasks = models.get(req.session.lastDb, 'purchaseContract', QuotationContractSchema);
-
-        Tasks.findById(data.id)
-            .populate('project', '_id projectShortDesc name pmr customer')
-            .populate(' assignedTo', '_id name imageSrc')
-            .populate(' pmr', '_id name imageSrc')
-            .populate('products.product', '_id name info')
-            .populate('project.pmr', 'id name')
-            .populate(' customer')
-            .populate('createdBy.user')
-            .populate('createdBy.user')
-            .populate('editedBy.user')
-            .populate('archedBy.user')
-            .populate('groups.users')
-            .populate('groups.group')
-            .populate('workflow')
-            .populate('supplier')
-            .exec(function (err, task) {
-                if (err) {
-                    next(err);
-                }
-                async.each(task.products, function (product, cb){
-                    var marketId = product.sourceAl;
-                    marketSettingsModel.findOne({_id : marketId}, function (err, market){
-                        var classId = market.classId;
-                        crawlerResultsModel.findOne({dayTime : dayTime, classId : classId}, function (err, crawlerResult) {
-                            if(err) {
-                                console.log(err);
-                            }
-                            var Newproduct = {};
-                            console.log(crawlerResult);
-                            Newproduct.product = product.product;
-                            Newproduct.price1 = product.price1;
-                            Newproduct.price2 = product.price2;
-                            Newproduct.price3 = product.price3;
-                            Newproduct.price4 = product.price4;
-                            Newproduct.price5 = product.price5;
-                            Newproduct.qty1 = product.qty1;
-                            Newproduct.qty2 = product.qty2;
-                            Newproduct.qty3 = product.qty3;
-                            Newproduct.qty4 = product.qty4;
-                            Newproduct.qty5 = product.qty5;
-                            Newproduct.quantity = product.quantity;
-
-                            if(crawlerResult){
-                                Newproduct.average = crawlerResult.average;
-                            }
-
-                            console.log(Newproduct);
-                            products.push(Newproduct);
-                            cb(null);
-                        });
-                    });
-                }, function (err){
-                    if(err){
-                        return next(err);
-                    }
-                    var response = {};
-                    response.products = products;
-                    res.status(200).send(response);
-                });
-            });
-
-    };
-
-};
-
-module.exports = Module;
+var mongoose = require('mongoose');
+
+var Module = function (models, event) {
+    'use strict';
+
+    var DepartmentSchema = mongoose.Schemas.Department;
+    var purchaseOrdersSchema = mongoose.Schemas.purchaseOrders;
+    var JobsSchema = mongoose.Schemas.jobs;
+    var wTrackSchema = mongoose.Schemas.wTrack;
+    var objectId = mongoose.Types.ObjectId;
+    var InvoiceSchema = mongoose.Schemas.Invoices;
+    var QuotationSchema = mongoose.Schemas.QuotationSchema;
+    var WorkflowSchema = mongoose.Schemas.workflow;
+    var rewriteAccess = require('../helpers/rewriteAccess');
+    var accessRoll = require('../helpers/accessRollHelper.js')(models);
+    var Uploader = require('../services/fileStorage/index');
+    var uploader = new Uploader();
+    var RESPONSES = require('../constants/responses');
+    var async = require('async');
+    var mapObject = require('../helpers/bodyMaper');
+    var _ = require('../node_modules/underscore');
+    //var ratesService = require('../services/rates')(models);
+    var goodsOutNotesService = require('../services/goodsOutNotes')(models);
+    var goodsInNotesService = require('../services/goodsInNotes')(models);
+    var OrderSchema = mongoose.Schemas.Order;
+    var GoodsOutSchema = mongoose.Schemas.GoodsOutNote;
+    var GoodsInSchema = mongoose.Schemas.GoodsInNote;
+    var OrderRowsSchema = mongoose.Schemas.OrderRow;
+    var ProjectSchema = mongoose.Schemas.Project;
+    var ProductSchema = mongoose.Schemas.Products;
+    var PrepaymentSchema = mongoose.Schemas.Prepayment;
+    var AvailabilitySchema = mongoose.Schemas.productsAvailability;
+    var CurrencySchema = mongoose.Schemas.Currency;
+    var crawlerResultsSchema = mongoose.Schemas.crawlerResults;
+    var marketSettingsSchema = mongoose.Schemas.marketSettings;
+    var QuotationContractSchema = mongoose.Schemas.purchaseContract;
+    var HistoryService = require('../services/history.js')(models);
+    var StockReturnsService = require('../services/stockReturns.js')(models);
+    var path = require('path');
+    var CONSTANTS = require('../constants/mainConstants.js');
+    var pageHelper = require('../helpers/pageHelper');
+    var moment = require('../public/js/libs/moment/moment');
+    //var ratesRetriever = require('../helpers/ratesRetriever')();
+    var FilterMapper = require('../helpers/filterMapper');
+    var filterMapper = new FilterMapper();
+    var GoodsOutNote = require('./goodsOutNote');
+    var goodsOutNote = new GoodsOutNote(models, event);
+    var GoodsInNotes = require('./goodsInNote');
+    var goodsInNotes = new GoodsInNotes(models, event);
+    var fs = require('fs');
+    var orderCT = 'order';
+    var purchaseOrderCT = 'purchaseOrders';
+    var xlsx = require('node-xlsx');
+    var barCodeSchema = mongoose.Schemas.barCode;
+
+    function updateOnlySelectedFields(req, res, next, id, data) {
+        var dbName = req.session.lastDb;
+        var Order = models.get(dbName, 'Order', OrderSchema);
+        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
+
+        var orderRows;
+        var fileName;
+        var os;
+        var _id;
+        var osType;
+        var path;
+        var dir;
+        var newDirname;
+        var obj;
+        var deletedOrderRows;
+
+        if (data.orderRows) {
+            orderRows = data.orderRows;
+            delete data.orderRows;
+        }
+
+        if (data.deletedProducts) {
+            deletedOrderRows = data.deletedProducts;
+            delete data.deletedProducts;
+        }
+
+        if (data.notes && data.notes.length !== 0) {
+            obj = data.notes[data.notes.length - 1];
+
+            if (!obj._id) {
+                obj._id = mongoose.Types.ObjectId();
+            }
+
+            if (!obj.user) {
+                obj.user = {};
+                obj.user._id = req.session.uId;
+                obj.user.login = req.session.uName;
+            }
+
+            data.notes[data.notes.length - 1] = obj;
+        }
+
+        if (deletedOrderRows) {
+            async.each(deletedOrderRows, function (orderRowId, cb) {
+                OrderRows.findByIdAndRemove(orderRowId, function (err) {
+                    if (err) {
+                        return cb(err);
+                    }
+
+                    cb();
+                });
+            }, function (err) {
+                if (err) {
+                    return next(err);
+                }
+
+                updateOrderRows();
+            });
+        } else {
+            updateOrderRows();
+        }
+
+        function updateOrderRows() {
+            if (data.fileName) {
+
+                fileName = data.fileName;
+                os = require('os');
+                osType = (os.type().split('_')[0]);
+
+                _id = id;
+
+                switch (osType) {
+                    case 'Windows':
+                        newDirname = __dirname.replace('handlers', 'routes');
+
+                        while (newDirname.indexOf('\\') !== -1) {
+                            newDirname = newDirname.replace('\\', '\/');
+                        }
+                        path = newDirname + '\/uploads\/' + _id + '\/' + fileName;
+                        dir = newDirname + '\/uploads\/' + _id;
+                        break;
+                    case 'Linux':
+                        newDirname = __dirname.replace('handlers', 'routes');
+
+                        while (newDirname.indexOf('\\') !== -1) {
+                            newDirname = newDirname.replace('\\', '\/');
+                        }
+                        path = newDirname + '\/uploads\/' + _id + '\/' + fileName;
+                        dir = newDirname + '\/uploads\/' + _id;
+                        break;
+                    //skip default;
+                }
+
+                fs.unlink(path, function (err) {
+                    fs.readdir(dir, function () {
+                        if (data.attachments && data.attachments.length === 0) {
+                            fs.rmdir(dir, function () {
+                            });
+                        }
+                    });
+                });
+
+                delete data.fileName;
+
+                Order.findByIdAndUpdate(id, {$set: data}, {new: true}, function (err, oredr) {
+                    if (err) {
+                        return next(err);
+                    }
+
+                    getById(req, res, next);
+                });
+
+            } else {
+                Order.findByIdAndUpdate(id, {$set: data}, {new: true}, function (err, order) {
+                    var historyOptions;
+
+                    if (err) {
+                        return next(err);
+                    }
+
+                    historyOptions = {
+                        contentType: 'order',
+                        data       : data,
+                        dbName     : dbName,
+                        contentId  : id
+                    };
+
+                    HistoryService.addEntry(historyOptions, function () {
+                        if (orderRows) {
+                            async.each(orderRows, function (orderRow, cb) {
+                                var id = orderRow.id;
+                                var row;
+
+                                if (!id) {
+                                    orderRow.order = order._id;
+                                    row = new OrderRows(orderRow);
+                                    row.save(function (err, elem) {
+                                        if (err) {
+                                            return cb(err);
+                                        }
+                                        cb();
+                                    });
+                                } else {
+                                    delete orderRow.id;
+                                    OrderRows.findByIdAndUpdate(id, orderRow, {new: true}, function (err, doc) {
+                                        if (err) {
+                                            return cb(err);
+                                        }
+                                        cb();
+                                    });
+                                }
+
+                            }, function (err) {
+                                if (err) {
+                                    return next(err);
+                                }
+
+                                event.emit('recalculateStatus', req, order._id, next);
+
+                                getById(req, res, next);
+                            });
+
+                        } else {
+                            getById(req, res, next);
+                        }
+                    });
+                });
+            }
+        }
+    }
+
+    function getHistory(req, order, cb) {
+        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
+
+        var historyOptions = {
+            forNote: true,
+            dbName : req.session.lastDb,
+            id     : order._id
+        };
+
+        HistoryService.getHistoryForTrackedObject(historyOptions, function (err, history) {
+            var notes;
+
+            if (err) {
+                return cb(err);
+            }
+
+            notes = history.map(function (elem) {
+                return {
+                    date   : elem.date,
+                    history: elem,
+                    user   : elem.editedBy
+                };
+            });
+
+            if (!order.notes) {
+                order.notes = [];
+            }
+            order.notes = order.notes.map(function(elem){
+                return {
+                    date : new Date(elem.date),
+                    user : elem.user,
+                    note : elem.note
+                };
+            });
+            order.notes = order.notes.concat(notes);
+            order.notes = _.sortBy(order.notes, 'date');
+            cb(null, order);
+
+        }, true);
+
+    }
+
+    this.create = function (req, res, next) {
+        var db = req.session.lastDb;
+        var Order = models.get(db, 'Order', OrderSchema);
+        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
+        var JobsModel = models.get(req.session.lastDb, 'jobs', JobsSchema);
+        var body = mapObject(req.body);
+        var order;
+        var mid = parseInt(req.headers.mid, 10) || 129;
+        var arrayRows = body.products;
+        var rates;
+        var currency = body.currency;
+        var base;
+        
+        if (mid === 129) {
+            Order = models.get(db, 'purchaseOrders', purchaseOrdersSchema);
+        }
+
+        // currencyHalper(body.orderDate, function (err, oxr) {
+
+        // ratesService.getById({dbName: db, id: body.orderDate}, function (err, ratesObject) {
+            // rates = ratesObject ? ratesObject.rates : {};
+            // base = ratesObject ? ratesObject.base : 'USD';
+
+            body.currency = body.currency || {};
+            // body.currency.rate = ratesRetriever.getRate(rates, base, currency.name);
+            body.currency.rate = 1;
+
+            order = new Order(body);
+
+            if (req.session.uId) {
+                order.createdBy.user = req.session.uId;
+                order.editedBy.user = req.session.uId;
+            }
+
+            order.save(function (err, _order) {
+                var historyOptions;
+                var arr;
+                if (err) {
+                    return next(err);
+                }
+
+                historyOptions = {
+                    contentType: 'order',
+                    data       : _order.toJSON(),
+                    dbName     : db,
+                    contentId  : _order._id
+                };
+                HistoryService.addEntry(historyOptions, function () {
+                });
+
+                arr = arrayRows.map(function (elem) {
+                    elem._id = objectId();
+                    elem.product = objectId(elem.product);
+                    elem.warehouse = objectId(elem.warehouse);
+                    elem.debitAccount = elem.debitAccount ? objectId(elem.debitAccount) : null;
+                    elem.creditAccount = elem.creditAccount ? objectId(elem.creditAccount) : null;
+                    elem.order = _order._id;
+                    elem.quantity = parseInt(elem.quantity, 10);
+
+                    return elem;
+                });
+
+                OrderRows.collection.insertMany(arr, function (err, docs) {
+                    var insertedIds;
+
+                    if (err) {
+                        return next(err);
+                    }
+
+                    insertedIds = docs.insertedIds;
+
+                    OrderRows.aggregate([{
+                        $match: {_id: {$in: insertedIds}}
+                    }, {
+                        $lookup: {
+                            from        : 'Products',
+                            localField  : 'product',
+                            foreignField: '_id',
+                            as          : 'product'
+                        }
+                    }, {
+                        $project: {
+                            product: {$arrayElemAt: ['$product', 0]}
+                        }
+                    }, {
+                        $group: {
+                            _id : null,
+                            jobs: {$addToSet: '$product.job'}
+                        }
+                    }], function (err, result) {
+                        var jobIds;
+                        var body;
+
+                        if (err) {
+                            return next(err);
+                        }
+
+                        body = {
+                            order: _order._id,
+                            type : 'Ordered'
+                        };
+
+                        jobIds = result && result.length ? result[0].jobs : [];
+
+                        JobsModel.update({_id: {$in: jobIds}}, {$set: body}, {multi: true}, function (rer, result) {
+                            if (err) {
+                                return next(err);
+                            }
+
+                            res.status(201).send(_order);
+                        });
+                    });
+
+                });
+
+            });
+        // });
+    };
+
+    this.putchModel = function (req, res, next) {
+        var db = req.session.lastDb;
+        var id = req.params.id;
+        var data = mapObject(req.body);
+        var mid = parseInt(req.headers.mid, 10);
+        var waterfallTasks;
+        var getGoodsOutNotes;
+        var updateFields;
+        var removeGoods;
+
+        data.editedBy = {
+            user: req.session.uId,
+            date: new Date().toISOString()
+        };
+        data.currency = data.currency || {};
+
+        if (data.cancel && data.forSales) {
+            getGoodsOutNotes = function (callback) {
+                goodsOutNotesService.getByOrder({dbName: db, order: objectId(id)}, callback);
+            };
+
+            removeGoods = function (ids, callback) {
+                var options = {
+                    ids   : ids,
+                    dbName: db,
+                    req   : req
+                };
+                goodsOutNote.removeByOrder(options, callback);
+            };
+
+            updateFields = function (callback) {
+                callback();
+                updateOnlySelectedFields(req, res, next, id, data);
+            };
+
+            waterfallTasks = [getGoodsOutNotes, removeGoods, updateFields];
+            async.waterfall(waterfallTasks, function () {
+
+            });
+
+            return false;
+        }
+
+        if (data.cancel) {
+            getGoodsOutNotes = function (callback) {
+                goodsInNotesService.getByOrder({dbName: db, order: objectId(id)}, callback);
+            };
+
+            removeGoods = function (ids, callback) {
+                var options = {
+                    ids   : ids,
+                    dbName: db,
+                    req   : req
+                };
+                goodsInNotes.removeByOrder(options, function (err) {
+                    if (err && err.status !== 400) {
+                        return next(err);
+                    } else if (err && err.status === 400) {
+                        res.status(400).send({error: err.message});
+                    }
+
+                    callback();
+                });
+            };
+
+            updateFields = function (callback) {
+                callback();
+                updateOnlySelectedFields(req, res, next, id, data);
+            };
+
+            waterfallTasks = [getGoodsOutNotes, removeGoods, updateFields];
+            async.waterfall(waterfallTasks, function () {
+
+            });
+
+            return false;
+        }
+
+        // if (data.orderDate) {
+        //     ratesService.getById({dbName: db, id: data.orderDate}, function (err, oxr) {
+        //         var currency = data.currency ? data.currency.name : 'USD';
+        //         var rates;
+        //         var base;
+
+        //         oxr = oxr || {};
+        //         rates = oxr.rates || {};
+        //         base = oxr.base || 'USD';
+        //         data.currency.rate = ratesRetriever.getRate(rates, base, currency);
+        //         updateOnlySelectedFields(req, res, next, id, data);
+        //     });
+        // } else {
+        updateOnlySelectedFields(req, res, next, id, data);
+
+        // }
+    };
+
+    this.updateModel = function (req, res, next) {
+        var db = req.session.lastDb;
+        var id = req.params.id;
+        var data = mapObject(req.body);
+        var waterfallTasks;
+        var getGoodsOutNotes;
+        var updateFields;
+        var removeGoods;
+
+        data.editedBy = {
+            user: req.session.uId,
+            date: new Date().toISOString()
+        };
+        data.currency = data.currency || {};
+
+        if (data.cancel && data.forSales) {
+
+            getGoodsOutNotes = function (callback) {
+                goodsOutNotesService.getByOrder({dbName: db, order: objectId(id)}, callback);
+            };
+
+            removeGoods = function (ids, callback) {
+                var options = {
+                    ids   : ids,
+                    dbName: db,
+                    req   : req
+                };
+                goodsOutNote.removeByOrder(options, callback);
+            };
+
+            updateFields = function (callback) {
+                callback();
+                updateOnlySelectedFields(req, res, next, id, data);
+            };
+
+            waterfallTasks = [getGoodsOutNotes, removeGoods, updateFields];
+            async.waterfall(waterfallTasks, function () {
+
+            });
+
+            return false;
+        }
+
+        if (data.orderDate) {
+/**
+            ratesService.getById({dbName: db, id: data.orderDate}, function (err, oxr) {
+                var currency = data.currency ? data.currency.name : 'USD';
+                var rates;
+                var base;
+
+                oxr = oxr || {};
+                rates = oxr.rates;
+                base = oxr.base || 'USD';
+                data.currency.rate = rates[currency][base] || 1;
+
+                updateOnlySelectedFields(req, res, next, id, data);
+            }); **/
+        } else {
+            updateOnlySelectedFields(req, res, next, id, data);
+
+        }
+    };
+
+
+    this.uploadFile = function (req, res, next) {
+        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
+        var headers = req.headers;
+        var addNote = headers.addnote;
+        var id = headers.modelid || 'empty';
+        var contentType = headers.modelname || 'order';
+        var files = req.files && req.files.attachfile ? req.files.attachfile : null;
+        var dir;
+        var err;
+
+        contentType = contentType.toLowerCase();
+        dir = path.join(contentType, id);
+
+        if (!files) {
+            err = new Error(RESPONSES.BAD_REQUEST);
+            err.status = 400;
+
+            return next(err);
+        }
+
+        uploader.postFile(dir, files, {userId: req.session.uName}, function (err, file) {
+            var notes = [];
+            if (err) {
+                return next(err);
+            }
+
+            if (addNote) {
+                notes = file.map(function (elem) {
+                    return {
+                        _id       : mongoose.Types.ObjectId(),
+                        attachment: {
+                            name    : elem.name,
+                            shortPas: elem.shortPas
+                        },
+
+                        user: {
+                            _id  : req.session.uId,
+                            login: req.session.uName
+                        },
+
+                        date: new Date()
+                    };
+                });
+            }
+
+            Order.findByIdAndUpdate(id, {
+                $push: {
+                    attachments: {$each: file},
+                    notes      : {$each: notes}
+                }
+            }, {new: true}, function (err, response) {
+                if (err) {
+                    return next(err);
+                }
+
+                res.status(200).send({success: 'Order updated success', data: response});
+            });
+        });
+    };
+    function getByViewType(req, res, next) {
+        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
+        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
+        var data = req.query;
+        var paginationObject = pageHelper(data);
+        var limit = paginationObject.limit;
+        var skip = paginationObject.skip;
+        var accessRollSearcher;
+        var contentSearcher;
+        var waterfallTasks;
+        var contentType = data.contentType;
+        var sort = {};
+        var filter = data.filter || {};
+        var key;
+        var queryObject = {};
+        var optionsObject = {};
+        var pastDue = filter.pastDue;
+
+        queryObject.$and = [];
+
+        if (filter && typeof filter === 'object') {
+             queryObject.$and.push(filterMapper.mapFilter(filter, {contentType: contentType})); // caseFilter(filter);
+        }
+
+        if (data.sort) {
+            key = Object.keys(data.sort)[0];
+            data.sort[key] = parseInt(data.sort[key], 10);
+            sort = data.sort;
+        } else {
+            sort = {orderDate: -1};
+        }
+
+        if (contentType !== 'order' && contentType !== 'integrationUnlinkedOrders') {
+            Order = models.get(req.session.lastDb, 'purchaseOrders', purchaseOrdersSchema);
+
+            queryObject.$and.push({_type: 'purchaseOrders'});
+        } else {
+            queryObject.$and.push({_type: 'Order', orderType: 'salesOrder'});
+        }
+
+        if (pastDue) {
+            optionsObject.$and.push({expectedDate: {$gt: new Date(filter.date.value[1])}}, {'workflow.status': {$ne: 'Done'}});
+        }
+
+        accessRollSearcher = function (cb) {
+            accessRoll(req, Order, cb);
+        };
+
+        contentSearcher = function (ids, cb) {
+            var newQueryObj = {};
+
+            var salesManagerMatch = {
+                $and: [
+                    {$eq: ['$$projectMember.projectPositionId', objectId(CONSTANTS.SALESMANAGER)]},
+                    {
+                        $or: [{
+                            $and: [{
+                                $eq: ['$$projectMember.startDate', null]
+                            }, {
+                                $eq: ['$$projectMember.endDate', null]
+                            }]
+                        }, {
+                            $and: [{
+                                $lte: ['$$projectMember.startDate', '$orderDate']
+                            }, {
+                                $eq: ['$$projectMember.endDate', null]
+                            }]
+                        }, {
+                            $and: [{
+                                $eq: ['$$projectMember.startDate', null]
+                            }, {
+                                $gte: ['$$projectMember.endDate', '$orderDate']
+                            }]
+                        }, {
+                            $and: [{
+                                $lte: ['$$projectMember.startDate', '$orderDate']
+                            }, {
+                                $gte: ['$$projectMember.endDate', '$orderDate']
+                            }]
+                        }]
+                    }]
+            };
+
+            /*if (queryObject && queryObject.$and && queryObject.$and.length && queryObject.$and[0].name) {
+             queryObject.$and[0] = {
+             name: queryObject.$and[0].name.$in[0]
+             };
+             }*/
+
+            newQueryObj.$and = [];
+            newQueryObj.$and.push(queryObject);
+            newQueryObj.$and.push({_id: {$in: ids}});
+
+            Order.aggregate([{
+                $lookup: {
+                    from        : 'projectMembers',
+                    localField  : 'project',
+                    foreignField: 'projectId',
+                    as          : 'projectMembers'
+                }
+            }, {
+                $lookup: {
+                    from        : 'Payment',
+                    localField  : '_id',
+                    foreignField: 'order',
+                    as          : 'payments'
+                }
+            }, {
+                $lookup: {
+                    from        : 'Customers',
+                    localField  : 'supplier',
+                    foreignField: '_id',
+                    as          : 'supplier'
+                }
+            }, {
+                $lookup: {
+                    from        : 'workflows',
+                    localField  : 'workflow',
+                    foreignField: '_id',
+                    as          : 'workflow'
+                }
+            }, {
+                $lookup: {
+                    from        : 'currency',
+                    localField  : 'currency._id',
+                    foreignField: '_id',
+                    as          : 'currency._id'
+                }
+            }, {
+                $lookup: {
+                    from        : 'Project',
+                    localField  : 'project',
+                    foreignField: '_id',
+                    as          : 'project'
+                }
+            }, {
+                $lookup: {
+                    from        : 'Employees',
+                    localField  : 'salesPerson',
+                    foreignField: '_id',
+                    as          : 'salesPerson'
+                }
+            }, {
+                $lookup: {
+                    from        : 'integrations',
+                    localField  : 'channel',
+                    foreignField: '_id',
+                    as          : 'channel'
+                }
+            }, {
+                $lookup: {
+                    from        : 'orderRows',
+                    localField  : '_id',
+                    foreignField: 'order',
+                    as          : 'products'
+                }
+            }, {
+                $project: {
+                    workflow       : {$arrayElemAt: ['$workflow', 0]},
+                    supplier       : {$arrayElemAt: ['$supplier', 0]},
+                    'currency._id' : {$arrayElemAt: ['$currency._id', 0]},
+                    payments       : 1,
+                    'currency.rate': 1,
+                    salesManagers  : {
+                        $filter: {
+                            input: '$projectMembers',
+                            as   : 'projectMember',
+                            cond : salesManagerMatch
+                        }
+                    },
+
+                    channel    : {$arrayElemAt: ['$channel', 0]},
+                    salesPerson: {$arrayElemAt: ['$salesPerson', 0]},
+                    orderRows  : 1,
+                    paymentInfo: 1,
+                    orderDate  : 1,
+                    name       : 1,
+                    status     : 1,
+                    _type      : 1,
+                    forSales   : 1,
+                    products   : 1,
+                    orderType  : 1,
+                    project    : {$arrayElemAt: ['$project', 0]}
+                }
+            }, 
+
+            {
+                $project: {
+                    salesManager: {$arrayElemAt: ['$salesManagers', 0]},
+                    supplier    : {
+                        _id : '$supplier._id',
+                        name: {$concat: ['$supplier.name.first', ' ', '$supplier.name.last']}
+                    },
+
+                    workflow: {
+                        _id   : '$workflow._id',
+                        status: '$workflow.status',
+                        name  : '$workflow.name'
+                    },
+
+                    channel: {
+                        _id : '$channel._id',
+                        name: '$channel.channelName',
+                        type: '$channel.type'
+                    },
+
+                    currency       : 1,
+                    paymentInfo    : 1,
+                    orderDate      : 1,
+                    salesPerson    : 1,
+                    name           : 1,
+                    isOrder        : 1,
+                    proformaCounter: 1,
+                    payments       : 1,
+                    status         : 1,
+                    _type          : 1,
+                    forSales       : 1,
+                    products       : 1,
+                    orderType      : 1,
+                    project        : 1
+                }
+            }, {
+                $lookup: {
+                    from        : 'Employees',
+                    localField  : 'salesManager.employeeId',
+                    foreignField: '_id',
+                    as          : 'salesManager'
+                }
+            }, {
+                $project: {
+                    salesPerson: {$ifNull: ['$salesPerson', {$arrayElemAt: ['$salesManager', 0]}]},
+                    workflow   : 1,
+                    supplier   : 1,
+                    currency   : 1,
+                    paymentInfo: 1,
+                    orderDate  : 1,
+                    payments   : 1,
+                    name       : 1,
+                    status     : 1,
+                    _type      : 1,
+                    forSales   : 1,
+                    channel    : 1,
+                    products   : 1,
+                    orderType  : 1,
+                    project    : 1
+                }
+            }, {
+                $project: {
+                    salesPerson: {
+                        _id : '$salesPerson._id',
+                        name: {$concat: ['$salesPerson.name.first', ' ', '$salesPerson.name.last']}
+                    },
+                    workflow   : 1,
+                    supplier   : 1,
+                    currency   : 1,
+                    paymentInfo: 1,
+                    orderDate  : 1,
+                    name       : 1,
+                    status     : 1,
+                    _type      : 1,
+                    forSales   : 1,
+                    channel    : 1,
+                    payments   : 1,
+                    products   : 1,
+                    orderType  : 1,
+                    project    : 1,
+                    removable  : {
+                        $cond: {
+                            if  : {$and: [{$ne: ['$workflow.status', 'Done']}, {$ne: ['$status.fulfillStatus', 'ALL']}]},
+                            then: true,
+                            else: false
+                        }
+                    }
+                }
+            }, {
+                $match: newQueryObj
+            }, {
+                $group: {
+                    _id  : null,
+                    total: {$sum: 1},
+                    root : {$push: '$$ROOT'}
+                }
+            }, {
+                $unwind: '$root'
+            }, {
+                $project: {
+                    _id        : '$root._id',
+                    salesPerson: '$root.salesPerson',
+                    workflow   : '$root.workflow',
+                    supplier   : '$root.supplier',
+                    currency   : '$root.currency',
+                    paymentInfo: '$root.paymentInfo',
+                    orderDate  : '$root.orderDate',
+                    name       : '$root.name',
+                    status     : '$root.status',
+                    removable  : '$root.removable',
+                    channel    : '$root.channel',
+                    payments   : '$root.payments',
+                    products   : '$root.products',
+                    orderType  : '$root.orderType',
+                    project    : '$root.project',
+                    total      : 1
+                }
+            }, {
+                $unwind: {
+                    path                      : '$payments',
+                    preserveNullAndEmptyArrays: true
+                }
+            }, {
+                $project: {
+                    salesPerson          : 1,
+                    workflow             : 1,
+                    supplier             : 1,
+                    currency             : 1,
+                    paymentInfo          : 1,
+                    orderDate            : 1,
+                    name                 : 1,
+                    status               : 1,
+                    removable            : 1,
+                    channel              : 1,
+                    products             : 1,
+                    orderType            : 1,
+                    project              : 1,
+                    total                : 1,
+                    'payments.currency'  : 1,
+                    'payments.paidAmount': {$cond: [{$eq: ['$payments.refund', true]}, {$multiply: ['$payments.paidAmount', -1]}, '$payments.paidAmount']}
+                }
+            }, {
+                $group: {
+                    _id         : '$_id',
+                    salesPerson : {$first: '$salesPerson'},
+                    workflow    : {$first: '$workflow'},
+                    supplier    : {$first: '$supplier'},
+                    currency    : {$first: '$currency'},
+                    paymentInfo : {$first: '$paymentInfo'},
+                    orderDate   : {$first: '$orderDate'},
+                    name        : {$first: '$name'},
+                    status      : {$first: '$status'},
+                    removable   : {$first: '$removable'},
+                    channel     : {$first: '$channel'},
+                    products    : {$first: '$products'},
+                    orderType   : {$first: '$orderType'},
+                    project     : {$first: '$project'},
+                    paymentsPaid: {$sum: {$divide: ['$payments.paidAmount', '$payments.currency.rate']}},
+                    total       : {$first: '$total'}
+                }
+            }, {
+                $sort: sort
+            }, {
+                $skip: skip
+            }, {
+                $limit: limit
+            }], cb);
+        };
+
+        waterfallTasks = [accessRollSearcher, contentSearcher];
+
+        async.waterfall(waterfallTasks, function (err, result) {
+            var count;
+            var firstElement;
+            var response = {};
+
+            if (err) {
+                return next(err);
+            }
+
+            firstElement = result[0];
+            count = firstElement && firstElement.total ? firstElement.total : 0;
+            response.total = count;
+            response.count = result.length;
+            response.data = result;
+            res.status(200).send(response);
+        });
+    }
+
+    function getAvailableForRows(req, docs, forSales, cb) {
+        var Availability = forSales ? models.get(req.session.lastDb,'barCode',barCodeSchema) : models.get(req.session.lastDb, 'productsAvailability', AvailabilitySchema);
+        var GoodsOutNote = models.get(req.session.lastDb, 'GoodsOutNote', GoodsOutSchema);
+        var GoodsInNote = models.get(req.session.lastDb, 'GoodsInNote', GoodsInSchema);
+        var populateDocs = [];
+        var allGoodsNotes = [];
+
+        if (docs && docs.length) {
+            async.each(docs, function (elem, eachCb) {
+                var product;
+                var warehouseId;
+
+                var parallelTasks;
+
+                elem = elem.toJSON();
+
+                product = elem.product ? elem.product._id : null;
+                warehouseId = elem.warehouse ? objectId(elem.warehouse._id) : null;
+
+                function getAvailabilities(parallelCb) {
+
+                    if(forSales){
+                        Availability.aggregate([{
+                            $match: {
+                                orderRowId : elem._id
+                            }
+                        },{
+                            $lookup: {
+                                from        : 'workCentres',
+                                localField  : 'curWorkCentre',
+                                foreignField: '_id',
+                                as          : 'curWorkCentre'
+                            }
+                        },{
+                            $project: {
+                                curWorkCentre : {$arrayElemAt: ['$curWorkCentre', 0]}
+                            }
+                        }], function (err, availability) {
+                            if (err) {
+                                return parallelCb(err);
+                            }
+                            var result = [];
+                            result[0] = {
+                                allocated : 0,
+                                onHand : 0,
+                                inStock : 0,
+                                onOrder : 0
+                            };
+
+                            if(availability.length){
+                                result[0].inStock = availability.length;
+                                for(var i=0; i<availability.length; i++){
+                                    if(availability[i].curWorkCentre.code === "07"){
+                                        result[0].onHand++;
+                                    }
+                                }
+                            }
+
+                            parallelCb(null, result);
+                        });
+                    }else{
+                        Availability.aggregate([{
+                            $match: {
+                                product  : objectId(product),
+                                warehouse: warehouseId
+                            }
+                        }, {
+                            $project: {
+                                product      : 1,
+                                warehouse    : 1,
+                                onHand       : 1,
+                                filterRows   : {
+                                    $filter: {
+                                        input: '$orderRows',
+                                        as   : 'elem',
+                                        cond : {$eq: ['$$elem.orderRowId', objectId(elem._id)]}
+                                    }
+                                },
+                                orderRows    : 1,
+                                goodsOutNotes: 1
+                            }
+                        }, {
+                            $project: {
+                                product  : 1,
+                                warehouse: 1,
+                                onHand   : 1,
+                                allocated: {
+                                    $sum: '$filterRows.quantity'
+                                },
+
+                                allocatedAll: {
+                                    $sum: '$orderRows.quantity'
+                                },
+
+                                fulfillAll: {
+                                    $sum: '$goodsOutNotes.quantity'
+                                }
+                            }
+                        }, {
+                            $project: {
+                                product  : 1,
+                                warehouse: 1,
+                                onHand   : 1,
+                                allocated: 1,
+                                inStock  : {
+                                    $add: ['$onHand', '$allocatedAll', '$fulfillAll']
+                                }
+                            }
+                        }, {
+                            $group: {
+                                _id      : '$warehouse',
+                                allocated: {
+                                    $sum: '$allocated'
+                                },
+
+                                onHand: {
+                                    $sum: '$onHand'
+                                },
+
+                                inStock: {
+                                    $sum: '$inStock'
+                                },
+
+                                onOrder: {
+                                    $sum: '$onOrder'
+                                }
+                            }
+                        }], function (err, availability) {
+                            if (err) {
+                                return parallelCb(err);
+                            }
+                            parallelCb(null, availability);
+                        });
+                    }
+                }
+
+                function getNotes(parallelCb) {
+                    var Model = forSales ? GoodsOutNote : GoodsInNote;
+
+                    Model.aggregate([{
+                        $match: {
+                            'orderRows.orderRowId': elem._id,
+                            _type                 : forSales ? 'GoodsOutNote' : 'GoodsInNote',
+                            archived              : {$ne: true}
+                        }
+                    }, {
+                        $lookup: {
+                            from        : 'warehouse',
+                            localField  : 'warehouse',
+                            foreignField: '_id',
+                            as          : 'warehouse'
+                        }
+                    }, {
+                        $lookup: {
+                            from        : 'productsAvailability',
+                            localField  : '_id',
+                            foreignField: 'goodsInNote',
+                            as          : 'goodsInNote'
+                        }
+                    }, {
+                        $lookup: {
+                            from        : 'Users',
+                            localField  : 'status.printedById',
+                            foreignField: '_id',
+                            as          : 'status.printedById'
+                        }
+                    }, {
+                        $lookup: {
+                            from        : 'Users',
+                            localField  : 'status.pickedById',
+                            foreignField: '_id',
+                            as          : 'status.pickedById'
+                        }
+                    }, {
+                        $lookup: {
+                            from        : 'Users',
+                            localField  : 'status.packedById',
+                            foreignField: '_id',
+                            as          : 'status.packedById'
+                        }
+                    }, {
+                        $lookup: {
+                            from        : 'Users',
+                            localField  : 'status.shippedById',
+                            foreignField: '_id',
+                            as          : 'status.shippedById'
+                        }
+                    }, {
+                        $lookup: {
+                            from        : 'Order',
+                            localField  : 'order',
+                            foreignField: '_id',
+                            as          : 'order'
+                        }
+                    }, {
+                        $project: {
+                            name    : '$name',
+                            orderRow: {
+                                $filter: {
+                                    input: '$orderRows',
+                                    as   : 'elem',
+                                    cond : {$eq: ['$$elem.orderRowId', objectId(elem._id)]}
+                                }
+                            },
+
+                            goodsInNote         : {$arrayElemAt: ['$goodsInNote', 0]},
+                            warehouse           : {$arrayElemAt: ['$warehouse', 0]},
+                            order               : {$arrayElemAt: ['$order', 0]},
+                            'status.printedById': {$arrayElemAt: ['$status.printedById', 0]},
+                            'status.pickedById' : {$arrayElemAt: ['$status.pickedById', 0]},
+                            'status.packedById' : {$arrayElemAt: ['$status.packedById', 0]},
+                            'status.shippedById': {$arrayElemAt: ['$status.shippedById', 0]},
+                            'status.printedOn'  : 1,
+                            'status.pickedOn'   : 1,
+                            'status.packedOn'   : 1,
+                            'status.shippedOn'  : 1,
+                            'status.receivedOn' : 1,
+                            'status.shipped'    : 1,
+                            'status.picked'     : 1,
+                            'status.packed'     : 1,
+                            'status.printed'    : 1
+                        }
+                    }, {
+                        $project: {
+                            name                : '$name',
+                            orderRow            : {$arrayElemAt: ['$orderRow', 0]},
+                            status              : 1,
+                            warehouse           : 1,
+                            'goodsInNote._id'   : 1,
+                            'goodsInNote.onHand': 1,
+                            'order.name'        : 1
+                        }
+                    }, {
+                        $project: {
+                            name        : '$name',
+                            orderRow    : '$orderRow.orderRowId',
+                            quantity    : '$orderRow.quantity',
+                            status      : 1,
+                            warehouse   : 1,
+                            goodsInNote : 1,
+                            'order.name': 1
+                        }
+                    }], function (err, docs) {
+                        if (err) {
+                            return parallelCb(err);
+                        }
+                        if (docs && docs.length) {
+                            docs = docs.map(function (el) {
+                                el._id = el._id.toJSON();
+                                return el;
+                            });
+                        }
+
+                        parallelCb(null, docs);
+                    });
+                }
+
+                parallelTasks = [getNotes, getAvailabilities];
+
+                async.parallel(parallelTasks, function (err, response) {
+                    var availability;
+                    var goodsNotes;
+
+                    if (err) {
+                        return eachCb(err);
+                    }
+
+                    availability = response[1];
+                    goodsNotes = response[0];
+                    allGoodsNotes = allGoodsNotes.concat(goodsNotes);
+                    availability = availability && availability.length ? availability[0] : null;
+
+                    if (availability) {
+                        elem.inStock = availability.inStock;
+                        elem.onHand = availability.onHand;
+                        elem.allocated = availability.allocated;
+                    }
+                    elem.goodsNotes = goodsNotes;
+                    elem.fulfilled = 0;
+
+                    if (goodsNotes && goodsNotes.length) {
+                        goodsNotes.forEach(function (el) {
+                            elem.fulfilled += el.quantity;
+                        });
+                    }
+
+                    populateDocs.push(elem);
+                    eachCb();
+                });
+
+            }, function (err) {
+                if (err) {
+                    return cb(err);
+                }
+
+                allGoodsNotes = _.uniq(allGoodsNotes, '_id');
+
+                cb(null, populateDocs, allGoodsNotes);
+
+            });
+        } else {
+            cb();
+        }
+
+    }
+
+    function getById(req, res, next) {
+        var id = req.query.id || req.params.id;
+        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
+        var Prepayments = models.get(req.session.lastDb, 'prepayment', PrepaymentSchema);
+        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
+        var Invoice = models.get(req.session.lastDb, 'Invoices', InvoiceSchema);
+        var BarCode = models.get(req.session.lastDb,'barCode',barCodeSchema);
+        var departmentSearcher;
+        var contentIdsSearcher;
+        var orderRowsSearcher;
+        var contentSearcher;
+        var prepaymentsSearcher;
+        var invoiceSearcher;
+        var stockReturnsSearcher;
+        var waterfallTasks;
+
+        if (id.length < 24) {
+            return res.status(400).send();
+        }
+
+        /* var contentType = req.query.contentType;
+         var isOrder = ((contentType === 'Orders') || (contentType === 'salesOrders'));*/
+
+        departmentSearcher = function (waterfallCallback) {
+            models.get(req.session.lastDb, 'Department', DepartmentSchema).aggregate(
+                {
+                    $match: {
+                        users: objectId(req.session.uId)
+                    }
+                }, {
+                    $project: {
+                        _id: 1
+                    }
+                },
+
+                waterfallCallback);
+        };
+
+        contentIdsSearcher = function (deps, waterfallCallback) {
+            var everyOne = rewriteAccess.everyOne();
+            var owner = rewriteAccess.owner(req.session.uId);
+            var group = rewriteAccess.group(req.session.uId, deps);
+            var whoCanRw = [everyOne, owner, group];
+            var matchQuery = {
+                $or: whoCanRw
+            };
+
+            var Model = models.get(req.session.lastDb, 'Order', OrderSchema);
+
+            Model.aggregate({
+                $match: matchQuery
+            }, {
+                $project: {
+                    _id: 1
+                }
+            }, waterfallCallback);
+        };
+
+        contentSearcher = function (quotationsIds, waterfallCallback) {
+            var query;
+
+            query = Order.findById(id);
+
+            query
+                .populate('supplier', '_id name fullName address')
+                .populate('destination')
+                // .populate('currency._id')
+                .populate('incoterm')
+                .populate('priceList', 'name')
+                .populate('costList', 'name')
+                .populate('warehouse', 'name')
+                .populate('salesPerson', 'name')
+                .populate('invoiceControl')
+                .populate('paymentTerm')
+                .populate('paymentMethod', '_id name account bank address swiftCode owner')
+                .populate('editedBy.user', '_id login')
+                .populate('deliverTo', '_id, name')
+                .populate('project', '_id name')
+                .populate('shippingMethod', '_id name')
+                .populate('workflow', '_id name status')
+                .populate('contract', '_id number');
+            query.exec(waterfallCallback);
+        };
+
+        orderRowsSearcher = function (order, waterfallCallback) {
+
+            OrderRows.find({order: order._id})
+                .populate('product', 'cost name sku info')
+                .populate('debitAccount', 'name')
+                .populate('creditAccount', 'name')
+                .populate('taxes.taxCode', 'fullName rate')
+                .populate('warehouse', 'name')
+                .sort('products')
+                .exec(function (err, docs) {
+                    if (err) {
+                        return waterfallCallback(err);
+                    }
+
+                    order = order.toJSON();
+                    getAvailableForRows(req, docs, order.forSales, function (err, docs, goodsNotes) {
+                        if (err) {
+                            return waterfallCallback(err);
+                        }
+
+                        order.products = docs;
+                        order.account = docs && docs.length ? docs[0].debitAccount : {};
+
+                        if (!order.forSales) {
+                            order.account = docs && docs.length ? docs[0].creditAccount : {};
+                        }
+
+                        order.goodsNotes = goodsNotes;
+
+                        waterfallCallback(null, order);
+                    });
+                });
+        };
+
+        prepaymentsSearcher = function (order, waterfallCallback) {
+            Prepayments.aggregate([{
+                $match: {
+                    order: objectId(id)
+                }
+            }, {
+                $project: {
+                    paidAmount: 1,
+                    currency  : 1,
+                    date      : 1,
+                    name      : 1,
+                    refund    : 1
+                }
+            }, {
+                $project: {
+                    paidAmount: {$divide: ['$paidAmount', '$currency.rate']},
+                    date      : 1,
+                    name      : 1,
+                    refund    : 1
+                }
+            }, {
+                $project: {
+                    paidAmount: {$cond: [{$eq: ['$refund', true]}, {$multiply: ['$paidAmount', -1]}, '$paidAmount']},
+                    date      : 1,
+                    name      : 1,
+                    refund    : 1
+                }
+            }, {
+                $group: {
+                    _id  : null,
+                    sum  : {$sum: '$paidAmount'},
+                    names: {$push: '$name'},
+                    date : {$min: '$date'}
+                }
+            }], function (err, result) {
+                if (err) {
+                    return waterfallCallback(err);
+                }
+
+                order.prepayment = result && result.length ? result[0] : {};
+
+                waterfallCallback(null, order);
+            });
+        };
+
+        invoiceSearcher = function (order, waterfallCallback) {
+            Invoice.aggregate([{
+                $match: {
+                    sourceDocument: objectId(id)
+                }
+            }, {
+                $project: {
+                    name: 1
+                }
+            }], function (err, result) {
+                if (err) {
+                    return waterfallCallback(err);
+                }
+
+                order.invoice = result && result.length ? result[0] : {};
+                waterfallCallback(null, order);
+            });
+        };
+
+        stockReturnsSearcher = function (order, waterfallCallback) {
+            StockReturnsService.findForOrder({
+                query : {order: objectId(order._id)},
+                dbName: req.session.lastDb
+            }, function (err, docs) {
+                if (err) {
+                    return waterfallCallback(err);
+                }
+
+                order.stockReturns = docs || [];
+
+                waterfallCallback(null, order);
+            })
+        };
+
+        waterfallTasks = [departmentSearcher, contentIdsSearcher, contentSearcher, orderRowsSearcher, prepaymentsSearcher, invoiceSearcher, stockReturnsSearcher];
+
+        async.waterfall(waterfallTasks, function (err, result) {
+
+            if (err) {
+                return next(err);
+            }
+            getHistory(req, result, function (err, order) {
+                if (err) {
+                    return next(err);
+                }
+                res.status(200).send(order);
+            });
+        });
+    }
+
+
+
+
+
+    this.getById = function (req, res, next) {
+        getById(req, res, next);
+    };
+
+    this.getByViewType = function (req, res, next) {
+        var query = req.query;
+        var viewType = query.viewType;
+        var id = req.query.id;
+
+        if (id && id.length >= 24) {
+            getById(req, res, next);
+            return false;
+        }
+
+        switch (viewType) {
+            case 'form':
+                getById(req, res, next);
+                break;
+            default:
+                getByViewType(req, res, next);
+                break;
+        }
+    };
+
+    this.remove = function (req, res, next) {
+        var id = req.params.id;
+        var project;
+        var type = 'Not Ordered';
+        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
+        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
+        var GoodsOutNote = models.get(req.session.lastDb, 'GoodsOutNote', GoodsOutSchema);
+        var JobsModel = models.get(req.session.lastDb, 'jobs', JobsSchema);
+        var wTrack = models.get(req.session.lastDb, 'wTrack', wTrackSchema);
+        var Availability = models.get(req.session.lastDb, 'productsAvailability', AvailabilitySchema);
+        var editedBy = {
+            user: req.session.uId,
+            date: new Date()
+        };
+
+        Order.findByIdAndRemove(id, function (err, order) {
+            if (err) {
+                return next(err);
+            }
+
+            OrderRows.find({order: id}).populate('product', 'job').exec(function (err, docs) {
+                    if (err) {
+                        return next(err);
+                    }
+
+                    GoodsOutNote.remove({order: order._id}, function () {
+                    });
+
+                    async.each(docs, function (orderRow, cb) {
+                        if (!orderRow.product.job) {
+                            return cb();
+                        }
+
+                        Availability.update({product: orderRow.product._id}, {$set: {onHand: 1}}, function (err) {
+                            if (err) {
+                                return cb(err);
+                            }
+
+                            JobsModel.findByIdAndUpdate(orderRow.product.job, {
+                                type    : type,
+                                order   : null,
+                                editedBy: editedBy
+                            }, {new: true}, function (err, result) {
+                                var wTracks;
+
+                                if (err) {
+                                    return cb(err);
+                                }
+
+                                project = result ? result.get('project') : null;
+                                wTracks = result ? result.wTracks : [];
+
+                                async.each(wTracks, function (wTr, callback) {
+                                    wTrack.findByIdAndUpdate(wTr, {$set: {revenue: 0}}, callback);
+                                }, function () {
+                                    cb();
+                                });
+                            });
+                        });
+
+                    }, function () {
+                        OrderRows.remove({order: id}, function (err) {
+                            if (err) {
+                                return next(err);
+                            }
+                        });
+
+                        res.status(200).send({success: order});
+                    });
+                }
+            );
+        });
+    };
+
+    this.getForProject = function (req, res, next) {
+        var db = req.session.lastDb;
+        var projectId = req.params.id;
+        var Order = models.get(db, 'Order', OrderSchema);
+        var query = req.query;
+        var queryObject = {};
+        var optionsObject = {};
+        var sort = {};
+        var paginationObject = pageHelper(query);
+        var limit = paginationObject.limit;
+        var skip = paginationObject.skip;
+        var key;
+
+        var departmentSearcher;
+        var contentIdsSearcher;
+        var contentSearcher;
+        var waterfallTasks;
+
+        projectId = projectId ? objectId(projectId) : null;
+
+        if (projectId) {
+            queryObject.project = projectId;
+        }
+
+        if (req.query.sort) {
+            key = Object.keys(req.query.sort)[0];
+            req.query.sort[key] = parseInt(req.query.sort[key], 10);
+            sort = req.query.sort;
+        } else {
+            sort = {workflow: -1};
+        }
+
+        departmentSearcher = function (waterfallCallback) {
+            models.get(req.session.lastDb, 'Department', DepartmentSchema).aggregate(
+                {
+                    $match: {
+                        users: objectId(req.session.uId)
+                    }
+                }, {
+                    $project: {
+                        _id: 1
+                    }
+                },
+                waterfallCallback);
+        };
+
+        contentIdsSearcher = function (deps, waterfallCallback) {
+            var everyOne = rewriteAccess.everyOne();
+            var owner = rewriteAccess.owner(req.session.uId);
+            var group = rewriteAccess.group(req.session.uId, deps);
+            var whoCanRw = [everyOne, owner, group];
+            var matchQuery = {
+                $and: [
+                    queryObject,
+                    {
+                        $or: whoCanRw
+                    }
+                ]
+            };
+
+            Order.aggregate([{
+                $match: matchQuery
+            }, {
+                $project: {
+                    _id: 1
+                }
+            }], waterfallCallback);
+        };
+
+        contentSearcher = function (ids, waterfallCallback) {
+            var salesManagerMatch = {
+                $and: [
+                    {$eq: ['$$projectMember.projectPositionId', objectId(CONSTANTS.SALESMANAGER)]},
+                    {
+                        $or: [{
+                            $and: [{
+                                $eq: ['$$projectMember.startDate', null]
+                            }, {
+                                $eq: ['$$projectMember.endDate', null]
+                            }]
+                        }, {
+                            $and: [{
+                                $lte: ['$$projectMember.startDate', '$quotation.orderDate']
+                            }, {
+                                $eq: ['$$projectMember.endDate', null]
+                            }]
+                        }, {
+                            $and: [{
+                                $eq: ['$$projectMember.startDate', null]
+                            }, {
+                                $gte: ['$$projectMember.endDate', '$quotation.orderDate']
+                            }]
+                        }, {
+                            $and: [{
+                                $lte: ['$$projectMember.startDate', '$quotation.orderDate']
+                            }, {
+                                $gte: ['$$projectMember.endDate', '$quotation.orderDate']
+                            }]
+                        }]
+                    }]
+            };
+
+            optionsObject.$and = [];
+
+            optionsObject.$and.push({_id: {$in: _.pluck(ids, '_id')}});
+
+            Order
+                .aggregate([{
+                    $match: queryObject
+                }, {
+                    $lookup: {
+                        from        : 'projectMembers',
+                        localField  : 'project',
+                        foreignField: 'projectId',
+                        as          : 'projectMembers'
+                    }
+                }, {
+                    $lookup: {
+                        from        : 'Customers',
+                        localField  : 'supplier',
+                        foreignField: '_id',
+                        as          : 'supplier'
+                    }
+                }, {
+                    $lookup: {
+                        from        : 'workflows',
+                        localField  : 'workflow',
+                        foreignField: '_id',
+                        as          : 'workflow'
+                    }
+                }, {
+                    $lookup: {
+                        from        : 'currency',
+                        localField  : 'currency._id',
+                        foreignField: '_id',
+                        as          : 'currency._id'
+                    }
+                }, {
+                    $project: {
+                        workflow       : {$arrayElemAt: ['$workflow', 0]},
+                        supplier       : {$arrayElemAt: ['$supplier', 0]},
+                        'currency._id' : {$arrayElemAt: ['$currency._id', 0]},
+                        'currency.rate': 1,
+
+                        salesManagers: {
+                            $filter: {
+                                input: '$projectMembers',
+                                as   : 'projectMember',
+                                cond : salesManagerMatch
+                            }
+                        },
+
+                        paymentInfo: 1,
+                        orderDate  : 1,
+                        name       : 1,
+                        status     : 1
+                    }
+                }, {
+                    $project: {
+                        salesManagers: {$arrayElemAt: ['$salesManagers', 0]},
+
+                        supplier: {
+                            _id : '$supplier._id',
+                            name: '$supplier.name'
+                        },
+
+                        workflow: {
+                            status: '$workflow.status',
+                            name  : '$workflow.name'
+                        },
+
+                        currency   : 1,
+                        paymentInfo: 1,
+                        orderDate  : 1,
+                        status     : 1,
+                        name       : 1
+                    }
+                }, {
+                    $lookup: {
+                        from        : 'Employees',
+                        localField  : 'salesManagers.employeeId',
+                        foreignField: '_id',
+                        as          : 'salesManagers'
+                    }
+                }, {
+                    $project: {
+                        salesPerson: {$arrayElemAt: ['$salesManagers', 0]},
+                        workflow   : 1,
+                        supplier   : 1,
+                        currency   : 1,
+                        paymentInfo: 1,
+                        orderDate  : 1,
+                        name       : 1,
+                        status     : 1
+                    }
+                }, {
+                    $project: {
+                        salesPerson: {
+                            _id : '$salesPerson._id',
+                            name: '$salesPerson.name'
+                        },
+
+                        workflow   : 1,
+                        supplier   : 1,
+                        currency   : 1,
+                        paymentInfo: 1,
+                        orderDate  : 1,
+                        name       : 1,
+                        status     : 1,
+                        removable  : {
+                            $cond: {
+                                if  : {$and: [{$ne: ['$workflow.status', 'Done']}, {$ne: ['$status.fulfillStatus', 'ALL']}]},
+                                then: true,
+                                else: false
+                            }
+                        }
+                    }
+                }, {
+                    $match: optionsObject
+                }, {
+                    $group: {
+                        _id  : null,
+                        total: {$sum: 1},
+                        root : {$push: '$$ROOT'}
+                    }
+                }, {
+                    $unwind: '$root'
+                }, {
+                    $project: {
+                        _id        : '$root._id',
+                        salesPerson: '$root.salesPerson',
+                        workflow   : '$root.workflow',
+                        supplier   : '$root.supplier',
+                        currency   : '$root.currency',
+                        paymentInfo: '$root.paymentInfo',
+                        orderDate  : '$root.orderDate',
+                        status     : '$root.status',
+                        name       : '$root.name',
+                        removable  : '$root.removable',
+                        total      : 1
+                    }
+                }, {
+                    $sort: sort
+                }, {
+                    $skip: skip
+                }, {
+                    $limit: limit
+                }], function (err, result) {
+                    waterfallCallback(null, result);
+                });
+        };
+
+        waterfallTasks = [departmentSearcher, contentIdsSearcher, contentSearcher];
+
+        async.waterfall(waterfallTasks, function (err, result) {
+            var count;
+            var firstElement;
+            var response = {};
+
+            if (err) {
+                return next(err);
+            }
+
+            firstElement = result[0];
+            count = firstElement && firstElement.total ? firstElement.total : 0;
+            response.total = count;
+            response.data = result;
+
+            res.status(200).send(response);
+        });
+    };
+
+    this.getFilterValues = function (req, res, next) {
+        var Quotation = models.get(req.session.lastDb, 'Quotation', QuotationSchema);
+
+        async.waterfall([
+            function (cb) {
+                Quotation
+                    .aggregate([
+                        {
+                            $group: {
+                                _id         : null,
+                                'Order date': {
+                                    $addToSet: '$orderDate'
+                                }
+                            }
+                        }
+                    ], function (err, quot) {
+                        if (err) {
+                            return cb(err);
+
+                        }
+
+                        cb(null, quot);
+                    });
+            },
+            function (quot, cb) {
+                cb(null, quot);
+            }
+
+        ], function (err, result) {
+            if (err) {
+                return next(err);
+            }
+            res.status(200).send(result);
+
+        });
+    };
+
+    this.bulkRemove = function (req, res, next) {
+        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
+        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
+        var body = req.body || {ids: []};
+        var ids = body.ids;
+
+        // todo some validation on ids array, like check for objectId
+
+        Order.remove({_id: {$in: ids}}, function (err, removed) {
+            if (err) {
+                return next(err);
+            }
+
+            OrderRows.remove({order: {$in: ids}}, function (err, docs) {
+                if (err) {
+                    return next(err);
+                }
+                res.status(200).send(removed);
+            });
+
+        });
+    };
+
+    this.getByWorkflows = function (req, res, next) {
+        var dbIndex = req.session.lastDb;
+        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
+        var data = req.query;
+        var forSales = data.forSales === 'true';
+        var filter = data.filter || {};
+        var match = filterMapper.mapFilter(filter, {contentType: orderCT});
+
+        if (!forSales) {
+            Order = models.get(dbIndex, purchaseOrderCT, purchaseOrdersSchema);
+            match = filterMapper.mapFilter(filter, {contentType: purchaseOrderCT});
+        }
+
+        Order.aggregate([{
+            $match: match
+        }, {
+            $match: {
+                forSales: forSales
+            }
+        }, {
+            $lookup: {
+                from        : 'workflows',
+                localField  : 'workflow',
+                foreignField: '_id',
+                as          : 'workflow'
+            }
+        }, {
+            $project: {
+                sum     : {$divide: ['$paymentInfo.total', '$currency.rate']},
+                workflow: {$arrayElemAt: ['$workflow', 0]},
+                status  : 1
+            }
+        }, {
+            $group: {
+                _id   : '$workflow._id',
+                total : {$sum: '$sum'},
+                status: {$addToSet: '$status'},
+                name  : {$first: '$workflow.name'},
+                count : {$sum: 1}
+            }
+        }, {
+            $project: {
+                total : {$divide: ['$total', 100]},
+                name  : 1,
+                count : 1,
+                status: 1
+            }
+        }], function (err, result) {
+            if (err) {
+                return next(err);
+            }
+
+            res.status(200).send(result);
+        });
+
+    };
+
+    this.getBySupplier = function(req, res, next) {
+        var ids = req.query.ids || req.params.ids;
+        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
+        var Prepayments = models.get(req.session.lastDb, 'prepayment', PrepaymentSchema);
+        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
+        var Invoice = models.get(req.session.lastDb, 'Invoices', InvoiceSchema);
+        var Currency = models.get(req.session.lastDb, 'currency', CurrencySchema);
+        var arr = [];
+        
+        async.map(ids, function(id, cb) {
+
+            var departmentSearcher;
+            var contentIdsSearcher;
+            var orderRowsSearcher;
+            var contentSearcher;
+            var prepaymentsSearcher;
+            var invoiceSearcher;
+            var stockReturnsSearcher;
+            var waterfallTasks;
+
+            departmentSearcher = function (waterfallCallback) {
+                models.get(req.session.lastDb, 'Department', DepartmentSchema).aggregate(
+                    {
+                        $match: {
+                            users: objectId(req.session.uId)
+                        }
+                    }, {
+                        $project: {
+                            _id: 1
+                        }
+                    },
+
+                    waterfallCallback);
+            };
+
+            contentIdsSearcher = function (deps, waterfallCallback) {
+                var everyOne = rewriteAccess.everyOne();
+                var owner = rewriteAccess.owner(req.session.uId);
+                var group = rewriteAccess.group(req.session.uId, deps);
+                var whoCanRw = [everyOne, owner, group];
+                var matchQuery = {
+                    $or: whoCanRw
+                };
+
+                var Model = models.get(req.session.lastDb, 'Order', OrderSchema);
+
+                Model.aggregate({
+                    $match: matchQuery
+                }, {
+                    $project: {
+                        _id: 1
+                    }
+                }, waterfallCallback);
+            };
+
+            contentSearcher = function (quotationsIds, waterfallCallback) {
+                var query;
+
+                query = Order.findById(id);
+
+                query
+                    .populate('supplier', '_id name fullName address')
+                    .populate('destination')
+                    .populate('currency._id')
+                    .populate('incoterm')
+                    .populate('priceList', 'name')
+                    .populate('costList', 'name')
+                    .populate('warehouse', 'name')
+                    .populate('salesPerson', 'name')
+                    .populate('invoiceControl')
+                    .populate('paymentTerm')
+                    .populate('paymentMethod', '_id name account bank address swiftCode owner')
+                    .populate('editedBy.user', '_id login')
+                    .populate('deliverTo', '_id, name')
+                    .populate('project', '_id name')
+                    .populate('shippingMethod', '_id name')
+                    .populate('workflow', '_id name status');
+
+                query.exec(waterfallCallback);
+            };
+
+            orderRowsSearcher = function (order, waterfallCallback) {
+
+
+                OrderRows.find({order: order._id})
+                    .populate('product')
+                    .populate('debitAccount', 'name')
+                    .populate('creditAccount', 'name')
+                    .populate('taxes.taxCode', 'fullName rate')
+                    .populate('warehouse', 'name')
+                    .sort('products')
+                    .exec(function (err, docs) {
+                        if (err) {
+                            return waterfallCallback(err);
+                        }
+
+                        order = order.toJSON();
+
+                        getAvailableForRows(req, docs, order.forSales, function (err, docs, goodsNotes) {
+                            if (err) {
+                                return waterfallCallback(err);
+                            }
+
+                            order.products = docs;
+                            order.account = docs && docs.length ? docs[0].debitAccount : {};
+
+                            order.goodsNotes = goodsNotes;
+                            waterfallCallback(null, order);
+                        });
+
+                    });
+            };
+
+            prepaymentsSearcher = function (order, waterfallCallback) {
+                Prepayments.aggregate([{
+                    $match: {
+                        order: objectId(id)
+                    }
+                }, {
+                    $project: {
+                        paidAmount: 1,
+                        currency  : 1,
+                        date      : 1,
+                        name      : 1,
+                        refund    : 1
+                    }
+                }, {
+                    $project: {
+                        paidAmount: {$divide: ['$paidAmount', '$currency.rate']},
+                        date      : 1,
+                        name      : 1,
+                        refund    : 1
+                    }
+                }, {
+                    $project: {
+                        paidAmount: {$cond: [{$eq: ['$refund', true]}, {$multiply: ['$paidAmount', -1]}, '$paidAmount']},
+                        date      : 1,
+                        name      : 1,
+                        refund    : 1
+                    }
+                }, {
+                    $group: {
+                        _id  : null,
+                        sum  : {$sum: '$paidAmount'},
+                        names: {$push: '$name'},
+                        date : {$min: '$date'}
+                    }
+                }], function (err, result) {
+                    if (err) {
+                        return waterfallCallback(err);
+                    }
+
+                    order.prepayment = result && result.length ? result[0] : {};
+
+                    waterfallCallback(null, order);
+                });
+            };
+
+            invoiceSearcher = function (order, waterfallCallback) {
+                Invoice.aggregate([{
+                    $match: {
+                        sourceDocument: objectId(id)
+                    }
+                }, {
+                    $project: {
+                        name: 1
+                    }
+                }], function (err, result) {
+                    if (err) {
+                        return waterfallCallback(err);
+                    }
+
+                    order.invoice = result && result.length ? result[0] : {};
+                    waterfallCallback(null, order);
+                });
+            };
+
+            stockReturnsSearcher = function (order, waterfallCallback) {
+                StockReturnsService.findForOrder({
+                    query : {order: objectId(order._id)},
+                    dbName: req.session.lastDb
+                }, function (err, docs) {
+                    if (err) {
+                        return waterfallCallback(err);
+                    }
+
+                    order.stockReturns = docs || [];
+
+                    waterfallCallback(null, order);
+                })
+            };
+
+            waterfallTasks = [departmentSearcher, contentIdsSearcher, contentSearcher, orderRowsSearcher, prepaymentsSearcher, invoiceSearcher, stockReturnsSearcher];
+
+            async.waterfall(waterfallTasks, function (err, result) {
+
+                if (err) {
+                    return next(err);
+                }
+
+                getHistory(req, result, function (err, order) {
+                    if (err) {
+                        return next(err);
+                    }
+
+                    arr.push(order);
+                    cb(null,order);
+                });
+            });
+
+        }, function(err){
+            if (err) {
+                return next(err);
+            }
+
+            res.status(200).send(arr);
+        });
+    };
+
+    this.importexcel = function(req, res, next){
+        var data = req.body;
+        var file = req.files && req.files.file ? req.files.file : null;
+        var Project = models.get(req.session.lastDb, 'Project', ProjectSchema);
+        var Product = models.get(req.session.lastDb, 'Product', ProductSchema);
+        var Availability = models.get(req.session.lastDb, 'productsAvailability', AvailabilitySchema);
+        var Order = models.get(req.session.lastDb, 'Order', OrderSchema);
+        var purchaseOrders = models.get(req.session.lastDb, 'purchaseOrders', purchaseOrdersSchema);
+        var GoodsInNote = models.get(req.session.lastDb, 'GoodsInNote', GoodsInSchema);
+        var OrderRows = models.get(req.session.lastDb, 'orderRows', OrderRowsSchema);
+        var Workflow = models.get(req.session.lastDb, 'workflow', WorkflowSchema);
+        var userId = req.session.uId;
+        var list = xlsx.parse(file.path);
+        var tempResult = [];
+        var error;
+        var status = {
+            allocateStatus: 'NOT',
+            fulfillStatus : 'NOT',
+            shippingStatus: 'NOT'
+
+        };
+
+        var excelName = req.params.id.search('.xlsx');
+
+        if(excelName == -1){
+            var jsonfileName = '../uploads/exceljson/' + req.params.id.replace('.xls','') + '.json';
+        }
+        else{
+            var jsonfileName = '../uploads/exceljson/' + req.params.id.replace('.xlsx','') + '.json';
+        }
+
+        var jsonFile = require(jsonfileName);
+
+        function findAndReplaceId(callback){
+
+            if(list[0].data.length != 0){
+                list[0].data.shift();
+            };
+            
+            var projectName = list[0].data[0][1];
+            var projectId;
+            
+            Project.findOne({name : projectName}, function (err, mod) {
+
+                if (err) {
+                    console.log(err);
+                } else {
+                    if (mod) {
+                        projectId = mod._id;
+                        callback(null,projectId);
+
+                    } else {
+                        error = new Error('name = ' + projectName + ' 在数据库中不存在');
+                        error.status = 400;
+                        console.log(error);
+                    }
+                }
+            });
+
+
+        };
+
+        function findWorkflow(projectId, callback){
+            Workflow.find({status : "New", wId : "Purchase Order"})
+                .exec(function (err, workflow) {
+                    if (err) {
+                        return waterfallCallback(err);
+                    }
+
+                    var para = {};
+                    para.projectId = projectId;
+                    para.workflowId = workflow[0]._id;
+
+                    callback(null,para);
+            });
+        };
+
+        function getTotal(para, callback){
+
+            async.each(list,function(listObj, asyncCb){
+
+                var projectName = listObj.data[0][1];
+
+                for(var i = 2; i < jsonFile.startLine; i++){
+                    listObj.data.shift();
+                }
+
+                var orderData = {
+                    project : para.projectId,
+                    status  : status,
+                    orderType : 'purchaseOrder',
+                    forSales : false,
+                    workflow : para.workflowId 
+                };
+
+                orderData.createdBy = {};
+
+                orderData.createdBy.user = req.session.uId;
+
+                var order = new purchaseOrders(orderData);
+                order.save(function(err, result){
+                    if(err){
+                        return next(err);
+                    }
+
+                    async.each(listObj.data,function(tempObj, asyncCb){
+                        if(tempObj[0] != null && tempObj[0] != '总计'){
+                            var xlsData = {};
+                            var parameters = [];
+                            var tempCode;                
+
+                            var priceQty = tempObj[3] ? tempObj[3] : '';
+                            var product = tempObj[1] ? tempObj[1] : '';
+                            var quantity = tempObj[2] ? tempObj[2] : '';
+                            var description = tempObj[4] ? tempObj[4] : '';
+
+                            xlsData.F = tempObj[5] ? tempObj[5] : '';
+                            xlsData.G = tempObj[6] ? tempObj[6] : '';
+                            xlsData.H = tempObj[7] ? tempObj[7] : '';
+                            xlsData.I = tempObj[8] ? tempObj[8] : '';
+                            xlsData.J = tempObj[9] ? tempObj[9] : '';
+                            xlsData.K = tempObj[10] ? tempObj[10] : '';
+                            xlsData.L = tempObj[11] ? tempObj[11] : '';
+                            xlsData.M = tempObj[12] ? tempObj[12] : '';
+                            xlsData.N = tempObj[13] ? tempObj[13] : '';
+                            xlsData.O = tempObj[14] ? tempObj[14] : '';
+                            xlsData.P = tempObj[15] ? tempObj[15] : '';
+                            xlsData.Q = tempObj[16] ? tempObj[16] : '';
+
+                            for(var key in jsonFile.fields_name){
+                                parameters.push({
+                                    paraname     : jsonFile.fields_name[key],
+                                    value        : xlsData[key]
+                                });
+                            }
+
+                            Product.findOne({name : product}, function (err, mod) {
+
+                                if (err) {
+                                    console.log(err);
+                                }
+
+                                tempCode = mod._id;
+
+                                var orderRowsData = {
+                                    product    : tempCode,
+                                    priceQty   : priceQty,
+                                    quantity   : quantity,
+                                    description: description,
+                                    parameters : parameters,
+                                    order      : result._id
+                                }
+
+                                var orderRows = new OrderRows(orderRowsData);
+                                orderRows.save(function(err, rowsResult){
+                                    if(err){
+                                        return next(err);
+                                    }
+                                })
+
+                                tempResult.push(orderRowsData);
+                                
+                                });
+
+                        }
+                    });
+
+                })
+
+                asyncCb(null, tempResult);
+
+            });
+
+            callback(null,tempResult);
+        };
+
+        async.waterfall([findAndReplaceId, findWorkflow, getTotal], function(err, excelResult){
+
+            if(err){
+                return next(err);
+            }
+
+            var response = {};
+
+            response.data = excelResult;
+           
+            res.status(200).send(response);
+        });        
+    };
+
+    this.catchPrices = function(req, res, next){
+        var crawlerResultsModel = models.get(req.session.lastDb, 'crawlerResults', crawlerResultsSchema);
+        var marketSettingsModel = models.get(req.session.lastDb, 'marketSettings', marketSettingsSchema);
+        var data = req.query;
+        var date = data.date;
+        var products = [];
+        var dayTime = date.split("-").join("").trim();
+        var Tasks = models.get(req.session.lastDb, 'purchaseContract', QuotationContractSchema);
+        var error;
+
+        Tasks.findById(data.id)
+            .populate('products.product', '_id name info')
+            .lean()
+            .exec(function (err, task) {
+                if (err) {
+                    next(err);
+                }
+                if(task.products.length == 0){
+                    error = new Error('采购合同中未设置供货产品！');
+                    next(error);
+                } else{
+                    async.each(task.products, function (product, cb){
+                        var marketId = product.sourceAl;
+                        marketSettingsModel.findOne({_id : marketId}, function (err, market){
+                            var classId = market.classId;
+                            crawlerResultsModel.findOne({dayTime : dayTime, classId : classId}, function (err, crawlerResult) {
+                                if(err) {
+                                    console.log(err);
+                                }
+
+                                if(crawlerResult){
+                                    product.average = crawlerResult.average;
+                                }
+
+                                products.push(product);
+                                cb(null);
+                            });
+                        });
+                    }, function (err){
+                        if(err){
+                            return next(err);
+                        }
+                        var response = {};
+                        if(products[0].average){
+                            response.products = products;
+                            res.status(200).send(response);
+                        } else{
+                            error = new Error('当日未获取铝锭价！');
+                            next(error);
+                        }
+                    });
+                }
+            });
+
+    };
+
+};
+
+module.exports = Module;
diff --git a/byerp/handlers/payroll.js b/byerp/handlers/payroll.js
index ce91716..a73b494 100644
--- a/byerp/handlers/payroll.js
+++ b/byerp/handlers/payroll.js
@@ -1815,7 +1815,7 @@ var Module = function (models) {
 
                             resultItem = result && result.length ? result[0] : {};
 
-                            pcb(null, resultItem.endowmentInd||0);
+                            pcb(null, resultItem.endowmentInd*100||0);
                     });
 
                 }
@@ -1840,7 +1840,7 @@ var Module = function (models) {
 
                         resultItem = result && result.length ? result[0] : {};
 
-                        pcb(null, resultItem.unemployeeInd||0);
+                        pcb(null, resultItem.unemployeeInd*100||0);
                     });
                 }
                 function medicalInsurance(pcb){
@@ -1864,7 +1864,7 @@ var Module = function (models) {
 
                         resultItem = result && result.length ? result[0] : {};
 
-                        pcb(null, resultItem.medicalInd||0);
+                        pcb(null, resultItem.medicalInd*100||0);
                     });
                 }
                 function cityHealth(pcb){
@@ -1887,9 +1887,9 @@ var Module = function (models) {
                             return pcb(err);
                         }
 
-                        resultItem = result && rseult.length? result[0]: {};
+                        resultItem = result && result.length? result[0]: {};
 
-                        pcb(null, resultItem.cityHealth||0);
+                        pcb(null, resultItem.cityHealth*100||0);
                     });
                 }
                 function housingFund(pcb){
@@ -2281,13 +2281,13 @@ var Module = function (models) {
                         payrollBody.earnings.forEach(function (elem) {
                             payrollBody.calc += elem.amount;
                         });
-                        console.log(payrollBody.earnings);
+
                         var wage = payrollBody.calc;
                         
                         payrollBody.deductions.forEach(function (elem) {
                             payrollBody.calc -= elem.amount;
                         });
-                        console.log('ss',payrollBody.deductions);
+
                         var taxableIncome = wage - ((result.attendance||0) + (result.unemploymentInsurance||0) + (result.endowmentInsurance||0) + (result.medicalInsurance||0) + (result.housingFund||0) + (result.communication||0))/100;
                         var nextWage = taxableIncome;
                         var taxAmount = 0;
@@ -2364,11 +2364,11 @@ var Module = function (models) {
                                         }
                                         bodySalary.amount = payrollBody.calc * 100;
                                         
-                                        console.log('calc',payrollBody.calc);
+
                                         if (!payrollBody.earnings.length && !payrollBody.deductions.length || (payrollBody.calc <= 0)) {
                                             return asyncCb();
                                         }
-                                        console.log('payrollBody',payrollBody);
+
                                         newPayrollModel = new Payroll(payrollBody);
                                         removeJournalEntries = function (cb) {
                                             var query = {
@@ -2500,7 +2500,7 @@ var Module = function (models) {
                                                                     if (!payrollBody.earnings.length && !payrollBody.deductions.length || (payrollBody.calc <= 0)) {
                                                                         return asyncCb();
                                                                     }
-                                                                    console.log('payrollBody',payrollBody);
+          
                                                                     newPayrollModel = new Payroll(payrollBody);
                                                                     
                                                                     newPayrollModel.save(function (err, result) {
diff --git a/byerp/handlers/socialInsurance.js b/byerp/handlers/socialInsurance.js
index a6ac652..0dcf853 100644
--- a/byerp/handlers/socialInsurance.js
+++ b/byerp/handlers/socialInsurance.js
@@ -28,7 +28,7 @@ var socialInsurance = function (models) {
         var filter = data.filter || {};
         var contentType = data.contentType;
         var uId = req.session.uId;
-        // var sort = data.sort || {};
+
         var sort;
         var paginationObject = pageHelper(data);
         var limit = paginationObject.limit;
@@ -39,10 +39,11 @@ var socialInsurance = function (models) {
         var date = filter&&filter.startDate ? new Date(filter.startDate.value) : new Date();
         var year = moment(date).year();
         var month = moment(date).month() + 1;
+	console.log(date, moment(date).month());
         var filterMapper = new FilterMapper();
         if (filter && typeof filter === 'object') {
             delete filter.startDate;
-            optionsObject = filterMapper.mapFilter(filter, contentType); // caseFilter(filter);
+            optionsObject = filterMapper.mapFilter(filter, {contentType: contentType}); // caseFilter(filter);
         }
 
         var queryObject = {};
@@ -50,7 +51,7 @@ var socialInsurance = function (models) {
         if (optionsObject) {
             queryObject.$and.push(optionsObject);
         }
-        console.log('queryObject',queryObject);
+
         if (data.sort) {
             keySort = Object.keys(data.sort)[0];
             data.sort[keySort] = parseInt(data.sort[keySort], 10);
@@ -174,7 +175,7 @@ var socialInsurance = function (models) {
         var datekey = req.params.id;
         var year = datekey.substr(0, 4);
         var month = datekey.substr(4, 2);
-        console.log(req);
+
         var file = req.files && req.files.file ? req.files.file : null;
         var socialInsuranceModel = models.get(req.session.lastDb, 'socialInsurance', socialInsuranceSchema);
         var EmployeeModel = models.get(req.session.lastDb, 'Employees', EmployeeSchema);
@@ -283,7 +284,7 @@ var socialInsurance = function (models) {
                                 reason: '不在员工表中'
                             }
                             inexistence.push(inexistenceData);
-                            console.log(inexistence);
+
                             var dataTotal = {
                                 name: name,
                                 ID  : ID,
@@ -352,7 +353,7 @@ var socialInsurance = function (models) {
                                 cb(null, result);
                             });
                         }
-                        //result.push(dataTotal);
+
                     });
                 }
             });
@@ -362,14 +363,10 @@ var socialInsurance = function (models) {
             }
             
             result = inexistence.concat(dimission, existence);
-            console.log(result);
+
             res.status(200).send(result);
         });
-        // setTimeout(function(){
-            
-        // },1000);
-        // console.log(result);
-        // res.status(200).send(result);
+
     };
 
     this.importCityHealth = function(req, res, next){
@@ -386,21 +383,26 @@ var socialInsurance = function (models) {
             async.each(listItem.data, function(item, asyncCb){
                 var ID = item[1];
                 var cityHealth = item[3];
-                socialInsuranceModel.findOne({year: year, month: month, ID: ID}, function(err, mod){
+                socialInsuranceModel.find({year: year, month: month, ID: ID}, function(err, mod){
                     if(err){
                         return asyncCb(err);
                     }
-                    var sId = mod._id;
-                    var data = {
-                        cityHealth: cityHealth
-                    };
+                    if(mod.length){
+                        var sId = mod[0]._id;
+                        var data = {
+                            cityHealth: cityHealth
+                        };
 
-                    socialInsuranceModel.findByIdAndUpdate(sId, data, function(err, result){
-                        if(err){
-                            return asyncCb(err);
-                        }
-                        asyncCb(null, result);
-                    });
+                        socialInsuranceModel.findByIdAndUpdate(sId, data, function(err, result){
+                            if(err){
+                                return asyncCb(err);
+                            }
+                            asyncCb(null);
+                        });
+                    }
+                    else{
+                        asyncCb(null);
+                    }
                 });
             },function(err){
                 if(err){
diff --git a/byerp/handlers/timeCard.js b/byerp/handlers/timeCard.js
index dde6cfc..7ad18dc 100644
--- a/byerp/handlers/timeCard.js
+++ b/byerp/handlers/timeCard.js
@@ -547,9 +547,11 @@ var Module = function (models) {
 
     function processData(req, callback){
       var timeCard = models.get(req.session.lastDb, 'timeCard', tcardSchema);
-
-      var year = new Date().getFullYear();
-      var month = new Date().getMonth();
+      var datekey = req.params.datekey;
+      console.log(datekey);
+      var year = parseInt(datekey.toString().substr(0, 4));
+      var month = parseInt(datekey.toString().substr(4, 2));
+      console.log(year, month);
       timeCard.aggregate([
         {
           $match: {
diff --git a/byerp/helpers/namesRetriever.js b/byerp/helpers/namesRetriever.js
index 008f749..4e0e6ee 100644
--- a/byerp/helpers/namesRetriever.js
+++ b/byerp/helpers/namesRetriever.js
@@ -5,9 +5,9 @@ module.exports = function (email) {
     var _nameArray;
     var nameStr;
 
-    if (!('capitalizer' in String.prototype)) {
-        require('./stringExtender');
-    }
+    // if (!('capitalizer' in String.prototype)) {
+    //     require('./stringExtender');
+    // }
 
     function splitterRetriver(name) {
         if (name.indexOf('.') !== -1) {
@@ -34,8 +34,8 @@ module.exports = function (email) {
         firstName = firstName || ' ';
         lastName = lastName || ' ';
 
-        firstName = firstName.capitalizer('Caps');
-        lastName = lastName.capitalizer('Caps');
+        //firstName = firstName.capitalizer('Caps');
+        //lastName = lastName.capitalizer('Caps');
 
         return {
             first: firstName,
diff --git a/byerp/models/designRec.js b/byerp/models/designRec.js
index 831ff5c..0a044ee 100644
--- a/byerp/models/designRec.js
+++ b/byerp/models/designRec.js
@@ -9,7 +9,7 @@ module.exports = (function () {
         arrivalDate  : {type: Date, default: null},
         colorNumber  : {type: ObjectId, ref: 'colorNumber', default: null},
         protectType  : {type: String, default: ''},
-        isMaterial   : {type: Boolean, default: false},
+        isMonitoring : {type: Boolean, default: false},
         follower     : {type: ObjectId, ref: 'Employees', default: null},
         uploadDate   : {type: Date, default: null},
         designer     : {type: ObjectId, ref: 'Employees', default: null},
@@ -19,7 +19,7 @@ module.exports = (function () {
         designDays   : {type: Number},
         orderStatus  : {type: String, default: ''},
         isReview     : {type: Boolean, default: false},
-        customerConfirm : {type: Boolean, default: false},
+        isConfirm    : {type: Boolean, default: false},
         comment      : {type: String, default: ''},
         status       : {type: String, default: ''},
         createdBy: {
diff --git a/byerp/models/employee.js b/byerp/models/employee.js
index 1c34e81..5371d09 100644
--- a/byerp/models/employee.js
+++ b/byerp/models/employee.js
@@ -99,7 +99,8 @@ module.exports = (function () {
 
         name: {
             first: {type: String, default: ''},
-            last : {type: String, default: ''}
+            last : {type: String, default: ''},
+            alpha: {type: String, default: ''}
         },
 
         tags: {type: Array, default: []},
@@ -232,8 +233,8 @@ module.exports = (function () {
         labourContractDate: {
           startDate: {type: Date},
           endDate: {type: Date}
-        }
-
+        },
+        deptRank: {type: Number, default: 0}
     }, {collection: 'Employees'});
 
     employeeSchema.virtual('fullName').get(function () {
diff --git a/byerp/models/goodsNote.js b/byerp/models/goodsNote.js
index 084022a..ab50517 100644
--- a/byerp/models/goodsNote.js
+++ b/byerp/models/goodsNote.js
@@ -69,6 +69,7 @@ module.exports = (function () {
             _id             : false,
             orderRowId      : {type: ObjectId, ref: 'orderRows', default: null},
             product         : {type: ObjectId, ref: 'Product', default: null},
+            barCodes        : {type: Array, default: []},
             gnotesDeliver: [{
                 location: {type: ObjectId, ref: 'location', default: null},
                 goodsInNoteId: {type: ObjectId, ref: 'GoodsInNote', default: null},
diff --git a/byerp/models/holiday.js b/byerp/models/holiday.js
index 6660c26..65f2a8a 100644
--- a/byerp/models/holiday.js
+++ b/byerp/models/holiday.js
@@ -8,7 +8,8 @@ module.exports = (function () {
         week       : Number,
         day        : Number,
         dateByMonth: Number,
-        comment    : String
+        comment    : String,
+        type       : String
 
     }, {collection: 'Holiday'});
 
diff --git a/byerp/models/order.js b/byerp/models/order.js
index 5321eac..87bbcf1 100644
--- a/byerp/models/order.js
+++ b/byerp/models/order.js
@@ -1,163 +1,163 @@
-module.exports = (function () {
-    'use strict';
-
-    var mongoose = require('mongoose');
-    var ObjectId = mongoose.Schema.Types.ObjectId;
-    var extend = require('mongoose-schema-extend');
-    var Schema = mongoose.Schema;
-    var payments;
-    var orderSchema;
-    var purchaseOrdersSchema;
-    var baseSchema;
-    var goodsPlanSchema;
-    var oemOrdersSchema;
-
-    payments = {
-        _id     : false,
-        id      : false,
-        total   : {type: Number, default: 0},
-        discount: {type: Number, default: 0},
-        unTaxed : {type: Number, default: 0},
-        taxes   : {type: Number, default: 0}
-    };
-
-    baseSchema = new Schema({
-        currency: {
-            _id : {type: String, ref: 'currency', default: ''},
-            rate: {type: Number, default: 1} // changed default to '0' for catching errors
-        },
-
-        forSales     : {type: Boolean, default: true},
-        type         : {type: String, default: 'Not Ordered', enum: ['Not Ordered', 'Not Invoiced', 'Invoiced']},
-        supplier     : {type: ObjectId, ref: 'Customers', default: null},
-        orderDate    : {type: Date, default: Date.now},
-        expectedDate : {type: Date, default: Date.now},
-        integrationId: {type: String, default: ''},
-
-        status: {
-            allocateStatus: {type: String, default: 'NOR', enum: ['NOR', 'NOT', 'NOA', 'ALL']},
-            fulfillStatus : {type: String, default: 'NOR', enum: ['NOR', 'NOT', 'NOA', 'ALL']},
-            shippingStatus: {type: String, default: 'NOR', enum: ['NOR', 'NOT', 'NOA', 'ALL']}
-        },
-
-        paymentMethod   : {type: ObjectId, ref: 'PaymentMethod', default: null},
-        name            : {type: String, default: 'SO', unique: true},
-        destination     : {type: ObjectId, ref: 'Destination', default: null},
-        paymentTerm     : {type: ObjectId, ref: 'PaymentTerm', default: null},
-        salesPerson     : {type: ObjectId, ref: 'Employees', default: null},
-        costList        : {type: ObjectId, ref: 'PriceList', default: null},
-        priceList       : {type: ObjectId, ref: 'PriceList', default: null},
-        paymentInfo     : payments,
-        shippingMethod  : {type: ObjectId, ref: 'shippingMethod', default: null},
-        shippingExpenses: {
-            amount : {type: Number, default: 0},
-            account: {type: ObjectId, ref: 'chartOfAccount', default: null}
-        },
-
-        workflow    : {type: ObjectId, ref: 'workflows', default: null},
-        tempWorkflow: {type: ObjectId, ref: 'workflows', default: null},
-        warehouse   : {type: ObjectId, ref: 'warehouse', default: null},
-        whoCanRW    : {type: String, enum: ['owner', 'group', 'everyOne'], default: 'everyOne'},
-        attachments : {type: Array, default: []},
-        notes       : {type: Array, default: []},
-
-        groups: {
-            owner: {type: ObjectId, ref: 'Users', default: null},
-            users: [{type: ObjectId, ref: 'Users', default: null}],
-            group: [{type: ObjectId, ref: 'Department', default: null}]
-        },
-
-        creationDate: {type: Date, default: Date.now},
-        project     : {type: ObjectId, ref: 'Project', default: null},
-        createdBy   : {
-            user: {type: ObjectId, ref: 'Users', default: null},
-            date: {type: Date, default: Date.now}
-        },
-
-        externalId: String,
-        channel   : {type: ObjectId, ref: 'integrations', default: null},
-
-        editedBy: {
-            user: {type: ObjectId, ref: 'Users', default: null},
-            date: {type: Date, default: Date.now}
-        },
-
-        conflictTypes: [{
-            _id  : false,
-            type : {type: String},
-            value: {type: JSON}
-        }],
-        orderType : {type: String, default: 'PO'},
-        contract  : {type:ObjectId, ref:'purchaseContract', default: null}
-
-    }, {collection: 'Order', discriminatorKey: '_type'});
-
-    purchaseOrdersSchema = baseSchema.extend({});
-    orderSchema = baseSchema.extend({
-        building: {type: ObjectId, ref: 'building', default: null}
-    });
-    goodsPlanSchema = baseSchema.extend({
-        building: {type: ObjectId, ref: 'building', default: null},
-        reasonType : {type: String, default: ''},
-        source: {type: String, default: ''}
-    });
-    oemOrdersSchema= baseSchema.extend({
-        building: {type: ObjectId, ref: 'building', default: null}
-    });
-
-    mongoose.model('Order', orderSchema);
-    mongoose.model('purchaseOrders', purchaseOrdersSchema);
-    mongoose.model('goodsPlan', goodsPlanSchema);
-    mongoose.model('oemOrders', oemOrdersSchema);
-
-
-    function setName(next) {
-        var quotation = this;
-        var db = quotation.db.db;
-        var prefix = quotation.orderType;
-        
-        if(quotation.orderType === "goodsPlan"){
-            prefix = 'GP';
-        }else if(quotation.orderType === "salesOrder"){
-            prefix = 'SO';
-        }else if(quotation.orderType === "purchaseOrder"){
-            prefix = 'PO';
-        }else if(quotation.orderType === "oemOrders"){
-            prefix = 'LO';
-        }else{
-            prefix = 'WO';
-        }
-
-        db.collection('settings').findOneAndUpdate({
-            dbName: db.databaseName,
-            name  : prefix
-        }, {
-            $inc: {seq: 1}
-        }, {
-            returnOriginal: false,
-            upsert        : true
-        }, function (err, rate) {
-            if (err) {
-                return next(err);
-            }
-
-            quotation.name = prefix + '_' + rate.value.seq;
-
-            next();
-        });
-    }
-
-    orderSchema.pre('save', setName);
-    purchaseOrdersSchema.pre('save', setName);
-    goodsPlanSchema.pre('save', setName);
-    oemOrdersSchema.pre('save', setName);
-
-    if (!mongoose.Schemas) {
-        mongoose.Schemas = {};
-    }
-
-    mongoose.Schemas.Order = orderSchema;
-    mongoose.Schemas.purchaseOrders = purchaseOrdersSchema;
-    mongoose.Schemas.goodsPlan = goodsPlanSchema;
-    mongoose.Schemas.oemOrders = oemOrdersSchema;
-})();
+module.exports = (function () {
+    'use strict';
+
+    var mongoose = require('mongoose');
+    var ObjectId = mongoose.Schema.Types.ObjectId;
+    var extend = require('mongoose-schema-extend');
+    var Schema = mongoose.Schema;
+    var payments;
+    var orderSchema;
+    var purchaseOrdersSchema;
+    var baseSchema;
+    var goodsPlanSchema;
+    var oemOrdersSchema;
+
+    payments = {
+        _id     : false,
+        id      : false,
+        total   : {type: Number, default: 0},
+        discount: {type: Number, default: 0},
+        unTaxed : {type: Number, default: 0},
+        taxes   : {type: Number, default: 0}
+    };
+
+    baseSchema = new Schema({
+        currency: {
+            _id : {type: String, ref: 'currency', default: ''},
+            rate: {type: Number, default: 1} // changed default to '0' for catching errors
+        },
+
+        forSales     : {type: Boolean, default: true},
+        type         : {type: String, default: 'Not Ordered', enum: ['Not Ordered', 'Not Invoiced', 'Invoiced']},
+        supplier     : {type: ObjectId, ref: 'Customers', default: null},
+        orderDate    : {type: Date, default: Date.now},
+        expectedDate : {type: Date, default: Date.now},
+        integrationId: {type: String, default: ''},
+
+        status: {
+            allocateStatus: {type: String, default: 'NOR', enum: ['NOR', 'NOT', 'NOA', 'ALL']},
+            fulfillStatus : {type: String, default: 'NOR', enum: ['NOR', 'NOT', 'NOA', 'ALL']},
+            shippingStatus: {type: String, default: 'NOR', enum: ['NOR', 'NOT', 'NOA', 'ALL']}
+        },
+
+        paymentMethod   : {type: ObjectId, ref: 'PaymentMethod', default: null},
+        name            : {type: String, default: 'SO', unique: true},
+        destination     : {type: ObjectId, ref: 'Destination', default: null},
+        paymentTerm     : {type: ObjectId, ref: 'PaymentTerm', default: null},
+        salesPerson     : {type: ObjectId, ref: 'Employees', default: null},
+        costList        : {type: ObjectId, ref: 'PriceList', default: null},
+        priceList       : {type: ObjectId, ref: 'PriceList', default: null},
+        paymentInfo     : payments,
+        shippingMethod  : {type: ObjectId, ref: 'shippingMethod', default: null},
+        shippingExpenses: {
+            amount : {type: Number, default: 0},
+            account: {type: ObjectId, ref: 'chartOfAccount', default: null}
+        },
+
+        workflow    : {type: ObjectId, ref: 'workflows', default: null},
+        tempWorkflow: {type: ObjectId, ref: 'workflows', default: null},
+        warehouse   : {type: ObjectId, ref: 'warehouse', default: null},
+        whoCanRW    : {type: String, enum: ['owner', 'group', 'everyOne'], default: 'everyOne'},
+        attachments : {type: Array, default: []},
+        notes       : {type: Array, default: []},
+
+        groups: {
+            owner: {type: ObjectId, ref: 'Users', default: null},
+            users: [{type: ObjectId, ref: 'Users', default: null}],
+            group: [{type: ObjectId, ref: 'Department', default: null}]
+        },
+
+        creationDate: {type: Date, default: Date.now},
+        project     : {type: ObjectId, ref: 'Project', default: null},
+        createdBy   : {
+            user: {type: ObjectId, ref: 'Users', default: null},
+            date: {type: Date, default: Date.now}
+        },
+
+        externalId: String,
+        channel   : {type: ObjectId, ref: 'integrations', default: null},
+
+        editedBy: {
+            user: {type: ObjectId, ref: 'Users', default: null},
+            date: {type: Date, default: Date.now}
+        },
+
+        conflictTypes: [{
+            _id  : false,
+            type : {type: String},
+            value: {type: JSON}
+        }],
+        orderType : {type: String, default: 'PO'},
+        contract  : {type:ObjectId, ref:'purchaseContract', default: null}
+
+    }, {collection: 'Order', discriminatorKey: '_type'});
+
+    purchaseOrdersSchema = baseSchema.extend({});
+    orderSchema = baseSchema.extend({
+        building: {type: ObjectId, ref: 'building', default: null}
+    });
+    goodsPlanSchema = baseSchema.extend({
+        building: {type: ObjectId, ref: 'building', default: null},
+        reasonType : {type: String, default: ''},
+        source: {type: String, default: ''}
+    });
+    oemOrdersSchema= baseSchema.extend({
+        building: {type: ObjectId, ref: 'building', default: null}
+    });
+
+    mongoose.model('Order', orderSchema);
+    mongoose.model('purchaseOrders', purchaseOrdersSchema);
+    mongoose.model('goodsPlan', goodsPlanSchema);
+    mongoose.model('oemOrders', oemOrdersSchema);
+
+
+    function setName(next) {
+        var quotation = this;
+        var db = quotation.db.db;
+        var prefix = quotation.orderType;
+        
+        if(quotation.orderType === "goodsPlan"){
+            prefix = 'GP';
+        }else if(quotation.orderType === "salesOrder"){
+            prefix = 'SO';
+        }else if(quotation.orderType === "purchaseOrder"){
+            prefix = 'PO';
+        }else if(quotation.orderType === "oemOrders"){
+            prefix = 'LO';
+        }else{
+            prefix = 'WO';
+        }
+
+        db.collection('settings').findOneAndUpdate({
+            dbName: db.databaseName,
+            name  : prefix
+        }, {
+            $inc: {seq: 1}
+        }, {
+            returnOriginal: false,
+            upsert        : true
+        }, function (err, rate) {
+            if (err) {
+                return next(err);
+            }
+
+            quotation.name = prefix + '_' + rate.value.seq;
+
+            next();
+        });
+    }
+
+    orderSchema.pre('save', setName);
+    purchaseOrdersSchema.pre('save', setName);
+    goodsPlanSchema.pre('save', setName);
+    oemOrdersSchema.pre('save', setName);
+
+    if (!mongoose.Schemas) {
+        mongoose.Schemas = {};
+    }
+
+    mongoose.Schemas.Order = orderSchema;
+    mongoose.Schemas.purchaseOrders = purchaseOrdersSchema;
+    mongoose.Schemas.goodsPlan = goodsPlanSchema;
+    mongoose.Schemas.oemOrders = oemOrdersSchema;
+})();
diff --git a/byerp/public/index.html b/byerp/public/index.html
index 938305f..f2ea2bf 100755
--- a/byerp/public/index.html
+++ b/byerp/public/index.html
@@ -18,6 +18,7 @@
     <link href='googleapis/fonts.css' rel='stylesheet' type='text/css'>
     <link rel="stylesheet" href="css/jquery.Jcrop.css" type="text/css"/>
     <link rel="stylesheet" href="css/style.css" type="text/css"/>
+    <link rel="stylesheet" href="js/libs/jstree/dist/themes/default/style.min.css" type="text/css"/>    
 
     <script data-main="js/main" src="js/libs/require.js"></script>
 
diff --git a/byerp/public/js/app.js b/byerp/public/js/app.js
index 5098b0e..d00c6ab 100755
--- a/byerp/public/js/app.js
+++ b/byerp/public/js/app.js
@@ -126,47 +126,47 @@ define([
 
                 switch (month) {
                     case 1:
-                        mon = '一月';
+                        mon = '01';
                         break;
                     case 2:
-                        mon = '二月';
+                        mon = '02';
                         break;
                     case 3:
-                        mon = '三月';
+                        mon = '03';
                         break;
                     case 4:
-                        mon = '四月';
+                        mon = '04';
                         break;
                     case 5:
-                        mon = '五月';
+                        mon = '05';
                         break;
                     case 6:
-                        mon = '六月';
+                        mon = '06';
                         break;
                     case 7:
-                        mon = '七月';
+                        mon = '07';
                         break;
                     case 8:
-                        mon = '八月';
+                        mon = '08';
                         break;
                     case 9:
-                        mon = '九月';
+                        mon = '09';
                         break;
                     case 10:
-                        mon = '十月';
+                        mon = '10';
                         break;
                     case 11:
-                        mon = '十一月';
+                        mon = '11';
                         break;
                     case 12:
-                        mon = '十二月';
+                        mon = '12';
                         break;
                     // skip default;
                 }
 
                 target = $(this);
-                day = target.val().split(' ')[0] || '01';
-                target.val(day + ' ' + mon + ', ' + year);
+                day = target.val().split('-')[2] || '01';
+                target.val(year + '-' + mon + '-' + day);
             }
         });
 
diff --git a/byerp/public/js/main.js b/byerp/public/js/main.js
index 0f25b37..c40c50d 100755
--- a/byerp/public/js/main.js
+++ b/byerp/public/js/main.js
@@ -35,8 +35,9 @@ require.config({
         socketio     : '/socket.io/socket.io.js',
         backstratch  : './libs/jquery-backstretch/jquery.backstretch.min',
         wickedpicker : './libs/wickedpicker/dist/wickedpicker.min',
-		distpicker   : './libs/distpicker',
+	distpicker   : './libs/distpicker',
         pdfobject    : './libs/pdfobject/pdfobject',
+        jstree       : './libs/jstree/dist/jstree.min'
     },
 
     shim: {
diff --git a/byerp/public/js/models/EmployeesModel.js b/byerp/public/js/models/EmployeesModel.js
index a0c406f..2186678 100644
--- a/byerp/public/js/models/EmployeesModel.js
+++ b/byerp/public/js/models/EmployeesModel.js
@@ -92,8 +92,8 @@
            Validation.checkNameField(errors, true, attrs.name.last, '名');
            //Validation.checkPhoneField(errors, true, attrs.workPhones.phone, '家庭电话');
            Validation.checkPhoneField(errors, true, attrs.workPhones.mobile, '手机号码');
-           Validation.checkEmailField(errors, false, attrs.workEmail, 'Work Email');
-           // Validation.checkEmailField(errors, true, attrs.personalEmail, 'Personal Email');
+           Validation.checkEmailField(errors, false, attrs.workEmail, '邮箱');
+           Validation.checkEmailField(errors, true, attrs.personalEmail, '个人邮箱');
            // Validation.checkCountryCityStateField(errors, false, attrs.workAddress.country, 'Country');
            // Validation.checkCountryCityStateField(errors, false, attrs.workAddress.state, 'State');
            // Validation.checkCountryCityStateField(errors, false, attrs.workAddress.city, 'City');
diff --git a/byerp/public/js/models/HolidayModel.js b/byerp/public/js/models/HolidayModel.js
index eccb172..7d8935d 100755
--- a/byerp/public/js/models/HolidayModel.js
+++ b/byerp/public/js/models/HolidayModel.js
@@ -1,13 +1,30 @@
 define([
     'Backbone',
     'common',
-    'constants'
-], function (Backbone, common, CONSTANTS) {
+    'constants',
+    'Validation'
+], function (Backbone, common, CONSTANTS, Validation) {
     'use strict';
 
     var HolidayModel = Backbone.Model.extend({
         idAttribute: '_id',
 
+        initialize : function () {
+            this.on('invalid', function (model, errors) {
+                var msg;
+
+                if (errors.length > 0) {
+                    msg = errors.join('\n');
+
+                    App.render({
+                        type   : 'error',
+                        message: msg
+                    });
+                }
+            });
+        },
+
+
         urlRoot: function () {
             return CONSTANTS.URLS.HOLIDAY;
         },
@@ -16,7 +33,18 @@ define([
             holiday.date = common.utcDateToLocaleDate(holiday.date);
 
             return holiday;
-        }
+        },
+
+        validate: function (attrs) {
+            var errors = [];
+
+            Validation.checkDateField(errors, true, attrs.date, '日期');
+            Validation.checkJobPositionField(errors, true, attrs.type, '类型');
+
+            if (errors.length > 0) {
+                return errors;
+            }
+        },
     });
 
     return HolidayModel;
diff --git a/byerp/public/js/models/workPointModel.js b/byerp/public/js/models/workPointModel.js
index 826af50..6fbdaa5 100644
--- a/byerp/public/js/models/workPointModel.js
+++ b/byerp/public/js/models/workPointModel.js
@@ -7,6 +7,21 @@ define([
 
     var workPointModel = Backbone.Model.extend({
         idAttribute: '_id',
+
+        initialize : function () {
+            this.on('invalid', function (model, errors) {
+                var msg;
+
+                if (errors.length > 0) {
+                    msg = errors.join('\n');
+
+                    App.render({
+                        type   : 'error',
+                        message: msg
+                    });
+                }
+            });
+        },
         urlRoot    : function () {
             return CONSTANTS.URLS.WORKPOINT;
         },
diff --git a/byerp/public/js/views/Employees/CreateView.js b/byerp/public/js/views/Employees/CreateView.js
index 66991d6..905cb50 100644
--- a/byerp/public/js/views/Employees/CreateView.js
+++ b/byerp/public/js/views/Employees/CreateView.js
@@ -349,7 +349,7 @@ define([
             var note;
             var internalNotes = $.trim(this.$el.find('#internalNotes').val());
             var contractStart;
-            var contractEnd
+            var contractEnd;
 
           /*  if ($thisEl.find('.errorContent').length) {
                 return App.render({
@@ -428,7 +428,8 @@ define([
             data = {
                 name: {
                     first: $.trim($thisEl.find('#first').val()),
-                    last : $.trim($thisEl.find('#last').val())
+                    last : $.trim($thisEl.find('#last').val()),
+                    alpha: $.trim($thisEl.find('#alpha').val()),
                 },
 
                 accommodation:accommodation,
@@ -506,7 +507,9 @@ define([
                 labourContractDate: {
                     startDate: contractStart,
                     endDate: contractEnd
-                }
+                },
+                deptRank: $.trim($thisEl.find('#deptRank').val()),
+                workCentre: $thisEl.find('#workCentre').data('id')? $thisEl.find('#workCentre').data('id'):null
 
             };
 
@@ -618,6 +621,7 @@ define([
             populate.get('#payrollStructureTypeDd', CONSTANTS.URLS.PAYROLLSTRUCTURETYPES_FORDD, {}, 'name', this, true);
             populate.get('#scheduledPayDd', CONSTANTS.URLS.SCHEDULEDPAY_FORDD, {}, 'name', this, true);
             populate.get('#employeeCreateCountry', CONSTANTS.URLS.COUNTRIES, {}, '_id', this);
+            populate.get('#workCentre', 'workCentre/getForDD', {}, 'name', this, true, true);
 
             dataService.getData(CONSTANTS.URLS.JOBPOSITIONS_FORDD, {}, function (jobPositions) {
                 self.responseObj['#jobPositionDd'] = jobPositions.data;
diff --git a/byerp/public/js/views/Employees/EditView.js b/byerp/public/js/views/Employees/EditView.js
index 9ba8218..6cddcee 100644
--- a/byerp/public/js/views/Employees/EditView.js
+++ b/byerp/public/js/views/Employees/EditView.js
@@ -639,7 +639,7 @@ define([
             var haveSalary;
             var workId;
             var contractStart;
-            var contractEnd
+            var contractEnd;
            
             this.setChangedValueToModel();
             relatedUser = $thisEl.find('#relatedUsersDd').attr('data-id') || null;
@@ -718,7 +718,8 @@ define([
             data = {
                 name: {
                     first: $.trim($thisEl.find('#first').val()),
-                    last : $.trim($thisEl.find('#last').val())
+                    last : $.trim($thisEl.find('#last').val()),
+                    alpha: $.trim($thisEl.find('#alpha').val()),
                 },
 
                 accommodation:accommodation,
@@ -794,7 +795,9 @@ define([
                 labourContractDate: {
                     startDate: contractStart,
                     endDate: contractEnd
-                }
+                },
+                deptRank: $.trim($thisEl.find('#deptRank').val()),
+                workCentre: $thisEl.find('#workCentre').data('id')? $thisEl.find('#workCentre').data('id'):null
             };
 
             if (!haveSalary) {
@@ -847,6 +850,7 @@ define([
                             transferNewModel.changed.date = moment(modelChanged.changed.date).subtract(1, 'day');
                             transferNewModel.changed.status = 'transfer';
                             transferNewModel.changed.transferKey = modelChanged.changed.transferKey;
+
                             self.editCollection.add(transferNewModel);
                         }
                     }
@@ -1018,6 +1022,7 @@ define([
             populate.get('#payrollStructureTypeDd', CONSTANTS.URLS.PAYROLLSTRUCTURETYPES_FORDD, {}, 'name', this);
             populate.get('#scheduledPayDd', CONSTANTS.URLS.SCHEDULEDPAY_FORDD, {}, 'name', this);
             populate.get('#employeeEditCountry', CONSTANTS.URLS.COUNTRIES, {}, '_id', this);
+            populate.get('#workCentre', 'workCentre/getForDD', {}, 'name', this, false, true);
 
             dataService.getData(CONSTANTS.URLS.JOBPOSITIONS_FORDD, {}, function (jobPositions) {
                 self.responseObj['#jobPositionDd'] = jobPositions.data;
diff --git a/byerp/public/js/views/Employees/list/ListView.js b/byerp/public/js/views/Employees/list/ListView.js
index 2aa87b7..d16310e 100755
--- a/byerp/public/js/views/Employees/list/ListView.js
+++ b/byerp/public/js/views/Employees/list/ListView.js
@@ -20,7 +20,7 @@ define([
         hasPagination    : true,
         contentType      : 'Employees',
         formUrl          : '#easyErp/Employees/',
-        letterKey        : 'name.last',
+        letterKey        : 'name.alpha',
         type: 'Employees',
 
         initialize: function (options) {
diff --git a/byerp/public/js/views/Employees/thumbnails/ThumbnailsView.js b/byerp/public/js/views/Employees/thumbnails/ThumbnailsView.js
index 7fae6f0..a71c073 100755
--- a/byerp/public/js/views/Employees/thumbnails/ThumbnailsView.js
+++ b/byerp/public/js/views/Employees/thumbnails/ThumbnailsView.js
@@ -20,7 +20,7 @@
         hasAlphabet : true,
         contentType : 'Employees',
         viewType    : 'thumbnails',
-        letterKey   : 'name.last',
+        letterKey   : 'name.alpha',
         type        : 'Employees',
 
         initialize: function (options) {
diff --git a/byerp/public/js/views/Products/orderRows/ProductItems.js b/byerp/public/js/views/Products/orderRows/ProductItems.js
index d0cf257..11b6305 100644
--- a/byerp/public/js/views/Products/orderRows/ProductItems.js
+++ b/byerp/public/js/views/Products/orderRows/ProductItems.js
@@ -1,1006 +1,952 @@
-define([
-    'Backbone',
-    'jQuery',
-    'Underscore',
-    'text!templates/Products/orderRows/ProductItems.html',
-    'text!templates/Products/orderRows/ExpenseInputContent.html',
-    'text!templates/Products/orderRows/ProductInputContent.html',
-    'text!templates/Products/orderRows/ProductItemsEditList.html',
-    'text!templates/Products/orderRows/ItemsEditList.html',
-    'text!templates/Products/orderRows/TotalAmount.html',
-    'text!templates/Products/orderRows/ShippingTemplate.html',
-    'collections/Products/products',
-    'views/Projects/projectInfo/wTracks/generateWTrack',
-    'views/selectView/selectView',
-    'populate',
-    'helpers',
-    'dataService',
-    'constants',
-    'async',
-    'helpers/keyValidator',
-    'custom'
-], function (Backbone,
-             $,
-             _,
-             productItemTemplate,
-             ExpenseInputContent,
-             ProductInputContent,
-             ProductItemsEditList,
-             ItemsEditList,
-             totalAmount,
-             ShippingTemplate,
-             ProductCollection,
-             GenerateWTrack,
-             SelectView,
-             populate,
-             helpers,
-             dataService,
-             CONSTANTS,
-             async,
-             keyValidator,
-             custom) {
-    'use strict';
-    var ProductItemTemplate = Backbone.View.extend({
-
-        events: {
-            'click .addProductItem a'                                                 : 'getProducts',
-            'click #selectShippingMethod:not(.disabled)'                              : 'addShipping',
-            'click #shippingRow .removeShipping'                                      : 'removeShipping',
-            //'click :not(.newSelectList)'                                              : 'closeSelect',
-            'click .newSelectList li:not(.miniStylePagination, #createNewEl)'         : 'chooseOption',
-            'click .newSelectList li.miniStylePagination'                             : 'notHide',
-            'click .newSelectList li.miniStylePagination .next:not(.disabled)'        : 'nextSelect',
-            'click .newSelectList li.miniStylePagination .prev:not(.disabled)'        : 'prevSelect',
-            'click .current-selected.productsDd'                                      : 'showProductsSelect',
-            'click .current-selected.accountDd'                                       : 'showProductsSelect',
-            'click .current-selected.taxCode'                                         : 'showProductsSelect',
-            'mouseenter .editable:not(.quickEdit), .editable .no-long:not(.quickEdit)': 'quickEdit',
-            'mouseleave .editable'                                                    : 'removeEdit',
-            'click #cancelSpan'                                                       : 'cancelClick',
-            'click #saveSpan'                                                         : 'saveClick',
-            'click #editSpan'                                                         : 'editClick',
-            'click .removeProduct'                                                    : 'deleteProduct',
-            'click .removeJob'                                                        : 'deleteRow',
-            'keyup td[data-name=price],td[data-name=quantity],td[data-name=priceQty] input'                  : 'priceChange',
-            // 'keyup .discountPercentage'                                               : 'discountChange',
-            'keypress  .forNum'                                                       : 'keypressHandler',
-            'keyup #discount'                                                         : 'recalculateDiscount',
-            'click .productItem'                                                      : 'renderMessage',
-            'click li#createNewEl'                                                    : 'createNewElement',
-            'click #catchPrices'                                                      : 'catchPrices'
-        },
-
-        createNewElement: function (e) {
-            var target = $(e.target);
-            var type = target.attr('data-level');
-
-            Backbone.history.fragment = '';
-            Backbone.history.navigate('#easyErp/Products', {trigger: true});
-        },
-
-        template: _.template(productItemTemplate),
-
-        initialize: function (options) {
-            var products;
-
-            options = options || Object.create(null);
-
-            this.responseObj = {};
-            this.taxesRate = 0;
-            this.availableVisible = true;
-
-            if (options) {
-                this.parentModel = options.parentModel;
-                this.projectModel = options.projectModel;
-                this.wTrackCollection = options.wTrackCollection;
-                this.availableVisible = options.availableVisible;
-                this.createJob = options.createJob;
-                this.notEditable = options.notEditable;
-                this.discountVisible = options.discountVisible;
-                this.deletedProducts = options.deletedProducts;
-
-                this.forSales = options.forSales;
-
-                delete options.projectModel;
-                delete options.parentModel;
-                delete options.wTrackCollection;
-                delete options.createJob;
-                delete options.visible;
-                delete options.forSales;
-                delete options.notEditable;
-                delete options.discountVisible;
-            }
-
-            if (this.parentModel) {
-                this.forSales = this.parentModel.get('forSales');
-            }
-
-            if (options && options.balanceVisible) {
-                this.visible = options.balanceVisible;
-            }
-            if (options.writeOff) {
-                this.writeOff = options.writeOff;
-            }
-
-            if (options && options.quotations) {
-                this.quotations = options.quotations;
-            } else {
-                this.quotations = false;
-            }
-
-            this.expense = options.expense;
-
-            this.notPayed = options.notPayed;
-
-            this.project = options.project;
-
-            options.projection = {
-                name    : 1,
-                info    : 1,
-                variants: 1
-            };
-            this.responseObj = options.responseObj || {};
-
-            products = new ProductCollection(options);
-            products.bind('reset', function () {
-                this.products = products;
-                this.responseObj['#productsDd'] = products.toJSON();
-                this.filterProductsForDD();
-            }, this);
-
-            this.priceChange = _.debounce(this.priceChange, 250);
-        },
-
-        closeSelect: function (e) {
-            $('.newSelectList').remove();
-        },
-
-        renderMessage: function (e) {
-            var $target = $(e.target);
-            var $tr = $target.closest('tr');
-            var productOrJob = 'product';
-
-            if (this.expense) {
-                return false;
-            }
-
-            if ($target.hasClass('current-selected') || $target.hasClass('productDescr') || $target.closest('ul').length) {
-                return false;
-            }
-
-            if ($tr.attr('data-error') || ($tr.find('a.jobs').attr('data-id') === 'jobs')) {
-                return App.render({
-                    type   : 'error',
-                    message: 'Please, choose ' + productOrJob + ' first.'
-                });
-            }
-        },
-
-        generateJob: function () {
-            var self = this;
-            var model = this.projectModel;
-            var $projectsDdContainer = this.$dialogContainer.find('#projectDd'); // this.$projectsDdContainer created in render block
-            var projectId = $projectsDdContainer.attr('data-id');
-
-            if (!model) {
-                $projectsDdContainer.css('color', 'red');
-
-                App.render({
-                    type   : 'error',
-                    message: CONSTANTS.SELECTP_ROJECT
-                });
-            }
-
-            if (projectId === model._id) {
-                if (this.generatedView) {
-                    this.generatedView.undelegateEvents();
-                }
-
-                this.generatedView = new GenerateWTrack({
-                    model               : this.projectModel,
-                    wTrackCollection    : this.wTrackCollection,
-                    createJob           : true,
-                    forQuotationGenerate: true,
-                    quotationDialog     : this
-                });
-            } else {
-                dataService.getData(CONSTANTS.URLS.PROJECTS_GET_FOR_WTRACK, {_id: projectId}, function (project) {
-                    self.projectModel = project && project.data ? project.data[0] : {};
-
-                    if (self.generatedView) {
-                        self.generatedView.undelegateEvents();
-                    }
-
-                    self.generatedView = new GenerateWTrack({
-                        model               : self.projectModel,
-                        wTrackCollection    : self.wTrackCollection,
-                        createJob           : true,
-                        forQuotationGenerate: true,
-                        quotationDialog     : self
-                    });
-                });
-            }
-
-            return false;
-        },
-
-        deleteRow: function (e) {
-            var target = $(e.target);
-            var tr = target.closest('tr');
-            var trNext = tr.next();
-            var jobId = tr.attr('data-id');
-            var exJob = _.findWhere(this.responseObj['#jobs'], {_id: jobId});
-
-            e.stopPropagation();
-            e.preventDefault();
-
-            if (this.responseObj['#jobs']) {
-                this.responseObj['#jobs'].splice(_.indexOf(this.responseObj['#jobs'], exJob), 1);
-            }
-
-            tr.remove();
-            trNext.remove();
-
-            this.recalculateDiscount();
-            // this.calculateTotal();
-        },
-
-        deleteProduct: function (e) {
-            var target = $(e.target);
-            var tr = target.closest('.info');
-            var trNext = tr.prev('.productItem');
-            var productId = tr.attr('data-id');
-
-            e.stopPropagation();
-            e.preventDefault();
-
-            tr.remove();
-            trNext.remove();
-
-            this.deletedProducts.push(productId);
-        },
-
-        generatedWtracks: function () {
-            var tr = this.$el.find('tr[data-error="true"]');
-            var aEl = tr.find('a[data-id="jobs"]');
-
-            // aEl.click();
-        },
-
-        keypressHandler: function (e) {
-
-            if ($(e.target).closest('input').hasClass('quantity')) {
-                return keyValidator(e);
-            }
-            
-            return keyValidator(e, true);
-        },
-
-        checkForQuickEdit: function (el) {
-            var tr = el.closest('tr');
-            var quickEditing = tr.find('.quickEdit');
-
-            return !quickEditing.length;
-        },
-
-        removeShipping: function (e) {
-            var target = $(e.target);
-            var $parrent = target.closest('tbody');
-
-            $parrent.find('#shippingRow').remove();
-            this.$el.find('#selectShippingMethod').removeClass('disabled');
-
-            this.recalculateTaxes();
-        },
-
-        addShipping: function (e) {
-            var self = this;
-            var target = $(e.target);
-            var $parrent = this.$el.find('#productList');
-            var $parrentRow = $parrent.find('.info').last();
-            var rowId = $parrentRow.attr('data-id');
-            var templ = _.template(ShippingTemplate);
-            var $trEll = $parrent.find('tr.info');
-
-            e.stopPropagation();
-            e.preventDefault();
-
-            if (!(this.$el.find('#shippingRow').length)) {
-                if (!$trEll.length) {
-                    $parrent.prepend(templ({
-                        forSales: self.forSales
-                    }));
-                } else {
-                    $($trEll[$trEll.length - 1]).after(templ({
-                        forSales: self.forSales
-                    }));
-                }
-
-                this.$el.find('#selectShippingMethod').addClass('disabled');
-            }
-
-        },
-
-        getProducts: function (e) {
-            var self = this;
-            var target = $(e.target);
-            var $parrent = target.closest('tbody');
-            var $parrentRow = $parrent.find('.info').last();
-            var rowId = $parrentRow.attr('data-id');
-            var hasError = $parrentRow.attr('data-error') === 'true';
-            var $trEll = $parrent.find('tr.info');
-            var products = this.products ? this.products.toJSON() : [];
-            var templ = _.template(ProductInputContent);
-            var curSymbol;
-            var warehouse;
-            var account;
-            var accountObj;
-            var defaultTax;
-
-            e.preventDefault();
-            e.stopPropagation();
-
-            curSymbol = this.$el.closest('form').find('#currencyDd').attr('data-symbol');
-
-            if (rowId === undefined || /* rowId !== 'false'*/ !hasError) {
-                if (!$trEll.length) {
-                    if (this.expense) {
-                        templ = _.template(ExpenseInputContent);
-                    }
-                    $parrent.prepend(templ({
-                        forSales  : self.forSales,
-                        products  : products,
-                        curSymbol : curSymbol,
-                        writeOff  : self.writeOff,
-                        quotations: self.quotations,
-                        project   : self.project
-                    }));
-                } else {
-
-                    if (this.expense) {
-                        templ = _.template(ExpenseInputContent);
-                    }
-
-                    $($trEll[$trEll.length - 1]).after(templ({
-                        forSales  : self.forSales,
-                        products  : products,
-                        curSymbol : curSymbol,
-                        writeOff  : self.writeOff,
-                        quotations: self.quotations,
-                        project   : self.project
-                    }));
-                }
-
-                warehouse = _.findWhere(this.responseObj['#warehouseDd'], {_id: $('#warehouseDd').attr('data-id')});
-                defaultTax = _.findWhere(this.responseObj['#taxCode'], {type: true});
-                account = warehouse ? warehouse.account : null;
-                accountObj = _.findWhere(this.responseObj['#account'], {_id: account});
-
-                if (accountObj && accountObj._id) {
-                    this.$el.find('.productItem').each(function () {
-                        $(this).find('.accountDd').text(accountObj.name).attr('data-id', accountObj._id);
-                    });
-                }
-
-                if (defaultTax && defaultTax._id) {
-                    $parrent.find('tr.productItem').last().find('.current-selected.taxCode').text(defaultTax.name).attr('data-id', defaultTax._id).attr('data-tax', defaultTax.level);
-                }
-
-                this.removeEditableCass($parrent.find('tr').last());
-
-            }
-
-
-            $('.newSelectList').remove();
-
-            return false;
-        },
-
-        filterProductsForDD: function () {
-            var id = '.productsDd';
-            var self = this;
-            var products = this.products.toJSON();
-
-            this.responseObj[id] = products;
-
-            /*this.responseObj[id] = [];
-             this.responseObj[id] = this.responseObj[id].concat(_.map(products, function (item) {
-             return {_id: item._id, name: item.name, level: item.projectShortDesc || ''};
-             }));*/
-        },
-
-        discountChange: function (e) {
-            var $targetEl = $(e.target);
-
-            if ($targetEl.val() > 100) {
-                $targetEl.val(100);
-            }
-        },
-
-        priceChange: function (e) {
-            var $targetEl = $(e.target);
-            var parent = $targetEl.closest('tr');
-            var inputEl = $targetEl.closest('input');
-            var val;
-
-            if (!inputEl.length) {
-                inputEl = parent.find('textarea');
-            }
-            val = inputEl.val();
-
-            e.preventDefault();
-
-            if (!val.length) {
-                val = '0';
-                inputEl.val(val);
-            }
-
-            parent.addClass('changedPrice');
-
-            this.recalculateDiscount(e);
-            this.recalculateTaxes(parent);
-        },
-
-        showProductsSelect: function (e) {
-            var $target = $(e.target);
-
-            e.stopPropagation();
-
-            if ($target.attr('id') === 'selectInput') {
-                return false;
-            }
-
-            if (this.selectView) {
-                this.selectView.remove();
-            }
-
-            this.selectView = new SelectView({
-                e          : e,
-                responseObj: this.responseObj
-            });
-
-            $target.append(this.selectView.render().el);
-
-            return false;
-        },
-
-        chooseOption: function (e) {
-            var self = this;
-            var $target = $(e.target).closest('li');
-            var $parrent = $target.parents('td');
-            var $trEl = $target.parents('tr.productItem');
-            var $infoTr = $trEl.next();
-            var $SKU = $target.find('b');
-            var $variants = $target.find('span.variants');
-            var $quantityContainer = $trEl.find('[data-name="quantity"]');
-            var $descriptionContainer = $trEl.find('.productDescr');
-            var $descriptionDiv = $infoTr.find('.fullfilledHolder');
-            var $taxesContainer = $trEl.find('[data-name="taxes"] .sum');
-            var $subtotalContainer = $trEl.find('[data-name="subtotal"] .sum');
-            var $costContainer = $trEl.find('[data-name="cost"] .sum');
-            var isAccount = !!$parrent.hasClass('account') || !!$parrent.hasClass('taxCodeLine');
-            var $quantity = $quantityContainer.find('input');
-            var $parrents = $trEl.find('td');
-            var _id = $target.attr('id');
-            var quantity = $quantity.val() || 1;
-            var salePrice = 0;
-            var description;
-            var model;
-            var taxes;
-            var total;
-            var subtotal;
-            var selectedProduct;
-            var jobId;
-            var currentJob;
-            var product = $trEl.find('.productsDd');
-            var currency = {};
-            var priceList = this.$dialogContainer.find('#priceList').attr('data-id');
-            var costList = this.$dialogContainer.find('#costList').attr('data-id');
-            var warehouse = this.$dialogContainer.find('#warehouseDd').attr('data-id');
-            var parallelTasks;
-            var variant;
-            var taxCode;
-
-            if (_id === 'createJob') {
-                return self.generateJob();
-            }
-
-            if ($SKU.length) {
-                variant = $variants.length ? (' ' + $variants.text()) : '';
-                $parrent.find('.current-selected').text($SKU.text()).attr('data-id', _id);
-                $descriptionContainer.val($target.find('span.name').text() + variant);
-            } else {
-                $parrent.find('.current-selected').text($target.text()).attr('data-id', _id);
-            }
-
-            if ($parrent.hasClass('taxCodeLine')) {
-                taxCode = _.findWhere(this.responseObj['#taxCode'], {_id: $target.attr('id')});
-
-                if (taxCode && taxCode._id) {
-                    $parrent.find('.current-selected').attr('data-tax', taxCode.level);
-                }
-
-                this.recalculateTaxes($parrent.closest('tr'));
-            }
-
-            if (isAccount) {
-                return false;
-            }
-
-            function getAvailability(pCb) {
-                dataService.getData('/products/productAvalaible', {
-                    product  : _id,
-                    warehouse: warehouse
-                }, function (data) {
-                    var itemsStock = data.onHand ? 'green' : 'red';
-                    var cost;
-                    $descriptionDiv.removeClass('green red');
-
-                    if (self.project && data.cost) {
-                        cost = data.cost / 100;
-                    }
-
-                    $descriptionDiv.addClass(itemsStock);
-                    $trEl.attr('data-hand', data.onHand);
-                    $descriptionDiv.find('.fullfilledInfo').html('<div><span class="">' + (data.inStock || 0) + ' in Stock, ' + (data.onHand || 0) + ' on Hand </span></div>');
-                    pCb(null, cost);
-                });
-            }
-
-            function getPrices(pCb) {
-                dataService.getData('/priceList/getPrices', {
-                    product  : _id,
-                    costList : costList,
-                    priceList: priceList,
-                    quantity : quantity
-                }, function (data) {
-                    pCb(null, data);
-                });
-            }
-
-            parallelTasks = [getPrices];
-
-            if (this.availableVisible) {
-                parallelTasks.push(getAvailability);
-            }
-
-            async.parallel(parallelTasks, function (err, resp) {
-                var data = resp[0];
-                var cost = resp[1];
-
-                var priceEl = cost || data.price || 0;
-
-                $quantity.val(quantity);
-                $trEl.attr('data-error', null);
-                $trEl.find('#editInput').val(priceEl.toFixed(2));
-
-                currency._id = $('#currencyDd').attr('data-id');
-
-                total = parseFloat(priceEl.toFixed(2) * quantity);
-                taxes = total * self.taxesRate;
-                subtotal = total + taxes;
-                taxes = taxes.toFixed(2);
-                subtotal = subtotal.toFixed(2);
-
-                $taxesContainer.text(taxes);
-                $subtotalContainer.text(subtotal);
-
-                $('.newSelectList').remove();
-
-                if ($trEl.find('.jobs').length) {
-                    if ($trEl.find('a.jobs').attr('data-id') !== 'jobs') {
-                        self.addEditableClass($trEl);
-                    }
-                } else {
-                    self.addEditableClass($trEl);
-                }
-
-                if ($trEl.find('.taxCode').attr('data-tax')) {
-                    self.recalculateTaxes($trEl);
-                }
-
-                self.removeDisabled();
-                self.recalculateDiscount();
-            });
-        },
-
-        isNaN: function (val) {
-            return isNaN(val) ? 0 : val;
-        },
-
-        quantityRetriver: function ($parent) {
-            var selectedProduct = this.products || new Backbone.Collection();
-            var id;
-            var quantity;
-
-            $parent = $parent.closest('tr');
-            id = $parent.attr('data-id');
-
-            selectedProduct = selectedProduct.get(id) || null;
-
-            if (selectedProduct && selectedProduct.get('name') === CONSTANTS.IT_SERVICES) {
-                quantity = 1;
-            } else {
-                quantity = $parent.find('#quantity').val() || $parent.find('td[data-name="quantity"]').text();
-                //quantity = $.trim($parent.find('[data-name="quantity"]').text());
-                quantity = parseInt(quantity);
-            }
-
-            quantity = this.isNaN(quantity);
-
-            return quantity;
-        },
-
-        priceQtyRetriver: function ($parent) {
-            var selectedProduct = this.products || new Backbone.Collection();
-            var id;
-            var priceQty;
-
-            $parent = $parent.closest('tr');
-            id = $parent.attr('data-id');
-
-            selectedProduct = selectedProduct.get(id) || null;
-
-            if (selectedProduct && selectedProduct.get('name') === CONSTANTS.IT_SERVICES) {
-                quantity = 1;
-            } else {
-                priceQty = $parent.find('#priceQty').val() || $parent.find('td[data-name="priceQty"]').text();
-            }
-
-            priceQty = this.isNaN(priceQty);
-
-            return priceQty;
-        },
-
-        recalculateTaxes: function ($parent) {
-            var quantity = this.quantityRetriver($parent);
-            var total;
-            var cost;
-            var priceQty;
-            var taxes;
-            var subtotal;
-            var taxesRate = parseFloat($parent.find('.current-selected.taxCode').attr('data-tax')) || 0;
-            var taxContainer = $parent.find('.taxes .sum').length ? $parent.find('.taxes .sum') : $parent.find('[data-name="taxes"] .sum');
-
-            $parent = $parent.closest('tr');
-
-            cost = $parent.find('[data-name="price"] input').val() || $parent.find('[data-name="price"]').text();
-            cost = parseFloat(helpers.spaceReplacer(cost)) || 0;
-            priceQty = $parent.find('#priceQty').val() || $parent.find('td[data-name="priceQty"]').text();
-            if(priceQty != 0) {
-                total = cost * priceQty;
-            }else{
-                total = 0;
-            }
-            taxes = total * taxesRate;
-            subtotal = total;
-
-            taxes = taxes.toFixed(2);
-            taxContainer.text(helpers.currencySplitter(taxes));
-
-            subtotal = subtotal.toFixed(2);
-            $parent.find('.subtotal .sum').text(helpers.currencySplitter(subtotal));
-
-            this.recalculateDiscount(null);
-            // this.calculateTotal();
-        },
-
-        recalculateDiscount: function (e) {
-            var $target = e ? $(e.target) : this.$el.find('#discount');
-            var parentTr = $target.closest('tr');
-            var quantity = parseInt($target.val(), 10) || 0;
-            var cost = parseFloat(helpers.spaceReplacer(this.$el.find('#totalUntaxes').text()));
-            var discount = quantity;
-            discount = discount.toFixed(2);
-
-            parentTr.find('#discountSum').text(helpers.currencySplitter(discount));
-
-            this.calculateTotal(discount);
-        },
-
-        calculateTotal: function (discount) {
-            var thisEl = this.$el;
-
-            var totalUntaxContainer = thisEl.find('#totalUntaxes');
-            var taxesContainer = thisEl.find('#taxes');
-            var totalContainer = thisEl.find('#totalAmount');
-            var balanceContainer = thisEl.find('#balance');
-            var shippingContainer = thisEl.find('#shippingExpenses');
-            var resultForCalculate = thisEl.find('tr.productItem');
-
-            var totalUntax = 0;
-            var totalEls;
-            var $currentEl;
-            var quantity;
-            var priceQty;
-            var cost;
-            var balance;
-            var taxes;
-            var total;
-            var date;
-            var dates = [];
-            var i;
-            var taxesTotal = 0;
-            var totalShippment = 0;
-            var tax;
-
-            resultForCalculate.push(thisEl.find('#shippingRow'));
-
-            totalEls = resultForCalculate.length;
-
-            if (totalEls) {
-                for (i = totalEls - 1; i >= 0; i--) {
-                    $currentEl = $(resultForCalculate[i]);
-                    //  quantity = $currentEl.find('[data-name="quantity"]').text();
-                    cost = $currentEl.find('[data-name="price"] input').val() || $currentEl.find('[data-name="price"]').text() || '0';
-                    quantity = this.quantityRetriver($currentEl);
-                    priceQty = this.priceQtyRetriver($currentEl);
-                    cost = helpers.spaceReplacer(cost);
-                    cost = parseFloat(cost) || 0;
-                    if(priceQty != 0) {
-                        cost = cost * priceQty;
-                    }else{
-                        cost = 0;
-                    }
-                    tax = parseFloat(helpers.spaceReplacer($currentEl.find('.taxes .sum').text() || $currentEl.find('[data-name="taxes"] .sum').text())) || 0;
-                    taxesTotal += tax;
-                    totalUntax += cost;
-                    date = $currentEl.find('.datepicker').text();
-                    dates.push(date);
-
-                    if ($currentEl.attr('id') === 'shippingRow') {
-                        totalShippment = cost;
-                    }
-                }
-            }
-
-            totalUntax = (totalUntax - totalShippment).toFixed(2);
-            totalUntaxContainer.text(helpers.currencySplitter(totalUntax));
-            totalUntax = parseFloat(helpers.spaceReplacer(totalUntax)) + totalShippment;
-
-            totalShippment = totalShippment.toFixed(2);
-            shippingContainer.text(helpers.currencySplitter(totalShippment));
-
-            taxes = taxesTotal;
-            taxes = taxes.toFixed(2);
-            taxesContainer.text(helpers.currencySplitter(taxes));
-            taxes = parseFloat(helpers.spaceReplacer(taxes));
-
-            total = totalUntax + taxes;
-            if (discount) {
-                total = total - discount;
-            }
-
-            balance = total - (this.paid || 0);
-            total = total.toFixed(2);
-            balance = balance.toFixed(2);
-
-            totalContainer.text(helpers.currencySplitter(total));
-
-            balanceContainer.text(helpers.currencySplitter(balance));
-
-            date = helpers.minFromDates(dates);
-            thisEl.find('#minScheduleDate span').text(date);
-
-            if (parseFloat(discount)) {
-                if (parseFloat(total) < 0) {
-                    discount = parseFloat(discount) + parseFloat(total);
-
-                    this.$el.find('#discount').val(discount.toFixed(2));
-
-                    this.recalculateDiscount(null);
-                }
-            }
-        },
-
-        nextSelect: function (e) {
-            this.showProductsSelect(e, false, true);
-        },
-
-        prevSelect: function (e) {
-            this.showProductsSelect(e, true, false);
-        },
-
-        removeEditableCass: function ($tr) {
-            $tr.find('input').attr('readonly', true);
-            $tr.find('textarea').attr('readonly', true);
-        },
-
-        addEditableClass: function ($tr) {
-            $tr.find('input').attr('readonly', false);
-            $tr.find('textarea').attr('readonly', false);
-        },
-
-        /*populateTaxCodes: function (taxesData) {
-         var $thisEl = this.$el;
-         var selectedTaxIds;
-         var $selectedTaxes;
-         var $taxContainers;
-         var $taxContainer
-
-         $taxContainers = $thisEl.find('.taxesList');
-
-         _.each($taxContainers, function (taxContainer) {
-         $taxContainer = $(taxContainer);
-         $selectedTaxes = $taxContainer.closest('.taxCodeLine').find('.taxLines');
-
-         selectedTaxIds = _.map($selectedTaxes, function (tax) {
-         return $(tax).data('code');
-         });
-
-         _.each(taxesData, function (tax) {
-         if (selectedTaxIds.indexOf(tax._id) >= 0) {
-         $taxContainer.append('<li><label class="_customCHeckbox"><input checked="checked" type="checkbox" class="checkbox tax" data-rate="' + tax.rate + ' " data-value="' + tax.name + '" data-id="' + tax._id + '"> <span></span></label>' + tax.name + '</li>');
-         } else {
-         $taxContainer.append('<li><label class="_customCHeckbox"><input type="checkbox" class="checkbox tax" data-rate="' + tax.rate + ' " data-value="' + tax.name + '" data-id="' + tax._id + '"> <span></span></label>' + tax.name + '</li>');
-         }
-         });
-
-         $taxContainer.hide();
-         });
-         },
-
-         onClickTaxesList: function (e) {
-         var $target = $(e.target);
-         var $thisEl = this.$el;
-         var $taxContainer;
-         var $taxList;
-
-         e.preventDefault();
-
-         $thisEl.find('.taxesList').hide();
-         $taxContainer = $target.closest('.taxCodeLine');
-         $taxList = $taxContainer.find('.taxesList');
-
-         $taxList.show();
-         },
-
-         onClickTaxesLine: function (e) {
-         var $thisEl = this.$el;
-         var $target = $(e.target);
-         var rate = $target.data('rate');
-         var $currentRow;
-
-
-         },*/
-
-        removeDisabled: function () {
-            $('.discountPercentage').prop('disabled', false);
-        },
-
-        catchPrices: function(){
-            var data = custom.retriveFromCash('Purchaseprice')
-            var products = data.products;
-            var date = data.date;
-            
-            var self = this;
-            var $thisEl = this.$el;
-            var $table = $thisEl.find('#productList');
-            var $products;
-            var subtotal = 0;
-            $products = $table.find('tr.productItem');
-            products.forEach(function (product) {   
-                $.each($products, function () {
-                    var id = $(this).find('[data-name="productName"] div a').attr('data-id');
-                    var quantity = $(this).find('#quantity').val() || $(this).find('td[data-name="quantity"]').text();
-                    var priceQty = $(this).find('#priceQty').val() || $(this).find('td[data-name="priceQty"]').text();
-                    var total;
-                    if(id == product.product._id){
-                        var price = 0;
-                        if(product.price1 && product.qty1){
-                            price += product.price1;
-                        }
-                        if(product.price2 && product.qty2){
-                            price += product.price2;
-                        }
-                        if(product.price3 && product.qty3){
-                            price += product.price3;
-                        }
-                        if(product.price4 && product.qty4){
-                            price += product.price4;
-                        }
-                        if(product.price5 && product.qty5){
-                            price += product.price5;
-                        }
-                        if(product.average){
-                            price += product.average;
-                        }
-                        if(priceQty != 0) {
-                            total = price * priceQty;
-                        }else{
-                            total = 0;
-                        }
-                        subtotal += total;
-                        $(this).find('[data-name="price"] div #editInput').val(price/1000);
-                        $(this).find('[data-name="subtotal"] div .sum').text((total/1000).toFixed(2));
-                    }
-                   
-                });
-            });
-            $thisEl.find('#totalAmount').text((subtotal/1000).toFixed(2));
-
-        },
-
-        render: function (options) {
-            var productsContainer;
-            var totalAmountContainer;
-            var $thisEl = this.$el;
-            var model = this.parentModel ? this.parentModel.toJSON() : options ? options.model : '';
-            var self = this;
-            var products;
-            var currency;
-            var channel;
-            var templ;
-            var shipping;
-
-            this.$dialogContainer = $('#dialogContainer').html() ? $('#dialogContainer') : $('#formContent');
-
-            populate.get('#accountDd', '/chartOfAccount/getForDd', {}, 'name', this, true, true);
-            populate.get('#shippingDd', '/shippingMethod/getForDd', {}, 'name', this, false, true);
-
-            if (model) {
-                products = model.products;
-                currency = model.currency;
-                channel = model.channel;
-                shipping = model.sourceDocument && model.sourceDocument.shippingMethod ? model.sourceDocument.shippingMethod : model.shippingMethod;
-
-                templ = _.template(ProductItemsEditList);
-
-                $thisEl.html(templ({
-                    model      : model,
-                    forSales   : self.forSales,
-                    expense    : this.expense,
-                    notEditable: this.notEditable
-                }));
-
-                if (products) {
-                    productsContainer = $thisEl.find('#productList');
-                    productsContainer.append(_.template(ItemsEditList, {
-                        products        : products,
-                        shippingMethod  : shipping,
-                        notEditable     : this.notEditable,
-                        availableVisible: this.availableVisible,
-                        forSales        : self.forSales,
-                        currencySplitter: helpers.currencySplitter,
-                        currency        : currency,
-                        quotations      : self.quotations,
-                        expense         : this.expense,
-                        channel         : channel
-                    }));
-                    totalAmountContainer = $thisEl.find('#totalAmountContainer');
-                    totalAmountContainer.append(_.template(totalAmount, {
-                        model           : model,
-                        forSales        : self.forSales,
-                        balanceVisible  : this.visible,
-                        discountVisible : this.discountVisible,
-                        notEditable     : this.notEditable,
-                        currencySplitter: helpers.currencySplitter
-                    }));
-                }
-            } else {
-                this.$el.html(this.template({
-                    forSales   : self.forSales,
-                    writeOff   : self.writeOff,
-                    expense    : this.expense,
-                    notEditable: this.notEditable
-                }));
-
-                totalAmountContainer = $thisEl.find('#totalAmountContainer');
-                totalAmountContainer.append(_.template(totalAmount, {
-                    model           : null,
-                    forSales        : self.forSales,
-                    balanceVisible  : this.visible,
-                    discountVisible : this.discountVisible,
-                    notEditable     : false,
-                    currencySplitter: helpers.currencySplitter,
-                    currencyClass   : helpers.currencyClass
-                }));
-
-            }
-
-            return this;
-        }
-    });
-
-    return ProductItemTemplate;
-});
+define([
+    'Backbone',
+    'jQuery',
+    'Underscore',
+    'text!templates/Products/orderRows/ProductItems.html',
+    'text!templates/Products/orderRows/ExpenseInputContent.html',
+    'text!templates/Products/orderRows/ProductInputContent.html',
+    'text!templates/Products/orderRows/ProductItemsEditList.html',
+    'text!templates/Products/orderRows/ItemsEditList.html',
+    'text!templates/Products/orderRows/TotalAmount.html',
+    'text!templates/Products/orderRows/ShippingTemplate.html',
+    'collections/Products/products',
+    'views/Projects/projectInfo/wTracks/generateWTrack',
+    'views/selectView/selectView',
+    'populate',
+    'helpers',
+    'dataService',
+    'constants',
+    'async',
+    'helpers/keyValidator',
+    'custom'
+], function (Backbone,
+             $,
+             _,
+             productItemTemplate,
+             ExpenseInputContent,
+             ProductInputContent,
+             ProductItemsEditList,
+             ItemsEditList,
+             totalAmount,
+             ShippingTemplate,
+             ProductCollection,
+             GenerateWTrack,
+             SelectView,
+             populate,
+             helpers,
+             dataService,
+             CONSTANTS,
+             async,
+             keyValidator,
+             custom) {
+    'use strict';
+    var ProductItemTemplate = Backbone.View.extend({
+
+        events: {
+            'click .addProductItem a'                                                 : 'getProducts',
+            'click #selectShippingMethod:not(.disabled)'                              : 'addShipping',
+            'click #shippingRow .removeShipping'                                      : 'removeShipping',
+            //'click :not(.newSelectList)'                                              : 'closeSelect',
+            'click .newSelectList li:not(.miniStylePagination, #createNewEl)'         : 'chooseOption',
+            'click .newSelectList li.miniStylePagination'                             : 'notHide',
+            'click .newSelectList li.miniStylePagination .next:not(.disabled)'        : 'nextSelect',
+            'click .newSelectList li.miniStylePagination .prev:not(.disabled)'        : 'prevSelect',
+            'click .current-selected.productsDd'                                      : 'showProductsSelect',
+            'click .current-selected.accountDd'                                       : 'showProductsSelect',
+            'click .current-selected.taxCode'                                         : 'showProductsSelect',
+            'mouseenter .editable:not(.quickEdit), .editable .no-long:not(.quickEdit)': 'quickEdit',
+            'mouseleave .editable'                                                    : 'removeEdit',
+            'click #cancelSpan'                                                       : 'cancelClick',
+            'click #saveSpan'                                                         : 'saveClick',
+            'click #editSpan'                                                         : 'editClick',
+            'click .removeProduct'                                                    : 'deleteProduct',
+            'click .removeJob'                                                        : 'deleteRow',
+            'keyup td[data-name=price],td[data-name=quantity],td[data-name=priceQty] input'                  : 'priceChange',
+            // 'keyup .discountPercentage'                                               : 'discountChange',
+            'keypress  .forNum'                                                       : 'keypressHandler',
+            'keyup #discount'                                                         : 'recalculateDiscount',
+            'click .productItem'                                                      : 'renderMessage',
+            'click li#createNewEl'                                                    : 'createNewElement'
+        },
+
+        createNewElement: function (e) {
+            var target = $(e.target);
+            var type = target.attr('data-level');
+
+            Backbone.history.fragment = '';
+            Backbone.history.navigate('#easyErp/Products', {trigger: true});
+        },
+
+        template: _.template(productItemTemplate),
+
+        initialize: function (options) {
+            var products;
+
+            options = options || Object.create(null);
+
+            this.responseObj = {};
+            this.taxesRate = 0;
+            this.availableVisible = true;
+
+            if (options) {
+                this.parentModel = options.parentModel;
+                this.projectModel = options.projectModel;
+                this.wTrackCollection = options.wTrackCollection;
+                this.availableVisible = options.availableVisible;
+                this.createJob = options.createJob;
+                this.notEditable = options.notEditable;
+                this.discountVisible = options.discountVisible;
+                this.deletedProducts = options.deletedProducts;
+
+                this.forSales = options.forSales;
+
+                delete options.projectModel;
+                delete options.parentModel;
+                delete options.wTrackCollection;
+                delete options.createJob;
+                delete options.visible;
+                delete options.forSales;
+                delete options.notEditable;
+                delete options.discountVisible;
+            }
+
+            if (this.parentModel) {
+                this.forSales = this.parentModel.get('forSales');
+            }
+
+            if (options && options.balanceVisible) {
+                this.visible = options.balanceVisible;
+            }
+            if (options.writeOff) {
+                this.writeOff = options.writeOff;
+            }
+
+            if (options && options.quotations) {
+                this.quotations = options.quotations;
+            } else {
+                this.quotations = false;
+            }
+
+            this.expense = options.expense;
+
+            this.notPayed = options.notPayed;
+
+            this.project = options.project;
+
+            options.projection = {
+                name    : 1,
+                info    : 1,
+                variants: 1
+            };
+            this.responseObj = options.responseObj || {};
+
+            products = new ProductCollection(options);
+            products.bind('reset', function () {
+                this.products = products;
+                this.responseObj['#productsDd'] = products.toJSON();
+                this.filterProductsForDD();
+            }, this);
+
+            this.priceChange = _.debounce(this.priceChange, 250);
+        },
+
+        closeSelect: function (e) {
+            $('.newSelectList').remove();
+        },
+
+        renderMessage: function (e) {
+            var $target = $(e.target);
+            var $tr = $target.closest('tr');
+            var productOrJob = 'product';
+
+            if (this.expense) {
+                return false;
+            }
+
+            if ($target.hasClass('current-selected') || $target.hasClass('productDescr') || $target.closest('ul').length) {
+                return false;
+            }
+
+            if ($tr.attr('data-error') || ($tr.find('a.jobs').attr('data-id') === 'jobs')) {
+                return App.render({
+                    type   : 'error',
+                    message: 'Please, choose ' + productOrJob + ' first.'
+                });
+            }
+        },
+
+        generateJob: function () {
+            var self = this;
+            var model = this.projectModel;
+            var $projectsDdContainer = this.$dialogContainer.find('#projectDd'); // this.$projectsDdContainer created in render block
+            var projectId = $projectsDdContainer.attr('data-id');
+
+            if (!model) {
+                $projectsDdContainer.css('color', 'red');
+
+                App.render({
+                    type   : 'error',
+                    message: CONSTANTS.SELECTP_ROJECT
+                });
+            }
+
+            if (projectId === model._id) {
+                if (this.generatedView) {
+                    this.generatedView.undelegateEvents();
+                }
+
+                this.generatedView = new GenerateWTrack({
+                    model               : this.projectModel,
+                    wTrackCollection    : this.wTrackCollection,
+                    createJob           : true,
+                    forQuotationGenerate: true,
+                    quotationDialog     : this
+                });
+            } else {
+                dataService.getData(CONSTANTS.URLS.PROJECTS_GET_FOR_WTRACK, {_id: projectId}, function (project) {
+                    self.projectModel = project && project.data ? project.data[0] : {};
+
+                    if (self.generatedView) {
+                        self.generatedView.undelegateEvents();
+                    }
+
+                    self.generatedView = new GenerateWTrack({
+                        model               : self.projectModel,
+                        wTrackCollection    : self.wTrackCollection,
+                        createJob           : true,
+                        forQuotationGenerate: true,
+                        quotationDialog     : self
+                    });
+                });
+            }
+
+            return false;
+        },
+
+        deleteRow: function (e) {
+            var target = $(e.target);
+            var tr = target.closest('tr');
+            var trNext = tr.next();
+            var jobId = tr.attr('data-id');
+            var exJob = _.findWhere(this.responseObj['#jobs'], {_id: jobId});
+
+            e.stopPropagation();
+            e.preventDefault();
+
+            if (this.responseObj['#jobs']) {
+                this.responseObj['#jobs'].splice(_.indexOf(this.responseObj['#jobs'], exJob), 1);
+            }
+
+            tr.remove();
+            trNext.remove();
+
+            this.recalculateDiscount();
+            // this.calculateTotal();
+        },
+
+        deleteProduct: function (e) {
+            var target = $(e.target);
+            var tr = target.closest('.info');
+            var trNext = tr.prev('.productItem');
+            var productId = tr.attr('data-id');
+
+            e.stopPropagation();
+            e.preventDefault();
+
+            tr.remove();
+            trNext.remove();
+
+            this.deletedProducts.push(productId);
+        },
+
+        generatedWtracks: function () {
+            var tr = this.$el.find('tr[data-error="true"]');
+            var aEl = tr.find('a[data-id="jobs"]');
+
+            // aEl.click();
+        },
+
+        keypressHandler: function (e) {
+
+            if ($(e.target).closest('input').hasClass('quantity')) {
+                return keyValidator(e);
+            }
+            
+            return keyValidator(e, true);
+        },
+
+        checkForQuickEdit: function (el) {
+            var tr = el.closest('tr');
+            var quickEditing = tr.find('.quickEdit');
+
+            return !quickEditing.length;
+        },
+
+        removeShipping: function (e) {
+            var target = $(e.target);
+            var $parrent = target.closest('tbody');
+
+            $parrent.find('#shippingRow').remove();
+            this.$el.find('#selectShippingMethod').removeClass('disabled');
+
+            this.recalculateTaxes();
+        },
+
+        addShipping: function (e) {
+            var self = this;
+            var target = $(e.target);
+            var $parrent = this.$el.find('#productList');
+            var $parrentRow = $parrent.find('.info').last();
+            var rowId = $parrentRow.attr('data-id');
+            var templ = _.template(ShippingTemplate);
+            var $trEll = $parrent.find('tr.info');
+
+            e.stopPropagation();
+            e.preventDefault();
+
+            if (!(this.$el.find('#shippingRow').length)) {
+                if (!$trEll.length) {
+                    $parrent.prepend(templ({
+                        forSales: self.forSales
+                    }));
+                } else {
+                    $($trEll[$trEll.length - 1]).after(templ({
+                        forSales: self.forSales
+                    }));
+                }
+
+                this.$el.find('#selectShippingMethod').addClass('disabled');
+            }
+
+        },
+
+        getProducts: function (e) {
+            var self = this;
+            var target = $(e.target);
+            var $parrent = target.closest('tbody');
+            var $parrentRow = $parrent.find('.info').last();
+            var rowId = $parrentRow.attr('data-id');
+            var hasError = $parrentRow.attr('data-error') === 'true';
+            var $trEll = $parrent.find('tr.info');
+            var products = this.products ? this.products.toJSON() : [];
+            var templ = _.template(ProductInputContent);
+            var curSymbol;
+            var warehouse;
+            var account;
+            var accountObj;
+            var defaultTax;
+
+            e.preventDefault();
+            e.stopPropagation();
+
+            curSymbol = this.$el.closest('form').find('#currencyDd').attr('data-symbol');
+
+            if (rowId === undefined || /* rowId !== 'false'*/ !hasError) {
+                if (!$trEll.length) {
+                    if (this.expense) {
+                        templ = _.template(ExpenseInputContent);
+                    }
+                    $parrent.prepend(templ({
+                        forSales  : self.forSales,
+                        products  : products,
+                        curSymbol : curSymbol,
+                        writeOff  : self.writeOff,
+                        quotations: self.quotations,
+                        project   : self.project
+                    }));
+                } else {
+
+                    if (this.expense) {
+                        templ = _.template(ExpenseInputContent);
+                    }
+
+                    $($trEll[$trEll.length - 1]).after(templ({
+                        forSales  : self.forSales,
+                        products  : products,
+                        curSymbol : curSymbol,
+                        writeOff  : self.writeOff,
+                        quotations: self.quotations,
+                        project   : self.project
+                    }));
+                }
+
+                warehouse = _.findWhere(this.responseObj['#warehouseDd'], {_id: $('#warehouseDd').attr('data-id')});
+                defaultTax = _.findWhere(this.responseObj['#taxCode'], {type: true});
+                account = warehouse ? warehouse.account : null;
+                accountObj = _.findWhere(this.responseObj['#account'], {_id: account});
+
+                if (accountObj && accountObj._id) {
+                    this.$el.find('.productItem').each(function () {
+                        $(this).find('.accountDd').text(accountObj.name).attr('data-id', accountObj._id);
+                    });
+                }
+
+                if (defaultTax && defaultTax._id) {
+                    $parrent.find('tr.productItem').last().find('.current-selected.taxCode').text(defaultTax.name).attr('data-id', defaultTax._id).attr('data-tax', defaultTax.level);
+                }
+
+                this.removeEditableCass($parrent.find('tr').last());
+
+            }
+
+
+            $('.newSelectList').remove();
+
+            return false;
+        },
+
+        filterProductsForDD: function () {
+            var id = '.productsDd';
+            var self = this;
+            var products = this.products.toJSON();
+
+            this.responseObj[id] = products;
+
+            /*this.responseObj[id] = [];
+             this.responseObj[id] = this.responseObj[id].concat(_.map(products, function (item) {
+             return {_id: item._id, name: item.name, level: item.projectShortDesc || ''};
+             }));*/
+        },
+
+        discountChange: function (e) {
+            var $targetEl = $(e.target);
+
+            if ($targetEl.val() > 100) {
+                $targetEl.val(100);
+            }
+        },
+
+        priceChange: function (e) {
+            var $targetEl = $(e.target);
+            var parent = $targetEl.closest('tr');
+            var inputEl = $targetEl.closest('input');
+            var val;
+
+            if (!inputEl.length) {
+                inputEl = parent.find('textarea');
+            }
+            val = inputEl.val();
+
+            e.preventDefault();
+
+            if (!val.length) {
+                val = '0';
+                inputEl.val(val);
+            }
+
+            parent.addClass('changedPrice');
+
+            this.recalculateDiscount(e);
+            this.recalculateTaxes(parent);
+        },
+
+        showProductsSelect: function (e) {
+            var $target = $(e.target);
+
+            e.stopPropagation();
+
+            if ($target.attr('id') === 'selectInput') {
+                return false;
+            }
+
+            if (this.selectView) {
+                this.selectView.remove();
+            }
+
+            this.selectView = new SelectView({
+                e          : e,
+                responseObj: this.responseObj
+            });
+
+            $target.append(this.selectView.render().el);
+
+            return false;
+        },
+
+        chooseOption: function (e) {
+            var self = this;
+            var $target = $(e.target).closest('li');
+            var $parrent = $target.parents('td');
+            var $trEl = $target.parents('tr.productItem');
+            var $infoTr = $trEl.next();
+            var $SKU = $target.find('b');
+            var $variants = $target.find('span.variants');
+            var $quantityContainer = $trEl.find('[data-name="quantity"]');
+            var $descriptionContainer = $trEl.find('.productDescr');
+            var $descriptionDiv = $infoTr.find('.fullfilledHolder');
+            var $taxesContainer = $trEl.find('[data-name="taxes"] .sum');
+            var $subtotalContainer = $trEl.find('[data-name="subtotal"] .sum');
+            var $costContainer = $trEl.find('[data-name="cost"] .sum');
+            var isAccount = !!$parrent.hasClass('account') || !!$parrent.hasClass('taxCodeLine');
+            var $quantity = $quantityContainer.find('input');
+            var $parrents = $trEl.find('td');
+            var _id = $target.attr('id');
+            var quantity = $quantity.val() || 1;
+            var salePrice = 0;
+            var description;
+            var model;
+            var taxes;
+            var total;
+            var subtotal;
+            var selectedProduct;
+            var jobId;
+            var currentJob;
+            var product = $trEl.find('.productsDd');
+            var currency = {};
+            var priceList = this.$dialogContainer.find('#priceList').attr('data-id');
+            var costList = this.$dialogContainer.find('#costList').attr('data-id');
+            var warehouse = this.$dialogContainer.find('#warehouseDd').attr('data-id');
+            var parallelTasks;
+            var variant;
+            var taxCode;
+
+            if (_id === 'createJob') {
+                return self.generateJob();
+            }
+
+            if ($SKU.length) {
+                variant = $variants.length ? (' ' + $variants.text()) : '';
+                $parrent.find('.current-selected').text($SKU.text()).attr('data-id', _id);
+                $descriptionContainer.val($target.find('span.name').text() + variant);
+            } else {
+                $parrent.find('.current-selected').text($target.text()).attr('data-id', _id);
+            }
+
+            if ($parrent.hasClass('taxCodeLine')) {
+                taxCode = _.findWhere(this.responseObj['#taxCode'], {_id: $target.attr('id')});
+
+                if (taxCode && taxCode._id) {
+                    $parrent.find('.current-selected').attr('data-tax', taxCode.level);
+                }
+
+                this.recalculateTaxes($parrent.closest('tr'));
+            }
+
+            if (isAccount) {
+                return false;
+            }
+
+            function getAvailability(pCb) {
+                dataService.getData('/products/productAvalaible', {
+                    product  : _id,
+                    warehouse: warehouse
+                }, function (data) {
+                    var itemsStock = data.onHand ? 'green' : 'red';
+                    var cost;
+                    $descriptionDiv.removeClass('green red');
+
+                    if (self.project && data.cost) {
+                        cost = data.cost / 100;
+                    }
+
+                    $descriptionDiv.addClass(itemsStock);
+                    $trEl.attr('data-hand', data.onHand);
+                    $descriptionDiv.find('.fullfilledInfo').html('<div><span class="">' + (data.inStock || 0) + ' in Stock, ' + (data.onHand || 0) + ' on Hand </span></div>');
+                    pCb(null, cost);
+                });
+            }
+
+            function getPrices(pCb) {
+                dataService.getData('/priceList/getPrices', {
+                    product  : _id,
+                    costList : costList,
+                    priceList: priceList,
+                    quantity : quantity
+                }, function (data) {
+                    pCb(null, data);
+                });
+            }
+
+            parallelTasks = [getPrices];
+
+            if (this.availableVisible) {
+                parallelTasks.push(getAvailability);
+            }
+
+            async.parallel(parallelTasks, function (err, resp) {
+                var data = resp[0];
+                var cost = resp[1];
+
+                var priceEl = cost || data.price || 0;
+
+                $quantity.val(quantity);
+                $trEl.attr('data-error', null);
+                $trEl.find('#editInput').val(priceEl.toFixed(2));
+
+                currency._id = $('#currencyDd').attr('data-id');
+
+                total = parseFloat(priceEl.toFixed(2) * quantity);
+                taxes = total * self.taxesRate;
+                subtotal = total + taxes;
+                taxes = taxes.toFixed(2);
+                subtotal = subtotal.toFixed(2);
+
+                $taxesContainer.text(taxes);
+                $subtotalContainer.text(subtotal);
+
+                $('.newSelectList').remove();
+
+                if ($trEl.find('.jobs').length) {
+                    if ($trEl.find('a.jobs').attr('data-id') !== 'jobs') {
+                        self.addEditableClass($trEl);
+                    }
+                } else {
+                    self.addEditableClass($trEl);
+                }
+
+                if ($trEl.find('.taxCode').attr('data-tax')) {
+                    self.recalculateTaxes($trEl);
+                }
+
+                self.removeDisabled();
+                self.recalculateDiscount();
+            });
+        },
+
+        isNaN: function (val) {
+            return isNaN(val) ? 0 : val;
+        },
+
+        quantityRetriver: function ($parent) {
+            var selectedProduct = this.products || new Backbone.Collection();
+            var id;
+            var quantity;
+
+            $parent = $parent.closest('tr');
+            id = $parent.attr('data-id');
+
+            selectedProduct = selectedProduct.get(id) || null;
+
+            if (selectedProduct && selectedProduct.get('name') === CONSTANTS.IT_SERVICES) {
+                quantity = 1;
+            } else {
+                quantity = $parent.find('#quantity').val() || $parent.find('td[data-name="quantity"]').text();
+                //quantity = $.trim($parent.find('[data-name="quantity"]').text());
+                quantity = parseInt(quantity);
+            }
+
+            quantity = this.isNaN(quantity);
+
+            return quantity;
+        },
+
+        priceQtyRetriver: function ($parent) {
+            var selectedProduct = this.products || new Backbone.Collection();
+            var id;
+            var priceQty;
+
+            $parent = $parent.closest('tr');
+            id = $parent.attr('data-id');
+
+            selectedProduct = selectedProduct.get(id) || null;
+
+            if (selectedProduct && selectedProduct.get('name') === CONSTANTS.IT_SERVICES) {
+                quantity = 1;
+            } else {
+                priceQty = $parent.find('#priceQty').val() || $parent.find('td[data-name="priceQty"]').text();
+            }
+
+            priceQty = this.isNaN(priceQty);
+
+            return priceQty;
+        },
+
+        recalculateTaxes: function ($parent) {
+            var quantity = this.quantityRetriver($parent);
+            var total;
+            var cost;
+            var priceQty;
+            var taxes;
+            var subtotal;
+            var taxesRate = parseFloat($parent.find('.current-selected.taxCode').attr('data-tax')) || 0;
+            var taxContainer = $parent.find('.taxes .sum').length ? $parent.find('.taxes .sum') : $parent.find('[data-name="taxes"] .sum');
+
+            $parent = $parent.closest('tr');
+
+            cost = $parent.find('[data-name="price"] input').val() || $parent.find('[data-name="price"]').text();
+            cost = parseFloat(helpers.spaceReplacer(cost)) || 0;
+            priceQty = $parent.find('#priceQty').val() || $parent.find('td[data-name="priceQty"]').text();
+            if(priceQty != 0) {
+                total = cost * priceQty;
+            }else{
+                total = 0;
+            }
+            taxes = total * taxesRate;
+            subtotal = total;
+
+            taxes = taxes.toFixed(2);
+            taxContainer.text(helpers.currencySplitter(taxes));
+
+            subtotal = subtotal.toFixed(2);
+            $parent.find('.subtotal .sum').text(helpers.currencySplitter(subtotal));
+
+            this.recalculateDiscount(null);
+            // this.calculateTotal();
+        },
+
+        recalculateDiscount: function (e) {
+            var $target = e ? $(e.target) : this.$el.find('#discount');
+            var parentTr = $target.closest('tr');
+            var quantity = parseInt($target.val(), 10) || 0;
+            var cost = parseFloat(helpers.spaceReplacer(this.$el.find('#totalUntaxes').text()));
+            var discount = quantity;
+            discount = discount.toFixed(2);
+
+            parentTr.find('#discountSum').text(helpers.currencySplitter(discount));
+
+            this.calculateTotal(discount);
+        },
+
+        calculateTotal: function (discount) {
+            var thisEl = this.$el;
+
+            var totalUntaxContainer = thisEl.find('#totalUntaxes');
+            var taxesContainer = thisEl.find('#taxes');
+            var totalContainer = thisEl.find('#totalAmount');
+            var balanceContainer = thisEl.find('#balance');
+            var shippingContainer = thisEl.find('#shippingExpenses');
+            var resultForCalculate = thisEl.find('tr.productItem');
+
+            var totalUntax = 0;
+            var totalEls;
+            var $currentEl;
+            var quantity;
+            var priceQty;
+            var cost;
+            var balance;
+            var taxes;
+            var total;
+            var date;
+            var dates = [];
+            var i;
+            var taxesTotal = 0;
+            var totalShippment = 0;
+            var tax;
+
+            resultForCalculate.push(thisEl.find('#shippingRow'));
+
+            totalEls = resultForCalculate.length;
+
+            if (totalEls) {
+                for (i = totalEls - 1; i >= 0; i--) {
+                    $currentEl = $(resultForCalculate[i]);
+                    //  quantity = $currentEl.find('[data-name="quantity"]').text();
+                    cost = $currentEl.find('[data-name="price"] input').val() || $currentEl.find('[data-name="price"]').text() || '0';
+                    quantity = this.quantityRetriver($currentEl);
+                    priceQty = this.priceQtyRetriver($currentEl);
+                    cost = helpers.spaceReplacer(cost);
+                    cost = parseFloat(cost) || 0;
+                    if(priceQty != 0) {
+                        cost = cost * priceQty;
+                    }else{
+                        cost = 0;
+                    }
+                    tax = parseFloat(helpers.spaceReplacer($currentEl.find('.taxes .sum').text() || $currentEl.find('[data-name="taxes"] .sum').text())) || 0;
+                    taxesTotal += tax;
+                    totalUntax += cost;
+                    date = $currentEl.find('.datepicker').text();
+                    dates.push(date);
+
+                    if ($currentEl.attr('id') === 'shippingRow') {
+                        totalShippment = cost;
+                    }
+                }
+            }
+
+            totalUntax = (totalUntax - totalShippment).toFixed(2);
+            totalUntaxContainer.text(helpers.currencySplitter(totalUntax));
+            totalUntax = parseFloat(helpers.spaceReplacer(totalUntax)) + totalShippment;
+
+            totalShippment = totalShippment.toFixed(2);
+            shippingContainer.text(helpers.currencySplitter(totalShippment));
+
+            taxes = taxesTotal;
+            taxes = taxes.toFixed(2);
+            taxesContainer.text(helpers.currencySplitter(taxes));
+            taxes = parseFloat(helpers.spaceReplacer(taxes));
+
+            total = totalUntax + taxes;
+            if (discount) {
+                total = total - discount;
+            }
+
+            balance = total - (this.paid || 0);
+            total = total.toFixed(2);
+            balance = balance.toFixed(2);
+
+            totalContainer.text(helpers.currencySplitter(total));
+
+            balanceContainer.text(helpers.currencySplitter(balance));
+
+            date = helpers.minFromDates(dates);
+            thisEl.find('#minScheduleDate span').text(date);
+
+            if (parseFloat(discount)) {
+                if (parseFloat(total) < 0) {
+                    discount = parseFloat(discount) + parseFloat(total);
+
+                    this.$el.find('#discount').val(discount.toFixed(2));
+
+                    this.recalculateDiscount(null);
+                }
+            }
+        },
+
+        nextSelect: function (e) {
+            this.showProductsSelect(e, false, true);
+        },
+
+        prevSelect: function (e) {
+            this.showProductsSelect(e, true, false);
+        },
+
+        removeEditableCass: function ($tr) {
+            $tr.find('input').attr('readonly', true);
+            $tr.find('textarea').attr('readonly', true);
+        },
+
+        addEditableClass: function ($tr) {
+            $tr.find('input').attr('readonly', false);
+            $tr.find('textarea').attr('readonly', false);
+        },
+
+        /*populateTaxCodes: function (taxesData) {
+         var $thisEl = this.$el;
+         var selectedTaxIds;
+         var $selectedTaxes;
+         var $taxContainers;
+         var $taxContainer
+
+         $taxContainers = $thisEl.find('.taxesList');
+
+         _.each($taxContainers, function (taxContainer) {
+         $taxContainer = $(taxContainer);
+         $selectedTaxes = $taxContainer.closest('.taxCodeLine').find('.taxLines');
+
+         selectedTaxIds = _.map($selectedTaxes, function (tax) {
+         return $(tax).data('code');
+         });
+
+         _.each(taxesData, function (tax) {
+         if (selectedTaxIds.indexOf(tax._id) >= 0) {
+         $taxContainer.append('<li><label class="_customCHeckbox"><input checked="checked" type="checkbox" class="checkbox tax" data-rate="' + tax.rate + ' " data-value="' + tax.name + '" data-id="' + tax._id + '"> <span></span></label>' + tax.name + '</li>');
+         } else {
+         $taxContainer.append('<li><label class="_customCHeckbox"><input type="checkbox" class="checkbox tax" data-rate="' + tax.rate + ' " data-value="' + tax.name + '" data-id="' + tax._id + '"> <span></span></label>' + tax.name + '</li>');
+         }
+         });
+
+         $taxContainer.hide();
+         });
+         },
+
+         onClickTaxesList: function (e) {
+         var $target = $(e.target);
+         var $thisEl = this.$el;
+         var $taxContainer;
+         var $taxList;
+
+         e.preventDefault();
+
+         $thisEl.find('.taxesList').hide();
+         $taxContainer = $target.closest('.taxCodeLine');
+         $taxList = $taxContainer.find('.taxesList');
+
+         $taxList.show();
+         },
+
+         onClickTaxesLine: function (e) {
+         var $thisEl = this.$el;
+         var $target = $(e.target);
+         var rate = $target.data('rate');
+         var $currentRow;
+
+
+         },*/
+
+        removeDisabled: function () {
+            $('.discountPercentage').prop('disabled', false);
+        },
+
+        render: function (options) {
+            var productsContainer;
+            var totalAmountContainer;
+            var $thisEl = this.$el;
+            var model = this.parentModel ? this.parentModel.toJSON() : options ? options.model : '';
+            var self = this;
+            var products;
+            var currency;
+            var channel;
+            var templ;
+            var shipping;
+
+            this.$dialogContainer = $('#dialogContainer').html() ? $('#dialogContainer') : $('#formContent');
+
+            populate.get('#accountDd', '/chartOfAccount/getForDd', {}, 'name', this, true, true);
+            populate.get('#shippingDd', '/shippingMethod/getForDd', {}, 'name', this, false, true);
+
+            if (model) {
+                products = model.products;
+                currency = model.currency;
+                channel = model.channel;
+                shipping = model.sourceDocument && model.sourceDocument.shippingMethod ? model.sourceDocument.shippingMethod : model.shippingMethod;
+
+                templ = _.template(ProductItemsEditList);
+
+                $thisEl.html(templ({
+                    model      : model,
+                    forSales   : self.forSales,
+                    expense    : this.expense,
+                    notEditable: this.notEditable
+                }));
+
+                if (products) {
+                    productsContainer = $thisEl.find('#productList');
+                    productsContainer.append(_.template(ItemsEditList, {
+                        products        : products,
+                        shippingMethod  : shipping,
+                        notEditable     : this.notEditable,
+                        availableVisible: this.availableVisible,
+                        forSales        : self.forSales,
+                        currencySplitter: helpers.currencySplitter,
+                        currency        : currency,
+                        quotations      : self.quotations,
+                        expense         : this.expense,
+                        channel         : channel
+                    }));
+                    totalAmountContainer = $thisEl.find('#totalAmountContainer');
+                    totalAmountContainer.append(_.template(totalAmount, {
+                        model           : model,
+                        forSales        : self.forSales,
+                        balanceVisible  : this.visible,
+                        discountVisible : this.discountVisible,
+                        notEditable     : this.notEditable,
+                        currencySplitter: helpers.currencySplitter
+                    }));
+                }
+            } else {
+                this.$el.html(this.template({
+                    forSales   : self.forSales,
+                    writeOff   : self.writeOff,
+                    expense    : this.expense,
+                    notEditable: this.notEditable
+                }));
+
+                totalAmountContainer = $thisEl.find('#totalAmountContainer');
+                totalAmountContainer.append(_.template(totalAmount, {
+                    model           : null,
+                    forSales        : self.forSales,
+                    balanceVisible  : this.visible,
+                    discountVisible : this.discountVisible,
+                    notEditable     : false,
+                    currencySplitter: helpers.currencySplitter,
+                    currencyClass   : helpers.currencyClass
+                }));
+
+            }
+
+            return this;
+        }
+    });
+
+    return ProductItemTemplate;
+});
diff --git a/byerp/public/js/views/aluorderApproval/listInfo/ListView.js b/byerp/public/js/views/aluorderApproval/listInfo/ListView.js
index d04ba04..557075b 100644
--- a/byerp/public/js/views/aluorderApproval/listInfo/ListView.js
+++ b/byerp/public/js/views/aluorderApproval/listInfo/ListView.js
@@ -11,6 +11,7 @@ define([
     'models/AluorderApprovalModel',
     'collections/aluorderApproval/filterCollection',
     'views/Filter/filterView',
+    'libs/jquery.freezeheader',
     'dataService',
     'common'
 ], function (Backbone, $, _, ListViewBase, paginationTemplate, listTemplate, CreateView, ListItemView, EditView, CurrentModel, ContentCollection, FilterView, dataService, common) {
@@ -181,7 +182,7 @@ define([
             });
             //itemView.bind('incomingStages', this.pushStages, this);
             $currentEl.append(itemView.render());
-
+            $('.stripedList').freezeHeader({'height':'640px'});
         }
 
     });
diff --git a/byerp/public/js/views/aluveneerOrders/listInfo/ListView.js b/byerp/public/js/views/aluveneerOrders/listInfo/ListView.js
index c2448d0..c96a55a 100644
--- a/byerp/public/js/views/aluveneerOrders/listInfo/ListView.js
+++ b/byerp/public/js/views/aluveneerOrders/listInfo/ListView.js
@@ -12,6 +12,7 @@ define([
     'models/AluveneerOrdersModel',
     'collections/aluveneerOrders/filterCollection',
     'views/Filter/filterView',
+    'libs/jquery.freezeheader',
     'dataService',
     'common'
 ], function (Backbone, $, _, ListViewBase, paginationTemplate, listTemplate, CreateView, ListItemView, EditView, UploadView, CurrentModel, ContentCollection, FilterView, dataService, common) {
@@ -138,7 +139,7 @@ define([
             });
             //itemView.bind('incomingStages', this.pushStages, this);
             $currentEl.append(itemView.render());
-
+            $('.stripedList').freezeHeader({'height':'640px'});
         }
 
     });
diff --git a/byerp/public/js/views/designRec/CreateView.js b/byerp/public/js/views/designRec/CreateView.js
index 808f942..7330e55 100644
--- a/byerp/public/js/views/designRec/CreateView.js
+++ b/byerp/public/js/views/designRec/CreateView.js
@@ -91,6 +91,7 @@ define([
             var isMonitoring = this.$el.find("[name='isMonitoring']:checked").attr('data-value');
             var employeeId = this.$el.find('#employeesDd').attr('data-id');
             var colorNumber = this.$el.find('#colorNumber').attr('data-id');
+            var isReview = this.$el.find("[name='isReview']:checked").attr('data-value');
 
             this.model.save(
                 {
@@ -103,7 +104,8 @@ define([
                     designer      : employeeId,
                     fileStatus    : '文件未上传',
                     orderStatus   : '需在2天内分配,否则将扣款',
-                    colorNumber   : colorNumber
+                    colorNumber   : colorNumber,
+                    isReview      : isReview
                 },
                 {
                     headers: {
diff --git a/byerp/public/js/views/designRec/EditView.js b/byerp/public/js/views/designRec/EditView.js
index 0995e13..d8a2873 100644
--- a/byerp/public/js/views/designRec/EditView.js
+++ b/byerp/public/js/views/designRec/EditView.js
@@ -65,6 +65,7 @@
             var isMonitoring = this.$el.find("[name='isMonitoring']:checked").attr('data-value');
             //var employeeId = this.$el.find('#employeesDd').attr('data-id');
             var colorNumber = this.$el.find('#colorNumber').attr('data-id');
+            var isReview = this.$el.find("[name='isReview']:checked").attr('data-value');
 
             var data = {
                 orderNumber   : orderNumber,
@@ -72,7 +73,8 @@
                 acreage       : acreage,
                 arrivalDate   : arrivalDate,
                 isMonitoring  : isMonitoring,
-                colorNumber   : colorNumber         
+                colorNumber   : colorNumber,
+                isReview      : isReview       
             };
 
             event.preventDefault();
diff --git a/byerp/public/js/views/goodsInNotes/CreateAllView.js b/byerp/public/js/views/goodsInNotes/CreateAllView.js
index 066ebb4..64376f3 100644
--- a/byerp/public/js/views/goodsInNotes/CreateAllView.js
+++ b/byerp/public/js/views/goodsInNotes/CreateAllView.js
@@ -93,14 +93,7 @@ define([
                 inputEl.val(diff);
             }
 
-            var taxes = parseFloat($parent.find('.current-selected.taxCode').attr('data-tax')) || 0;
-            var subtotal = $parent.find('[data-name="subTotal"] input').val() || $parent.find('[data-name="subTotal"]').text() || 0;
-            var quantity = $parent.find('[data-name="ordered"] input').val() || 0;
-            var selectedQuantity = $parent.find('#newShip').val() || 0;
-            var selectTotal = subtotal * selectedQuantity/quantity;
-            var taxesAccount = selectTotal/(1+taxes)*(taxes);
-            taxesAccount = taxesAccount.toFixed(2);
-            $parent.find('.taxesAccount').val(taxesAccount);
+            this.changeTax(e);
         },
 
         changeTax: function (e) {
@@ -108,7 +101,7 @@ define([
             var $parent = $targetEl.closest('tr');
             var inputEl = $targetEl.closest('input');
             var val;
-            var taxes = parseFloat($parent.find('.current-selected.taxCode').attr('data-tax')) || 0;
+            var taxes = parseFloat($parent.find('.current-selected.taxCode').attr('data-level')) || 0;
             var subtotal = $parent.find('[data-name="subTotal"] input').val() || $parent.find('[data-name="subTotal"]').text() || 0;
             var quantity = $parent.find('[data-name="ordered"] input').val() || 0;
             var selectedQuantity = $parent.find('#newShip').val() || 0;
@@ -252,7 +245,7 @@ define([
                 var taxCode = _.findWhere(this.responseObj['#taxCodeLine'], {_id: $target.attr('id')});
 
                 if (taxCode && taxCode._id) {
-                    $target.parents('td').find('#taxCodeLine').attr('data-tax', taxCode.rate);
+                    $target.parents('td').find('#taxCodeLine').attr('data-level', taxCode.rate);
                 }
 
                 this.changeTax(e);
@@ -342,10 +335,7 @@ define([
 
             populate.get('#warehouseDd', 'warehouse/getForDD', {}, 'name', this, false)
             populate.get('#shippingMethods', '/shippingMethod/getForDd', {}, 'name', this, false, false, shippingMethod);
-            dataService.getData('/taxSettings/getForDd', {}, function (taxCode) {
-                self.responseObj['#taxCodeLine'] = taxCode.data;
-                self.$el.find('#taxCodeLine').text(taxCode.data[0].name).attr('data-id', taxCode.data[0]._id);
-            });
+            populate.get('#taxCodeLine', '/taxSettings/getForDd', {}, 'name', this, false, false, '589894b749cd23e02ca7c323');
 
             this.delegateEvents(this.events);
 
diff --git a/byerp/public/js/views/goodsInNotes/CreateView.js b/byerp/public/js/views/goodsInNotes/CreateView.js
index 97c604a..1008c92 100644
--- a/byerp/public/js/views/goodsInNotes/CreateView.js
+++ b/byerp/public/js/views/goodsInNotes/CreateView.js
@@ -56,6 +56,14 @@ define([
             var diff = ordered - received;
             var inputEl = $targetEl.closest('input');
             var val;
+            var warehouse = this.$el.find('#warehouseDd').attr('data-id');
+
+            if(!warehouse){
+                return App.render({
+                    type   : 'error',
+                    message: "仓库不可为空！"
+                });
+            }
 
             if (!inputEl.length) {
                 inputEl = $parent.find('textarea');
@@ -140,6 +148,13 @@ define([
             var unit;
             var taxCode;
             var taxesAccount;
+
+            if (!warehouse) {
+                return App.render({
+                    type   : 'error',
+                    message: "仓库不可为空！"
+                });
+            }
             for (i = selectedLength - 1; i >= 0; i--) {
                 targetEl = $(selectedProducts[i]);
                 orderRowId = targetEl.attr('id');
@@ -182,13 +197,12 @@ define([
                         tax              : taxesAccount
                     });
                 }
-
             }
 
             if (!products.length) {
                 return App.render({
                     type   : 'error',
-                    message: 'No products for receive'
+                    message: '没有产品入库（未选择库位或数量均为0）'
                 });
             }
 
@@ -293,7 +307,9 @@ define([
             populate.get('#locationDd', 'warehouse/location/getForDd', {warehouse: warehouse}, 'name', this);
             populate.get('#shippingMethods', '/shippingMethod/getForDd', {}, 'name', this, false, false, shippingMethod);
             dataService.getData('/taxSettings/getForDd', {}, function (taxCode) {
-                self.responseObj['#taxCode'] = taxCode.data;
+                self.responseObj['#taxCodeLine'] = taxCode.data;
+                self.$el.find('.taxCode').text(taxCode.data[0].name).attr('data-id', taxCode.data[0]._id);
+                self.$el.find('.taxCode').attr('data-tax', taxCode.data[0].rate);
             });
 
             this.delegateEvents(this.events);
diff --git a/byerp/public/js/views/goodsInNotes/form/FormView.js b/byerp/public/js/views/goodsInNotes/form/FormView.js
index 63b4f47..980d1c1 100644
--- a/byerp/public/js/views/goodsInNotes/form/FormView.js
+++ b/byerp/public/js/views/goodsInNotes/form/FormView.js
@@ -82,6 +82,7 @@ define([
             'click .goodsInNew'         : 'goodsInNew',
             'keyup td[data-name=taxesAccount] input'           : 'taxesChange',
             'keyup td[data-name=quantity],td[data-name=unit],td[data-name=unitPrice] input'           : 'priceChange',
+            'click .weightAdjust'       : 'weightAdjust'
         },
 
         chooseOption: function (e) {
@@ -446,7 +447,6 @@ define([
                     subqty += quantity;
                     taxesTotal += tax;
                     totalUntax += cost;
-                    console.log(quantity,tax);
                 }
             }
             taxesContainer.text('总税额：'+taxesTotal);
@@ -458,7 +458,6 @@ define([
             var $targetEl = $(e.target);
             var $parent = $targetEl.closest('tr');
             var inputEl = $targetEl.closest('input');
-            var val;
             var quantity = $parent.find('[data-name="quantity"] input').val() || $parent.find('[data-name="quantity"]').text();
             var unit = $parent.find('[data-name="unit"] input').val() || $parent.find('[data-name="unit"]').text();
             var unitPrice = $parent.find('[data-name="unitPrice"] input').val() || $parent.find('[data-name="unitPrice"]').text();
@@ -468,13 +467,49 @@ define([
             this.taxesChange(e);
         },
 
+        weightAdjust: function(e) {
+            var self = this;
+            var $targetEl = $(e.target);
+            var $parent = $targetEl.closest('tr');
+            var inputEl = $targetEl.closest('input');
+            var adjustWeight = parseFloat(self.$el.find('#weightAdjust').val());
+            if(!adjustWeight){
+                return App.render({
+                    type   : 'error',
+                    message: '请先输入实际计价数量！'
+                });
+            }
+            var subweight = parseFloat(self.$el.find('[data-name="subweight"] a').text());
+            var rate = adjustWeight/subweight;
+            var subtaxes = 0;
+            var subcost = 0;
+            var $products = self.$el.find('tr.productItem');
+            $.each($products, function (i,j) {
+                var adjustUnit = 0;
+                var unit = $(j).find('.unit').val();
+                var quantity = $(j).find('.quantity').val();
+                var unitPrice = $(j).find('.price').val();
+                adjustUnit = unit * rate;
+                var subtotal = unitPrice*quantity*adjustUnit;
+                var taxes = parseFloat($(j).find('.taxCode').attr('data-tax')) || 0;
+                var taxesAccount = subtotal/(1+taxes)*(taxes);
+                subtaxes += taxesAccount;
+                subcost += subtotal;
+                $(j).find('.unit').val(adjustUnit);
+                $(j).find('.subtotal').val(subtotal.toFixed(2));
+                $(j).find('.taxesAccount').val(taxesAccount.toFixed(2));
+            });
+            self.$el.find('[data-name="subweight"] a').text(adjustWeight);
+            self.$el.find('[data-name="subtaxes"]').text('总税额：'+subtaxes.toFixed(2));
+            self.$el.find('[data-name="subcost"]').text('总计：'+subcost.toFixed(2));
+        },
+
         render: function () {
             var $thisEl = this.$el;
             var model = this.currentModel.toJSON();
             var formString;
             var template;
             var self = this;
-            console.log(model);
 
             if (model.date) {
                 model.date = moment(model.date).format('DD MMM, YYYY, H:mm');
diff --git a/byerp/public/js/views/goodsOutNotes/CreateView.js b/byerp/public/js/views/goodsOutNotes/CreateView.js
index 0f64a85..7a52d9d 100644
--- a/byerp/public/js/views/goodsOutNotes/CreateView.js
+++ b/byerp/public/js/views/goodsOutNotes/CreateView.js
@@ -15,8 +15,9 @@ define([
     'helpers/keyValidator',
     'dataService',
     'helpers',
-    'custom'
-], function (Backbone, $, _, ParentView, CreateTemplate, ProductItems, goodsNoteItems, BarCodeView, GoodsModel, GoodsCollection, common, populate, CONSTANTS, keyValidator, dataService, helpers, custom) {
+    'custom',
+    'jstree'
+], function (Backbone, $, _, ParentView, CreateTemplate, ProductItems, goodsNoteItems, BarCodeView, GoodsModel, GoodsCollection, common, populate, CONSTANTS, keyValidator, dataService, helpers, custom, jstree) {
 
     var CreateView = ParentView.extend({
         el         : '#content-holder',
@@ -85,96 +86,67 @@ define([
             var self = this;
             var order = this.orderModel.id;
             var model = this.orderModel.toJSON();
-            var $thisEl = this.$el;
-            var $table = $thisEl.find('.list');
-            var $checkedInputs;
-            var ids = [];
-            var isCheck;
             var checkNewShip = true;
             var name = this.orderModel.get('name');
             var date = helpers.setTimeToDate(this.$el.find('#date').val());
-            var products = [];
+            var load = this.$el.find('#load').val();
+            var unLoad = this.$el.find('#unLoad').val();
             var _model;
-            var selectedProducts = self.$el.find('.productItem');
-            var selectedLength = selectedProducts.length;
-            var barCodesForRows = custom.retriveFromCash('barCodesForRows');
-            var barCodes;
-            var newShip = 0;
-
-            $checkedInputs = $table.find('input:checked');
 
-            $.each($checkedInputs, function (index, each) {
-                var $el = $(this);
-                ids.push($el.val());
-            });
-
-            ids = _.compact(ids);
-
-            for (var i = selectedLength - 1; i >= 0; i--) {
-                isCheck = false;
-                targetEl = $(selectedProducts[i]);
-                orderRowId = targetEl.attr('id');
-                ordered = parseFloat(targetEl.find('#ordered').val());
-                product = targetEl.find('#productsDd').attr('data-id');
-                newShip = targetEl.find('#newShip').val();
-                barCodes = [];
-
-                for(var j=0; j<ids.length; j++){
-                    if(ids[j] === orderRowId){
-                        isCheck = true;
+            var data = $('#jstree_div').jstree(true).get_selected(true);
+            var orderRows = [];
+            for(var i=0; i<data.length; i++){
+                if(!data[i].children.length){
+                    var barId = data[i].id
+                    var parent = $('#jstree_div').jstree(true).get_node(data[i].parent);
+                    var orderRowId = parent.id;
+                    var product = parent.original.product;
+                    if(!orderRows.length){
+                        var item = {
+                            orderRowId: orderRowId,
+                            product: product,
+                            barCodes: [barId]
+                        }
+                        orderRows.push(item);
                     }
-                }
-
-                if(isCheck){
-                    for(var j=0; j<model.products.length; j++){
-                        if(orderRowId === model.products[j]._id){
-                            for(var m=0; m<model.products[j].barCodes.length; m++){
-                                barCodes.push(model.products[j].barCodes[m]._id.toString());
+                    else{
+                        var flag = false;
+                        for(var j=0; j<orderRows.length; j++){
+                            if(orderRows[j].orderRowId == orderRowId && orderRows[j].product == product){
+                                orderRows[j].barCodes.push(barId);
+                                flag = true;
                             }
                         }
-                    }
-                }else if(barCodesForRows !== null){
-                    for(var j=0; j<barCodesForRows.length; j++){
-                        if(barCodesForRows[j].orderRowId === orderRowId){
-                            barCodes = barCodesForRows[j].barCodes;
+                        if(!flag){
+                            var item = {
+                                orderRowId: orderRowId,
+                                product: product,
+                                barCodes: [barId]
+                            }
+                            orderRows.push(item);
                         }
                     }
                 }
-                if(!barCodes.length){
-                    continue;
-                }
-
-                if(barCodes.length != newShip){
-                    checkNewShip = false;
-                }
+            }
 
-                products.push({
-                    orderRowId: orderRowId,
-                    quantity  : barCodes.length,
-                    barCodes : barCodes,
-                    product : product
-                });
+            for(var n=0; n<orderRows.length; n++){
+                orderRows[n].quantity = orderRows[n].barCodes.length;
             }
 
-            if (!products.length) {
+            if (!orderRows.length) {
                 App.render({
                     type: 'error',
                     message: '发货数量为零，请先选择产品！'
                 }); 
                 return;
-            }
-
-            if(!checkNewShip){
-                App.render({
-                    type: 'error',
-                    message: '发货数量已修改，请先获取发货数量，核对正确再制定发货计划！'
-                });  
-            }else{
+            } else{
                 saveObject = {
                     order    : order,
                     name     : name,
                     date     : date,
-                    orderRows: products
+                    orderRows: orderRows,
+                    load     : load,
+                    unLoad   : unLoad
                 };
 
                 _model = new GoodsModel(saveObject);
@@ -230,6 +202,7 @@ define([
             return false;
         },
 
+
         render: function () {
             if(custom.retriveFromCash('barCodesForRows') != null){
                 custom.removeFromCash('barCodesForRows');
@@ -271,6 +244,31 @@ define([
                 minDate    : new Date(this.orderModel.toJSON().orderDate)
             }).datepicker('setDate', new Date());
 
+            $('#jstree_div').jstree({
+              plugins: ["checkbox", "sort", "types", "wholerow", "search", "unique", "contextmenu"],   
+              'core': {   
+                  'multiple': true,   
+                  'data' : function (obj, callback){  
+                            $.ajax({
+                                url : "/aluveneerOrders/getAluOrder",
+                                data: {id: orderModel._id},
+                                dataType : "json",  
+                                type : "GET",  
+                                success : function(data) {
+                                    if(data.length) {
+                                        callback.call(this, data);  
+                                    }else{  
+                                        $("#jstree_div").html("暂无数据！");  
+                                    } 
+                                },
+                                error: function(xhr,textStatus){
+                                    console.log(xhr);
+                                }
+                            });  
+                        }
+              }
+            });
+
             populate.get('#locationDd', 'warehouse/location/getForDd', {}, 'name', this, false);
             populate.get('#warehouseDd', 'warehouse/getForDD', {}, 'name', this, false);
 
diff --git a/byerp/public/js/views/purchaseOrders/EditView.js b/byerp/public/js/views/purchaseOrders/EditView.js
index 4bf31ec..1a2ffb7 100644
--- a/byerp/public/js/views/purchaseOrders/EditView.js
+++ b/byerp/public/js/views/purchaseOrders/EditView.js
@@ -1,525 +1,525 @@
-define([
-    'Backbone',
-    'jQuery',
-    'Underscore',
-    'views/dialogViewBase',
-    'text!templates/purchaseOrders/EditTemplate.html',
-    'text!templates/purchaseOrders/ViewTemplate.html',
-    'views/Assignees/AssigneesView',
-    'views/Products/orderRows/ProductItems',
-    'models/goodsOutNotesModel',
-    'common',
-    'custom',
-    'dataService',
-    'populate',
-    'constants',
-    'helpers'
-], function (Backbone, $, _, ParentView, EditTemplate, ViewTemplate, AssigneesView, ProductItemView, GoodsOutNote, common, Custom, dataService, populate, CONSTANTS, helpers) {
-
-    var EditView = ParentView.extend({
-        contentType: 'purchaseOrders',
-        imageSrc   : '',
-        template   : _.template(EditTemplate),
-
-        initialize: function (options) {
-            if (options) {
-                this.visible = options.visible;
-            }
-
-            _.bindAll(this, 'render', 'saveItem');
-            _.bindAll(this, 'render', 'deleteItem');
-
-            this.currentModel = options.model || options.collection.getElement();
-            this.currentModel.urlRoot = '/order';
-            this.responseObj = {};
-            this.editablePrice = this.currentModel.get('workflow').status === 'New' || false;
-            this.forSales = false;
-            this.editable = options.editable || true;
-            this.balanceVissible = false;
-            this.service = false;
-            this.onlyView = !!options.onlyView;
-            this.render(options);
-        },
-
-        events: {
-            'click .receiveInvoice': 'receiveInvoice',
-            'click .fullfillOrder' : 'fullfill',
-            'click .cancelOrder'   : 'cancelOrder',
-            'click .setDraft'      : 'setDraft'
-        },
-
-        chooseOption: function (e) {
-            var currencyElement = $(e.target).parents('dd').find('.current-selected');
-            var oldCurrency = currencyElement.attr('data-id');
-            var newCurrency = $(e.target).attr('id');
-            var oldCurrencyClass = helpers.currencyClass(oldCurrency);
-            var newCurrencyClass = helpers.currencyClass(newCurrency);
-
-            var array = this.$el.find('.' + oldCurrencyClass);
-
-            array.removeClass(oldCurrencyClass).addClass(newCurrencyClass);
-
-            currencyElement.text($(e.target).text()).attr('data-id', newCurrency);
-
-            //$(e.target).parents('dd').find('.current-selected').text($(e.target).text()).attr('data-id', $(e.target).attr('id'));
-
-            this.hideNewSelect();
-        },
-
-        fullfill: function (e) {
-            var self = this;
-
-            e.preventDefault();
-
-            var goodsNote = new GoodsOutNote();
-
-            var rowId = this.$el.find('.productItem');
-            var rows = [];
-
-            rowId.each(function (elem) {
-                rows.push({
-                    orderRowId: $(this).attr('data-id'),
-                    quantity  : $(this).find('input#quantity').val()
-                });
-            });
-
-            /* console.log('hello world');*/
-
-            /*  var wareHouse = */
-            goodsNote.save({
-                orderRows: rows,
-                order    : this.model.get('_id'),
-                warehouse: this.warehouse
-            }, {
-                headers: {
-                    mid: 57
-                },
-                patch  : true,
-                success: function () {
-                    /* Backbone.history.navigate(redirectUrl, {trigger: true});*/
-                }
-            });
-
-        },
-
-        cancelOrder: function (e) {
-            var self = this;
-
-            e.preventDefault();
-
-            populate.fetchWorkflow({
-                wId   : 'Purchase Order',
-                status: 'Cancelled',
-                order : 1
-            }, function (workflow) {
-                var redirectUrl = self.forSales ? 'easyErp/salesOrders' : 'easyErp/Orders';
-
-                if (workflow && workflow.error) {
-                    return App.render({
-                        type   : 'error',
-                        message: workflow.error.statusText
-                    });
-                }
-
-                self.currentModel.save({
-                    workflow: workflow._id
-                }, {
-                    headers: {
-                        mid: 57
-                    },
-                    patch  : true,
-                    success: function () {
-                        Backbone.history.navigate(redirectUrl, {trigger: true});
-                    }
-                });
-            });
-        },
-
-        receiveInvoice: function (e) {
-            var self = this;
-            var url = '/invoices/receive';
-            var journal = this.forSales ? CONSTANTS.INVOICE_JOURNAL : CONSTANTS.INVOICE_PURCHASE;
-            var data = {
-                forSales: this.forSales,
-                orderId : this.currentModel.id,
-                currency: this.currentModel.currency,
-                journal : journal
-            };
-
-            e.preventDefault();
-
-            this.saveItem(function (err) {
-                if (!err) {
-                    dataService.postData(url, data, function (err) {
-                        var redirectUrl = self.forSales ? 'easyErp/salesInvoices' : 'easyErp/Invoices';
-
-                        if (err) {
-                            App.render({
-                                type   : 'error',
-                                message: 'Can\'t receive invoice'
-                            });
-                        } else {
-                            Backbone.history.navigate(redirectUrl, {trigger: true});
-                        }
-                    });
-                }
-            });
-        },
-
-        setDraft: function (e) {
-            var self = this;
-
-            e.preventDefault();
-
-            populate.fetchWorkflow({
-                wId: 'Quotation'
-            }, function (workflow) {
-                var redirectUrl = self.forSales ? 'easyErp/salesOrders' : 'easyErp/Orders';
-
-                if (workflow && workflow.error) {
-                    return App.render({
-                        type   : 'error',
-                        message: workflow.error.statusText
-                    });
-                }
-
-                self.currentModel.save({
-                    workflow: workflow._id
-                }, {
-                    headers: {
-                        mid: 57
-                    },
-                    patch  : true,
-                    success: function () {
-                        Backbone.history.navigate(redirectUrl, {trigger: true});
-                    }
-                });
-            });
-        },
-
-        saveItem: function (invoiceCb) {
-            var self = this;
-            var mid = 55;
-            var thisEl = this.$el;
-            var selectedProducts = thisEl.find('.productItem');
-            var products = [];
-            var data;
-            var selectedLength = selectedProducts.length;
-            var targetEl;
-            var productId;
-            var quantity;
-            var id;
-            var price;
-            var description;
-            var subTotal;
-            var jobs;
-            var scheduledDate;
-            var taxes;
-            var supplier = thisEl.find('#supplierDd').data('id');
-
-            var destination = $.trim(thisEl.find('#destination').data('id'));
-            var incoterm = $.trim(thisEl.find('#incoterm').data('id'));
-            var invoiceControl = $.trim(thisEl.find('#invoicingControl').data('id'));
-            var paymentTerm = $.trim(thisEl.find('#paymentTerm').data('id'));
-            var fiscalPosition = $.trim(thisEl.find('#fiscalPosition').data('id'));
-            var supplierReference = thisEl.find('#supplierReference').val();
-            var orderDate = thisEl.find('#orderDate').val() || thisEl.find('#orderDate').text();
-            var expectedDate = thisEl.find('#expectedDate').val() || thisEl.find('#minScheduleDate').text();
-
-            var total = helpers.spaceReplacer($.trim(thisEl.find('#totalAmount').text()));
-            var totalTaxes = helpers.spaceReplacer($.trim(thisEl.find('#taxes').text()));
-            var unTaxed = helpers.spaceReplacer($.trim(thisEl.find('#totalUntaxes').text()));
-            var shippingAmount;
-            var shippingAccount;
-            var shippingId;
-
-            var usersId = [];
-            var groupsId = [];
-            var whoCanRW;
-            var jobDescription;
-            var currency;
-            var i;
-
-            unTaxed = parseFloat(unTaxed) * 100;
-            total = parseFloat(total) * 100;
-            totalTaxes = parseFloat(totalTaxes) * 100;
-
-            if (thisEl.find('#currencyDd').attr('data-id')) {
-                currency = {
-                    _id : thisEl.find('#currencyDd').attr('data-id'),
-                    name: thisEl.find('#currencyDd').text()
-                };
-            } else {
-                currency = {
-                    _id : null,
-                    name: ''
-                };
-            }
-
-            $('.groupsAndUser tr').each(function () {
-                if ($(this).data('type') === 'targetUsers') {
-                    usersId.push($(this).data('id'));
-                }
-                if ($(this).data('type') === 'targetGroups') {
-                    groupsId.push($(this).data('id'));
-                }
-
-            });
-
-            whoCanRW = this.$el.find('[name="whoCanRW"]:checked').val();
-
-            shippingId = thisEl.find('#shippingDd').attr('data-id');
-            shippingAccount = thisEl.find('#shippingRow').find('.accountDd').attr('data-id');
-            shippingAmount = helpers.spaceReplacer(thisEl.find('#shippingRow').find('[data-name="price"] input').val()) || helpers.spaceReplacer(thisEl.find('#shippingRow').find('[data-name="price"] span:not(.currencySymbol)').text());
-
-            shippingAmount = parseFloat(shippingAmount) * 100;
-
-            if (selectedLength) {
-                if (shippingId || shippingAccount) {
-                    selectedLength += 1;
-                }
-
-                for (i = selectedLength - 1; i >= 0; i--) {
-                    targetEl = selectedProducts.length === i ? this.$el.find('#shippingRow') : $(selectedProducts[i]);
-                    id = targetEl.data('id');
-                    if (id) {  // added more info for save
-                        productId = targetEl.find('.productsDd').attr('data-id');
-                        quantity = $.trim(targetEl.find('[data-name="quantity"]').text()) || targetEl.find('[data-name="quantity"] input').val();
-                        price = helpers.spaceReplacer(targetEl.find('[data-name="price"] .sum').text()) || helpers.spaceReplacer(targetEl.find('[data-name="price"] input').val());
-                        price = parseFloat(price) * 100;
-                        scheduledDate = $.trim(targetEl.find('[data-name="scheduledDate"]').text());
-                        taxes = helpers.spaceReplacer($.trim(targetEl.find('[data-name="taxes"] .sum').text()));
-                        taxes = parseFloat(taxes) * 100;
-                        description = targetEl.find('[data-name="productName"] textarea').val() || targetEl.find('[data-name="productDescr"]').text();
-                        jobDescription = targetEl.find('textarea.jobsDescription').val();
-                        jobs = targetEl.find('[data-name="jobs"]').attr('data-content');
-                        subTotal = helpers.spaceReplacer($.trim(targetEl.find('.subtotal .sum').text()));
-                        subTotal = parseFloat(subTotal) * 100;
-
-                        if (!quantity) {
-                            return App.render({
-                                type   : 'error',
-                                message: 'Quantity can\'t be empty'
-                            });
-                        }
-
-                        if (!price) {
-                            return App.render({
-                                type   : 'error',
-                                message: 'Unit price can\'t be empty'
-                            });
-                        }
-
-                        products.push({
-                            id            : id,
-                            product       : productId,
-                            warehouse     : this.warehouse,
-                            unitPrice     : price,
-                            quantity      : quantity,
-                            taxes         : taxes,
-                            description   : description,
-                            jobDescription: jobDescription,
-                            subTotal      : subTotal
-                        });
-                    }
-                }
-            }
-
-            data = {
-                currency         : currency,
-                supplier         : supplier,
-                supplierReference: supplierReference,
-                orderRows        : products,
-                orderDate        : helpers.setTimeToDate(orderDate),
-                expectedDate     : expectedDate,
-                destination      : destination || null,
-                incoterm         : incoterm || null,
-                invoiceControl   : invoiceControl || null,
-                paymentTerm      : paymentTerm || null,
-                fiscalPosition   : fiscalPosition || null,
-                shippingMethod   : shippingId,
-                shippingExpenses : {
-                    account: shippingAccount,
-                    amount : shippingAmount
-                },
-
-                paymentInfo: {
-                    total  : total,
-                    unTaxed: unTaxed
-                },
-
-                groups: {
-                    owner: this.$el.find('#allUsersSelect').attr('data-id') || null,
-                    users: usersId,
-                    group: groupsId
-                },
-
-                whoCanRW: whoCanRW
-            };
-
-            if (supplier) {
-                this.model.save(data, {
-                    headers: {
-                        mid: mid
-                    },
-                    patch  : true,
-                    success: function () {
-                        Backbone.history.fragment = '';
-                        Backbone.history.navigate(window.location.hash, {trigger: true});
-                        self.hideDialog();
-
-                        if (invoiceCb && typeof invoiceCb === 'function') {
-                            return invoiceCb(null);
-                        }
-                    },
-
-                    error: function (model, xhr) {
-                        self.errorNotification(xhr);
-
-                        if (invoiceCb && typeof invoiceCb === 'function') {
-                            return invoiceCb(xhr.text);
-                        }
-                    }
-                });
-
-            } else {
-                App.render({
-                    type   : 'error',
-                    message: CONSTANTS.RESPONSES.CREATE_QUOTATION
-                });
-            }
-        },
-
-        deleteItem: function (event) {
-            var mid = 55;
-            var self = this;
-            var answer = confirm('Really DELETE items ?!');
-
-            event.preventDefault();
-
-            if (answer) {
-                this.currentModel.destroy({
-                    headers: {
-                        mid: mid
-                    },
-                    success: function () {
-                        $('.edit-product-dialog').remove();
-                        Backbone.history.navigate('easyErp/' + self.contentType, {trigger: true});
-                    },
-
-                    error: function (model, err) {
-                        if (err.status === 403) {
-                            App.render({
-                                type   : 'error',
-                                message: '您没有权限执行这项操作'
-                            });
-                        }
-                    }
-                });
-            }
-
-        },
-
-        render: function () {
-            var self = this;
-            var buttons;
-            var formString;
-            var model;
-            var productItemContainer;
-
-            this.template = this.onlyView ? _.template(ViewTemplate) : _.template(EditTemplate);
-
-            formString = this.template({
-                model   : this.currentModel.toJSON(),
-                visible : this.visible,
-                onlyView: this.onlyView,
-                forSales: this.forSales
-            });
-
-            if (!this.onlyView) {
-                buttons = [
-                    {
-                        text : '保存',
-                        class: 'btn blue',
-                        click: function () {
-                            self.saveItem();
-                        }
-                    },
-
-                    {
-                        text : '取消',
-                        class: 'btn',
-                        click: function () {
-                            self.hideDialog();
-                        }
-                    },
-                    {
-                        text : '删除',
-                        click: self.deleteItem
-                    }
-                ];
-            } else {
-                buttons = [
-                    {
-                        text : 'Close',
-                        click: function () {
-                            self.hideDialog();
-                        }
-                    }
-                ];
-            }
-
-            this.$el = $(formString).dialog({
-                autoOpen   : true,
-                dialogClass: 'edit-dialog',
-                title      : 'Edit Order',
-                width      : '900px',
-                buttons    : buttons
-            });
-            populate.get('#currencyDd', CONSTANTS.URLS.CURRENCY_FORDD, {}, 'name', this, true);
-
-            populate.get('#destination', '/destination', {}, 'name', this, false, true);
-            populate.get('#incoterm', '/incoterm', {}, 'name', this, false, true);
-            populate.get('#invoicingControl', '/invoicingControl', {}, 'name', this, false, true);
-            populate.get('#paymentTerm', '/paymentTerm', {}, 'name', this, false, true);
-            populate.get('#deliveryDd', '/deliverTo', {}, 'name', this, false, true);
-            populate.get2name('#supplierDd', CONSTANTS.URLS.SUPPLIER, {}, this, false, true);
-
-            this.delegateEvents(this.events);
-            model = this.currentModel.toJSON();
-
-            this.$el.find('#expectedDate').datepicker({
-                dateFormat : 'd M, yy',
-                changeMonth: true,
-                changeYear : true,
-                maxDate    : '+0D'
-            });
-
-            dataService.getData('/warehouse/getForDD', null, function (elements) {
-                self.warehouse = elements.data ? elements.data[0]._id : '';
-                productItemContainer.append(
-                    new ProductItemView({
-                        editable       : self.editable,
-                        editablePrice  : self.editablePrice,
-                        balanceVissible: self.balanceVissible,
-                        forSales       : self.forSales,
-                        warehouse      : self.warehouse,
-                        service        : self.service,
-                        canBeSold      : self.forSales
-                    }).render({model: model}).el
-                );
-            });
-
-            productItemContainer = this.$el.find('#productItemsHolder');
-
-            if (this.onlyView) {
-                this.editable = false;
-            }
-
-            return this;
-        }
-
-    });
-
-    return EditView;
-});
+define([
+    'Backbone',
+    'jQuery',
+    'Underscore',
+    'views/dialogViewBase',
+    'text!templates/purchaseOrders/EditTemplate.html',
+    'text!templates/purchaseOrders/ViewTemplate.html',
+    'views/Assignees/AssigneesView',
+    'views/Products/orderRows/ProductItems',
+    'models/goodsOutNotesModel',
+    'common',
+    'custom',
+    'dataService',
+    'populate',
+    'constants',
+    'helpers'
+], function (Backbone, $, _, ParentView, EditTemplate, ViewTemplate, AssigneesView, ProductItemView, GoodsOutNote, common, Custom, dataService, populate, CONSTANTS, helpers) {
+
+    var EditView = ParentView.extend({
+        contentType: 'purchaseOrders',
+        imageSrc   : '',
+        template   : _.template(EditTemplate),
+
+        initialize: function (options) {
+            if (options) {
+                this.visible = options.visible;
+            }
+
+            _.bindAll(this, 'render', 'saveItem');
+            _.bindAll(this, 'render', 'deleteItem');
+
+            this.currentModel = options.model || options.collection.getElement();
+            this.currentModel.urlRoot = '/order';
+            this.responseObj = {};
+            this.editablePrice = this.currentModel.get('workflow').status === 'New' || false;
+            this.forSales = false;
+            this.editable = options.editable || true;
+            this.balanceVissible = false;
+            this.service = false;
+            this.onlyView = !!options.onlyView;
+            this.render(options);
+        },
+
+        events: {
+            'click .receiveInvoice': 'receiveInvoice',
+            'click .fullfillOrder' : 'fullfill',
+            'click .cancelOrder'   : 'cancelOrder',
+            'click .setDraft'      : 'setDraft'
+        },
+
+        chooseOption: function (e) {
+            var currencyElement = $(e.target).parents('dd').find('.current-selected');
+            var oldCurrency = currencyElement.attr('data-id');
+            var newCurrency = $(e.target).attr('id');
+            var oldCurrencyClass = helpers.currencyClass(oldCurrency);
+            var newCurrencyClass = helpers.currencyClass(newCurrency);
+
+            var array = this.$el.find('.' + oldCurrencyClass);
+
+            array.removeClass(oldCurrencyClass).addClass(newCurrencyClass);
+
+            currencyElement.text($(e.target).text()).attr('data-id', newCurrency);
+
+            //$(e.target).parents('dd').find('.current-selected').text($(e.target).text()).attr('data-id', $(e.target).attr('id'));
+
+            this.hideNewSelect();
+        },
+
+        fullfill: function (e) {
+            var self = this;
+
+            e.preventDefault();
+
+            var goodsNote = new GoodsOutNote();
+
+            var rowId = this.$el.find('.productItem');
+            var rows = [];
+
+            rowId.each(function (elem) {
+                rows.push({
+                    orderRowId: $(this).attr('data-id'),
+                    quantity  : $(this).find('input#quantity').val()
+                });
+            });
+
+            /* console.log('hello world');*/
+
+            /*  var wareHouse = */
+            goodsNote.save({
+                orderRows: rows,
+                order    : this.model.get('_id'),
+                warehouse: this.warehouse
+            }, {
+                headers: {
+                    mid: 57
+                },
+                patch  : true,
+                success: function () {
+                    /* Backbone.history.navigate(redirectUrl, {trigger: true});*/
+                }
+            });
+
+        },
+
+        cancelOrder: function (e) {
+            var self = this;
+
+            e.preventDefault();
+
+            populate.fetchWorkflow({
+                wId   : 'Purchase Order',
+                status: 'Cancelled',
+                order : 1
+            }, function (workflow) {
+                var redirectUrl = self.forSales ? 'easyErp/salesOrders' : 'easyErp/Orders';
+
+                if (workflow && workflow.error) {
+                    return App.render({
+                        type   : 'error',
+                        message: workflow.error.statusText
+                    });
+                }
+
+                self.currentModel.save({
+                    workflow: workflow._id
+                }, {
+                    headers: {
+                        mid: 57
+                    },
+                    patch  : true,
+                    success: function () {
+                        Backbone.history.navigate(redirectUrl, {trigger: true});
+                    }
+                });
+            });
+        },
+
+        receiveInvoice: function (e) {
+            var self = this;
+            var url = '/invoices/receive';
+            var journal = this.forSales ? CONSTANTS.INVOICE_JOURNAL : CONSTANTS.INVOICE_PURCHASE;
+            var data = {
+                forSales: this.forSales,
+                orderId : this.currentModel.id,
+                currency: this.currentModel.currency,
+                journal : journal
+            };
+
+            e.preventDefault();
+
+            this.saveItem(function (err) {
+                if (!err) {
+                    dataService.postData(url, data, function (err) {
+                        var redirectUrl = self.forSales ? 'easyErp/salesInvoices' : 'easyErp/Invoices';
+
+                        if (err) {
+                            App.render({
+                                type   : 'error',
+                                message: 'Can\'t receive invoice'
+                            });
+                        } else {
+                            Backbone.history.navigate(redirectUrl, {trigger: true});
+                        }
+                    });
+                }
+            });
+        },
+
+        setDraft: function (e) {
+            var self = this;
+
+            e.preventDefault();
+
+            populate.fetchWorkflow({
+                wId: 'Quotation'
+            }, function (workflow) {
+                var redirectUrl = self.forSales ? 'easyErp/salesOrders' : 'easyErp/Orders';
+
+                if (workflow && workflow.error) {
+                    return App.render({
+                        type   : 'error',
+                        message: workflow.error.statusText
+                    });
+                }
+
+                self.currentModel.save({
+                    workflow: workflow._id
+                }, {
+                    headers: {
+                        mid: 57
+                    },
+                    patch  : true,
+                    success: function () {
+                        Backbone.history.navigate(redirectUrl, {trigger: true});
+                    }
+                });
+            });
+        },
+
+        saveItem: function (invoiceCb) {
+            var self = this;
+            var mid = 55;
+            var thisEl = this.$el;
+            var selectedProducts = thisEl.find('.productItem');
+            var products = [];
+            var data;
+            var selectedLength = selectedProducts.length;
+            var targetEl;
+            var productId;
+            var quantity;
+            var id;
+            var price;
+            var description;
+            var subTotal;
+            var jobs;
+            var scheduledDate;
+            var taxes;
+            var supplier = thisEl.find('#supplierDd').data('id');
+
+            var destination = $.trim(thisEl.find('#destination').data('id'));
+            var incoterm = $.trim(thisEl.find('#incoterm').data('id'));
+            var invoiceControl = $.trim(thisEl.find('#invoicingControl').data('id'));
+            var paymentTerm = $.trim(thisEl.find('#paymentTerm').data('id'));
+            var fiscalPosition = $.trim(thisEl.find('#fiscalPosition').data('id'));
+            var supplierReference = thisEl.find('#supplierReference').val();
+            var orderDate = thisEl.find('#orderDate').val() || thisEl.find('#orderDate').text();
+            var expectedDate = thisEl.find('#expectedDate').val() || thisEl.find('#minScheduleDate').text();
+
+            var total = helpers.spaceReplacer($.trim(thisEl.find('#totalAmount').text()));
+            var totalTaxes = helpers.spaceReplacer($.trim(thisEl.find('#taxes').text()));
+            var unTaxed = helpers.spaceReplacer($.trim(thisEl.find('#totalUntaxes').text()));
+            var shippingAmount;
+            var shippingAccount;
+            var shippingId;
+
+            var usersId = [];
+            var groupsId = [];
+            var whoCanRW;
+            var jobDescription;
+            var currency;
+            var i;
+
+            unTaxed = parseFloat(unTaxed) * 100;
+            total = parseFloat(total) * 100;
+            totalTaxes = parseFloat(totalTaxes) * 100;
+
+            if (thisEl.find('#currencyDd').attr('data-id')) {
+                currency = {
+                    _id : thisEl.find('#currencyDd').attr('data-id'),
+                    name: thisEl.find('#currencyDd').text()
+                };
+            } else {
+                currency = {
+                    _id : null,
+                    name: ''
+                };
+            }
+
+            $('.groupsAndUser tr').each(function () {
+                if ($(this).data('type') === 'targetUsers') {
+                    usersId.push($(this).data('id'));
+                }
+                if ($(this).data('type') === 'targetGroups') {
+                    groupsId.push($(this).data('id'));
+                }
+
+            });
+
+            whoCanRW = this.$el.find('[name="whoCanRW"]:checked').val();
+
+            shippingId = thisEl.find('#shippingDd').attr('data-id');
+            shippingAccount = thisEl.find('#shippingRow').find('.accountDd').attr('data-id');
+            shippingAmount = helpers.spaceReplacer(thisEl.find('#shippingRow').find('[data-name="price"] input').val()) || helpers.spaceReplacer(thisEl.find('#shippingRow').find('[data-name="price"] span:not(.currencySymbol)').text());
+
+            shippingAmount = parseFloat(shippingAmount) * 100;
+
+            if (selectedLength) {
+                if (shippingId || shippingAccount) {
+                    selectedLength += 1;
+                }
+
+                for (i = selectedLength - 1; i >= 0; i--) {
+                    targetEl = selectedProducts.length === i ? this.$el.find('#shippingRow') : $(selectedProducts[i]);
+                    id = targetEl.data('id');
+                    if (id) {  // added more info for save
+                        productId = targetEl.find('.productsDd').attr('data-id');
+                        quantity = $.trim(targetEl.find('[data-name="quantity"]').text()) || targetEl.find('[data-name="quantity"] input').val();
+                        price = helpers.spaceReplacer(targetEl.find('[data-name="price"] .sum').text()) || helpers.spaceReplacer(targetEl.find('[data-name="price"] input').val());
+                        price = parseFloat(price) * 100;
+                        scheduledDate = $.trim(targetEl.find('[data-name="scheduledDate"]').text());
+                        taxes = helpers.spaceReplacer($.trim(targetEl.find('[data-name="taxes"] .sum').text()));
+                        taxes = parseFloat(taxes) * 100;
+                        description = targetEl.find('[data-name="productName"] textarea').val() || targetEl.find('[data-name="productDescr"]').text();
+                        jobDescription = targetEl.find('textarea.jobsDescription').val();
+                        jobs = targetEl.find('[data-name="jobs"]').attr('data-content');
+                        subTotal = helpers.spaceReplacer($.trim(targetEl.find('.subtotal .sum').text()));
+                        subTotal = parseFloat(subTotal) * 100;
+
+                        if (!quantity) {
+                            return App.render({
+                                type   : 'error',
+                                message: 'Quantity can\'t be empty'
+                            });
+                        }
+
+                        if (!price) {
+                            return App.render({
+                                type   : 'error',
+                                message: 'Unit price can\'t be empty'
+                            });
+                        }
+
+                        products.push({
+                            id            : id,
+                            product       : productId,
+                            warehouse     : this.warehouse,
+                            unitPrice     : price,
+                            quantity      : quantity,
+                            taxes         : taxes,
+                            description   : description,
+                            jobDescription: jobDescription,
+                            subTotal      : subTotal
+                        });
+                    }
+                }
+            }
+
+            data = {
+                currency         : currency,
+                supplier         : supplier,
+                supplierReference: supplierReference,
+                orderRows        : products,
+                orderDate        : helpers.setTimeToDate(orderDate),
+                expectedDate     : expectedDate,
+                destination      : destination || null,
+                incoterm         : incoterm || null,
+                invoiceControl   : invoiceControl || null,
+                paymentTerm      : paymentTerm || null,
+                fiscalPosition   : fiscalPosition || null,
+                shippingMethod   : shippingId,
+                shippingExpenses : {
+                    account: shippingAccount,
+                    amount : shippingAmount
+                },
+
+                paymentInfo: {
+                    total  : total,
+                    unTaxed: unTaxed
+                },
+
+                groups: {
+                    owner: this.$el.find('#allUsersSelect').attr('data-id') || null,
+                    users: usersId,
+                    group: groupsId
+                },
+
+                whoCanRW: whoCanRW
+            };
+
+            if (supplier) {
+                this.model.save(data, {
+                    headers: {
+                        mid: mid
+                    },
+                    patch  : true,
+                    success: function () {
+                        Backbone.history.fragment = '';
+                        Backbone.history.navigate(window.location.hash, {trigger: true});
+                        self.hideDialog();
+
+                        if (invoiceCb && typeof invoiceCb === 'function') {
+                            return invoiceCb(null);
+                        }
+                    },
+
+                    error: function (model, xhr) {
+                        self.errorNotification(xhr);
+
+                        if (invoiceCb && typeof invoiceCb === 'function') {
+                            return invoiceCb(xhr.text);
+                        }
+                    }
+                });
+
+            } else {
+                App.render({
+                    type   : 'error',
+                    message: CONSTANTS.RESPONSES.CREATE_QUOTATION
+                });
+            }
+        },
+
+        deleteItem: function (event) {
+            var mid = 55;
+            var self = this;
+            var answer = confirm('Really DELETE items ?!');
+
+            event.preventDefault();
+
+            if (answer) {
+                this.currentModel.destroy({
+                    headers: {
+                        mid: mid
+                    },
+                    success: function () {
+                        $('.edit-product-dialog').remove();
+                        Backbone.history.navigate('easyErp/' + self.contentType, {trigger: true});
+                    },
+
+                    error: function (model, err) {
+                        if (err.status === 403) {
+                            App.render({
+                                type   : 'error',
+                                message: '您没有权限执行这项操作'
+                            });
+                        }
+                    }
+                });
+            }
+
+        },
+
+        render: function () {
+            var self = this;
+            var buttons;
+            var formString;
+            var model;
+            var productItemContainer;
+
+            this.template = this.onlyView ? _.template(ViewTemplate) : _.template(EditTemplate);
+
+            formString = this.template({
+                model   : this.currentModel.toJSON(),
+                visible : this.visible,
+                onlyView: this.onlyView,
+                forSales: this.forSales
+            });
+
+            if (!this.onlyView) {
+                buttons = [
+                    {
+                        text : '保存',
+                        class: 'btn blue',
+                        click: function () {
+                            self.saveItem();
+                        }
+                    },
+
+                    {
+                        text : '取消',
+                        class: 'btn',
+                        click: function () {
+                            self.hideDialog();
+                        }
+                    },
+                    {
+                        text : '删除',
+                        click: self.deleteItem
+                    }
+                ];
+            } else {
+                buttons = [
+                    {
+                        text : 'Close',
+                        click: function () {
+                            self.hideDialog();
+                        }
+                    }
+                ];
+            }
+
+            this.$el = $(formString).dialog({
+                autoOpen   : true,
+                dialogClass: 'edit-dialog',
+                title      : 'Edit Order',
+                width      : '900px',
+                buttons    : buttons
+            });
+            populate.get('#currencyDd', CONSTANTS.URLS.CURRENCY_FORDD, {}, 'name', this, true);
+
+            populate.get('#destination', '/destination', {}, 'name', this, false, true);
+            populate.get('#incoterm', '/incoterm', {}, 'name', this, false, true);
+            populate.get('#invoicingControl', '/invoicingControl', {}, 'name', this, false, true);
+            populate.get('#paymentTerm', '/paymentTerm', {}, 'name', this, false, true);
+            populate.get('#deliveryDd', '/deliverTo', {}, 'name', this, false, true);
+            populate.get2name('#supplierDd', CONSTANTS.URLS.SUPPLIER, {}, this, false, true);
+
+            this.delegateEvents(this.events);
+            model = this.currentModel.toJSON();
+
+            this.$el.find('#expectedDate').datepicker({
+                dateFormat : 'd M, yy',
+                changeMonth: true,
+                changeYear : true,
+                maxDate    : '+0D'
+            });
+
+            dataService.getData('/warehouse/getForDD', null, function (elements) {
+                self.warehouse = elements.data ? elements.data[0]._id : '';
+                productItemContainer.append(
+                    new ProductItemView({
+                        editable       : self.editable,
+                        editablePrice  : self.editablePrice,
+                        balanceVissible: self.balanceVissible,
+                        forSales       : self.forSales,
+                        warehouse      : self.warehouse,
+                        service        : self.service,
+                        canBeSold      : self.forSales
+                    }).render({model: model}).el
+                );
+            });
+
+            productItemContainer = this.$el.find('#productItemsHolder');
+
+            if (this.onlyView) {
+                this.editable = false;
+            }
+
+            return this;
+        }
+
+    });
+
+    return EditView;
+});
diff --git a/byerp/public/js/views/purchaseOrders/TopBarView.js b/byerp/public/js/views/purchaseOrders/TopBarView.js
index baeac9c..3280c12 100644
--- a/byerp/public/js/views/purchaseOrders/TopBarView.js
+++ b/byerp/public/js/views/purchaseOrders/TopBarView.js
@@ -1,32 +1,32 @@
-define([
-    'Underscore',
-    'views/topBarViewBase',
-    'text!templates/purchaseOrders/TopBarTemplate.html',
-    'constants'
-], function (_, BaseView, ContentTopBarTemplate, CONSTANTS) {
-    'use strict';
-
-    var TopBarView = BaseView.extend({
-        el           : '#top-bar',
-        contentType  : CONSTANTS.PURCHASEORDERS,
-        contentHeader: '采购订单',
-        template     : _.template(ContentTopBarTemplate),
-
-        events: {
-            'click #top-bar-goodsinBtn'     : 'onGoodsEvent',
-            'click #top-bar-uploadBtn'      : 'uploadEvent'
-        },
-
-        onGoodsEvent: function (event) {
-            event.preventDefault();
-            this.trigger('goodsEvent');
-        },
-
-        uploadEvent: function(event) {
-            event.preventDefault();
-            this.trigger('uploadEvent');
-        }
-    });
-
-    return TopBarView;
-});
+define([
+    'Underscore',
+    'views/topBarViewBase',
+    'text!templates/purchaseOrders/TopBarTemplate.html',
+    'constants'
+], function (_, BaseView, ContentTopBarTemplate, CONSTANTS) {
+    'use strict';
+
+    var TopBarView = BaseView.extend({
+        el           : '#top-bar',
+        contentType  : CONSTANTS.PURCHASEORDERS,
+        contentHeader: '采购订单',
+        template     : _.template(ContentTopBarTemplate),
+
+        events: {
+            'click #top-bar-goodsinBtn'     : 'onGoodsEvent',
+            'click #top-bar-uploadBtn'      : 'uploadEvent'
+        },
+
+        onGoodsEvent: function (event) {
+            event.preventDefault();
+            this.trigger('goodsEvent');
+        },
+
+        uploadEvent: function(event) {
+            event.preventDefault();
+            this.trigger('uploadEvent');
+        }
+    });
+
+    return TopBarView;
+});
diff --git a/byerp/public/js/views/purchaseOrders/compactContent.js b/byerp/public/js/views/purchaseOrders/compactContent.js
index f691113..f025668 100644
--- a/byerp/public/js/views/purchaseOrders/compactContent.js
+++ b/byerp/public/js/views/purchaseOrders/compactContent.js
@@ -1,39 +1,39 @@
-﻿define([
-    'Backbone',
-    'jQuery',
-    'Underscore',
-    'text!templates/Persons/compactContentTemplate.html'
-], function (Backbone, $, _, compactContentTemplate) {
-    var compactContentView = Backbone.View.extend({
-
-        className: 'form',
-
-        events: {
-            'click #persons p > a': 'gotoPersonsForm'
-        },
-
-        initialize: function (options) {
-
-        },
-
-        template: _.template(compactContentTemplate),
-
-        gotoPersonsForm: function (e) {
-            var itemIndex;
-
-            e.preventDefault();
-            itemIndex = $(e.target).closest('a').attr('id');
-            Backbone.history.navigate('#easyErp/Persons/form/' + itemIndex, {trigger: true});
-        },
-
-        render: function (options) {
-            this.$el.html(this.template({
-                collection: this.collection,
-                options   : options
-            }));
-            return this;
-        }
-    });
-
-    return compactContentView;
-});
+﻿define([
+    'Backbone',
+    'jQuery',
+    'Underscore',
+    'text!templates/Persons/compactContentTemplate.html'
+], function (Backbone, $, _, compactContentTemplate) {
+    var compactContentView = Backbone.View.extend({
+
+        className: 'form',
+
+        events: {
+            'click #persons p > a': 'gotoPersonsForm'
+        },
+
+        initialize: function (options) {
+
+        },
+
+        template: _.template(compactContentTemplate),
+
+        gotoPersonsForm: function (e) {
+            var itemIndex;
+
+            e.preventDefault();
+            itemIndex = $(e.target).closest('a').attr('id');
+            Backbone.history.navigate('#easyErp/Persons/form/' + itemIndex, {trigger: true});
+        },
+
+        render: function (options) {
+            this.$el.html(this.template({
+                collection: this.collection,
+                options   : options
+            }));
+            return this;
+        }
+    });
+
+    return compactContentView;
+});
diff --git a/byerp/public/js/views/purchaseOrders/form/ContentView.js b/byerp/public/js/views/purchaseOrders/form/ContentView.js
index 0d29571..c5a89a9 100644
--- a/byerp/public/js/views/purchaseOrders/form/ContentView.js
+++ b/byerp/public/js/views/purchaseOrders/form/ContentView.js
@@ -1,86 +1,86 @@
-define([
-    'Backbone',
-    'jQuery',
-    'Underscore',
-    'views/tformViewBase',
-    'text!templates/purchaseOrders/form/ContentTemplate.html',
-    'text!templates/purchaseOrders/form/ListItemTemplate.html',
-    'models/orderModel',
-    'views/purchaseOrders/CreateView',
-    'views/purchaseOrders/form/FormView',
-    'views/purchaseOrders/form/EditView',
-    'constants',
-    'helpers'
-], function (Backbone, $, _, TFormBaseView, ContentTemplate, ListItemTemplate, QuotationModel, CreateView, FormView, EditView, CONSTANTS, helpers) {
-    'use strict';
-
-    var QuotationsListView = TFormBaseView.extend({
-        listTemplate   : _.template(ListItemTemplate),
-        contentTemplate: _.template(ContentTemplate),
-        CreateView     : CreateView,
-        EditView       : EditView,
-        listUrl        : 'easyErp/purchaseOrders/list/',
-        contentType    : CONSTANTS.PURCHASEORDERS, // needs in view.prototype.changeLocationHash
-        viewType       : 'tform', // needs in view.prototype.changeLocationHash
-        hasPagination  : true,
-        hasAlphabet    : false,
-        formView       : null,
-        forSales       : false,
-        selectedId     : null,
-        ContentModel   : QuotationModel,
-        FormView       : FormView,
-
-        renderList: function (orders) {
-            var $thisEl = this.$el;
-            var $listHolder = $thisEl.find('#listContent');
-
-            $listHolder.append(this.listTemplate({
-                orders          : orders,
-                currencyClass   : helpers.currencyClass,
-                currencySplitter: helpers.currencySplitter
-            }));
-        },
-
-        renderFormView: function (modelId, cb) {
-            var $thisEl = this.$el;
-            var self = this;
-            var model;
-
-            model = new this.ContentModel();
-
-            model.urlRoot = '/purchaseOrders/' + modelId;
-
-            model.fetch({
-                success: function (model) {
-
-                    if (self.formView) {
-                        self.formView.undelegateEvents();
-                    }
-
-                    self.currentModel = model;
-
-                    self.formView = new self.FormView({model: model, el: '#formContent'});
-                    self.formView.render();
-
-                    $thisEl.find('#listContent .selected').removeClass('selected');
-                    $thisEl.find('tr[data-id="' + modelId + '"]').addClass('selected');
-
-                    self.selectedId = model.id;
-
-                    if (cb && typeof cb === 'function') {
-                        cb();
-                    }
-                },
-
-                error: function () {
-                    App.render({
-                        type   : 'error',
-                        message: '服务器错误！'
-                    });
-                }
-            });
-        }
-    });
-
-    return QuotationsListView;
-});
+define([
+    'Backbone',
+    'jQuery',
+    'Underscore',
+    'views/tformViewBase',
+    'text!templates/purchaseOrders/form/ContentTemplate.html',
+    'text!templates/purchaseOrders/form/ListItemTemplate.html',
+    'models/orderModel',
+    'views/purchaseOrders/CreateView',
+    'views/purchaseOrders/form/FormView',
+    'views/purchaseOrders/form/EditView',
+    'constants',
+    'helpers'
+], function (Backbone, $, _, TFormBaseView, ContentTemplate, ListItemTemplate, QuotationModel, CreateView, FormView, EditView, CONSTANTS, helpers) {
+    'use strict';
+
+    var QuotationsListView = TFormBaseView.extend({
+        listTemplate   : _.template(ListItemTemplate),
+        contentTemplate: _.template(ContentTemplate),
+        CreateView     : CreateView,
+        EditView       : EditView,
+        listUrl        : 'easyErp/purchaseOrders/list/',
+        contentType    : CONSTANTS.PURCHASEORDERS, // needs in view.prototype.changeLocationHash
+        viewType       : 'tform', // needs in view.prototype.changeLocationHash
+        hasPagination  : true,
+        hasAlphabet    : false,
+        formView       : null,
+        forSales       : false,
+        selectedId     : null,
+        ContentModel   : QuotationModel,
+        FormView       : FormView,
+
+        renderList: function (orders) {
+            var $thisEl = this.$el;
+            var $listHolder = $thisEl.find('#listContent');
+
+            $listHolder.append(this.listTemplate({
+                orders          : orders,
+                currencyClass   : helpers.currencyClass,
+                currencySplitter: helpers.currencySplitter
+            }));
+        },
+
+        renderFormView: function (modelId, cb) {
+            var $thisEl = this.$el;
+            var self = this;
+            var model;
+
+            model = new this.ContentModel();
+
+            model.urlRoot = '/purchaseOrders/' + modelId;
+
+            model.fetch({
+                success: function (model) {
+
+                    if (self.formView) {
+                        self.formView.undelegateEvents();
+                    }
+
+                    self.currentModel = model;
+
+                    self.formView = new self.FormView({model: model, el: '#formContent'});
+                    self.formView.render();
+
+                    $thisEl.find('#listContent .selected').removeClass('selected');
+                    $thisEl.find('tr[data-id="' + modelId + '"]').addClass('selected');
+
+                    self.selectedId = model.id;
+
+                    if (cb && typeof cb === 'function') {
+                        cb();
+                    }
+                },
+
+                error: function () {
+                    App.render({
+                        type   : 'error',
+                        message: '服务器错误！'
+                    });
+                }
+            });
+        }
+    });
+
+    return QuotationsListView;
+});
diff --git a/byerp/public/js/views/purchaseOrders/form/EditView.js b/byerp/public/js/views/purchaseOrders/form/EditView.js
index c48bdcb..fb29fa9 100644
--- a/byerp/public/js/views/purchaseOrders/form/EditView.js
+++ b/byerp/public/js/views/purchaseOrders/form/EditView.js
@@ -99,7 +99,6 @@ define([
                     });
                 }
             });
-
         },
 
         cancelOrder: function (e) {
@@ -149,73 +148,41 @@ define([
             var currency;
             var self = this;
 
-            if ($target.closest('a').attr('id') === 'currencyDd') {
-                currency = _.findWhere(this.responseObj['#currencyDd'], {_id: $target.attr('id')});
-                symbol = currency ? currency.currency : '$';
-                $targetElement.attr('data-symbol', symbol);
-                $targetElement.text($(e.target).text());
-                $targetElement.attr('data-id', id);
-                this.$el.find('.currencySymbol').text(symbol);
-            } else if ($target.closest('a').attr('id') === 'workflowsDd' && $(e.target).attr('data-status') === 'cancelled') {
-                this.cancelOrder(e);
-            }
-
-            else if (holder.attr('id') === 'supplierDd') {
+            if (holder.attr('id') === 'supplierDd') {
                 holder.text($target.text()).attr('data-id', $target.attr('id'));
-                this.selectContract($(e.target).attr('id'));
+                var spid = $(e.target).attr('id');
+                this.getContract(spid);
             }
 
-            else if (holder.attr('id') === 'purchaseContract') {
-                holder.text($target.text()).attr('data-id', $target.attr('id'));
-                var opid = this.$el.find('#purchaseContract').attr('data-id');
-
-                dataService.getData( 'purchaseOrders/catchPrices', {
-                    id      : opid,
-                    date    : self.model.toJSON().orderDate
-                }, function (response, context) {
-                    if(response && response.products.length && response.products[0].average){
-                        Custom.cacheToApp('Purchaseprice', response);
-                    } else if(response && response.products.length == 0){
-                        return App.render({
-                        type   : 'error',
-                        message: '采购合同未设置产品!'
-                        });
-                    }  else if (response && response.products.length && !response.products[0].average){
-                        return App.render({
-                        type   : 'error',
-                        message: '当日未获取铝锭价!'
-                        });
-                    }
-                },this);
-            } 
-
             $targetElement.text($(e.target).text()).attr('data-id', id);
 
             this.hideNewSelect();
         },
 
-        selectContract: function (id) {
-
+        getContract: function (id) {
             if (id !== '') {
                 dataService.getData( '/purchaseContract/getForDd', {
                     supplier : id
                 }, function (response, context) {
                     var contract = response.data;
-
                     if (contract) {
                         var purchaseContract;
-
                         purchaseContract = _.map(contract, function (contract) {
                             purchaseContract = {
                                 _id   : contract._id,
                                 name  : contract.number
                             }
-
                             return purchaseContract;
                         });
-
-                        context.responseObj['#purchaseContract'] = purchaseContract;                       
-
+                        if(purchaseContract.length){
+                            context.responseObj['#purchaseContract'] = purchaseContract;
+                        } else{
+                            context.$el.find('#purchaseContract').text('无').attr('data-id','');
+                            return App.render({
+                                type   : 'notify',
+                                message: '该供应商没有对应材料采购合同。'
+                            });
+                        }
                     }
                 }, this);
             } else {
@@ -223,6 +190,87 @@ define([
             }
         },
 
+        catchPrices: function() {
+            var self = this;
+            var Contractid = this.$el.find('#purchaseContract').attr('data-id');
+            var date = this.$el.find('#orderDate').val() || this.$el.find('#orderDate').text();
+            if(!Contractid){
+                return App.render({
+                    type   : 'error',
+                    message: '请先选择采购合同！'
+                    });
+            } else{
+                dataService.getData( 'purchaseOrders/catchPrices', {
+                    id      : Contractid,
+                    date    : date
+                }, function (response, context) {
+                    if(response && response.error){
+                        return App.render({
+                        type   : 'error',
+                        message: response.error.responseJSON.error
+                        });
+                    } else if(response && response.products && response.products[0].average){
+                        var products = response.products;
+                        var $thisEl = self.$el;
+                        var $table = $thisEl.find('#productList');
+                        var $products;
+                        var subtotal = 0;
+                        $products = $table.find('tr.productItem');
+                        $.each($products, function () {
+                            var flag = false;
+                            var id = $(this).find('[data-name="productName"] div a').attr('data-id');
+                            var name = $(this).find('[data-name="productName"] div a').text();
+                            var quantity = $(this).find('#quantity').val() || $(this).find('td[data-name="quantity"]').text();
+                            var priceQty = $(this).find('#priceQty').val() || $(this).find('td[data-name="priceQty"]').text();
+                            var total;
+                            var price = 0;   
+                            products.forEach(function (product) {
+                                if(id == product.product._id){
+                                    flag = true;
+                                    if(product.price1){
+                                        price += product.price1;
+                                    }
+                                    if(product.price2){
+                                        price += product.price2;
+                                    }
+                                    if(product.price3){
+                                        price += product.price3;
+                                    }
+                                    if(product.price4){
+                                        price += product.price4;
+                                    }
+                                    if(product.price5){
+                                        price += product.price5;
+                                    }
+                                    if(product.average){
+                                        price += product.average;
+                                    }
+                                    if(priceQty != 0) {
+                                        total = price * priceQty;
+                                    }else{
+                                        total = 0;
+                                    }
+                                    subtotal += total;
+                                }
+                               
+                            });
+                            console.log(flag);
+                            if(flag == false){
+                                return App.render({
+                                    type   : 'error',
+                                    message: '产品'+ name +'采购合同中未设置！'
+                                    });
+                            } else{
+                                $(this).find('[data-name="price"] div #editInput').val(price/1000);
+                                $(this).find('[data-name="subtotal"] div .sum').text((total/1000).toFixed(2));
+                            }
+                        });
+                        $thisEl.find('#totalAmount').text((subtotal/1000).toFixed(2));
+                    }
+                },this);
+            }
+        },
+
         saveOrder: function (e) {
             e.preventDefault();
             this.saveItem();
@@ -250,7 +298,7 @@ define([
             if (!creditAccount) {
                 return App.render({
                     type   : 'notify',
-                    message: 'Please, choose Payable Accrual Account first'
+                    message: '请先选择应付应计账户。'
                 });
             }
 
@@ -265,7 +313,7 @@ define([
                         if (err) {
                             App.render({
                                 type   : 'error',
-                                message: 'Can\'t receive invoice'
+                                message: '无法收到发票'
                             });
                         } else {
                             Backbone.history.navigate(redirectUrl, {trigger: true});
@@ -306,6 +354,9 @@ define([
             var workflowStatus = $.trim(thisEl.find('#workflowsDd').text());
             var warehouse = $.trim(thisEl.find('#warehouseDd').attr('data-id'));
             var contract = $.trim(thisEl.find('#purchaseContract').attr('data-id'));
+            var defaultorderDate = this.model.get('orderDate');
+            var Newnote = thisEl.find('#notes').val();
+            var notes = this.model.get('notes');
 
             var total = helpers.spaceReplacer($.trim(thisEl.find('#totalAmount').text()));
             var totalTaxes = helpers.spaceReplacer($.trim(thisEl.find('#taxes').text()));
@@ -338,6 +389,21 @@ define([
                 });
             }
 
+            notes = notes.filter(function (elem) {
+                return !elem.history && !elem.pay;
+            });
+
+            if(defaultorderDate.trim() !== orderDate.trim()) {
+                if(!Newnote){
+                    return App.render({
+                        type   : 'error',
+                        message: "日期已修改，请填写备注信息！"
+                    });
+                } else{
+                    notes.push({note:Newnote, date:new Date()});
+                }
+            }
+
             unTaxed = parseFloat(unTaxed) * 100;
             total = parseFloat(total) * 100;
             totalTaxes = parseFloat(totalTaxes) * 100;
@@ -436,6 +502,7 @@ define([
                 workflow         : workflow,
                 salesPerson      : assignedTo,
                 shippingMethod   : shippingId,
+                notes            : notes,
                 shippingExpenses : {
                     account: shippingAccount,
                     amount : shippingAmount
@@ -558,10 +625,6 @@ define([
 
             $thisEl.html(formString);
 
-            
-
-            
-
             this.delegateEvents(this.events);
 
             if (!this.onlyView/* || this.currentModel.toJSON().status.fulfillStatus !== 'ALL'*/) {
@@ -581,7 +644,6 @@ define([
                 populate.get('#account', '/chartOfAccount/getForDd', {}, 'name', this, false, true);
                 populate.get('#taxCode', '/taxSettings/getForDd', {}, 'name', this, true, true);
                 populate.get('#warehouseDd', '/warehouse', {}, 'name', this, false, true);
-                //populate.get('#purchaseContract', 'purchaseContract/getForDd', {_type: 'purchaseContract'}, 'number', this, false, true);
 
                 this.$el.find('#expectedDate').datepicker({
                     dateFormat: 'yy-MM-dd',
@@ -644,27 +706,25 @@ define([
             productItemContainer.append(
                 self.ProductItemView.render().el
             );
-
-            var opid = this.$el.find('#purchaseContract').attr('data-id');
-            if(!opid){
-                return App.render({
-                    type   : 'error',
-                    message: '请选择采购合同!'
-                });
-            } else{
-                dataService.getData( 'purchaseOrders/catchPrices', {
-                    id      : opid,
-                    date    : self.model.toJSON().orderDate
-                }, function (response, context) {
-                    if(response && response.products.length){
-                        Custom.cacheToApp('Purchaseprice', response);
-                    } else if(response && response.products.length == 0){
-                        return App.render({
-                        type   : 'error',
-                        message: '采购合同未设置产品!'
-                    });
-                    }
-                },this);
+            var spid = this.$el.find('#supplierDd').attr('data-id');
+            if(spid){
+                this.getContract(spid);
+            }
+            if(this.currentModel.toJSON().workflow.status!=='New'){
+                var array=this.$('input');
+                var array1=this.$el.find('a');           
+                $.each(this.$el.find('a'),function(i,v){
+                    if( $(v).hasClass("current-selected")){
+                        $(v).removeClass("current-selected");
+                    }               
+                })
+                this.$el.find('#workflowsDd').addClass("current-selected")
+                for(var index in array){
+                    array[index].disabled=true;
+                }
+                $('#catchPrices')[0].hidden="hidden";
+                $('#selectShippingMethod')[0].hidden="hidden";
+                $('#resetPrices')[0].hidden="hidden";
             }
 
             return this;
diff --git a/byerp/public/js/views/purchaseOrders/form/FormView.js b/byerp/public/js/views/purchaseOrders/form/FormView.js
index 9143bcc..17b1550 100644
--- a/byerp/public/js/views/purchaseOrders/form/FormView.js
+++ b/byerp/public/js/views/purchaseOrders/form/FormView.js
@@ -1,211 +1,212 @@
-define([
-    'Backbone',
-    'jQuery',
-    'Underscore',
-    'views/dialogViewBase',
-    'text!templates/purchaseOrders/form/FormTemplate.html',
-    'text!templates/purchaseOrders/temps/documentTemp.html',
-    'views/NoteEditor/NoteView',
-    'views/Editor/AttachView',
-    'views/Payment/CreateView',
-    'views/refund/CreateView',
-    'views/stockReturns/CreateView',
-    'common',
-    'custom',
-    'dataService',
-    'populate',
-    'constants',
-    'helpers',
-    'services/showJournalEntries'
-], function (Backbone, $, _, ParentView, EditTemplate, DocumentTemplate, NoteEditor, AttachView, PaymentCreateView, RefundCreateView, ReturnSalesView, common, Custom, dataService, populate, CONSTANTS, helpers, journalService) {
-
-    var FormView = ParentView.extend({
-        contentType: 'purchaseOrders',
-        imageSrc   : '',
-        template   : _.template(EditTemplate),
-        forSales   : false,
-        service    : false,
-        templateDoc: _.template(DocumentTemplate),
-
-        initialize: function (options) {
-            var modelObj;
-
-            if (options) {
-                this.visible = options.visible;
-            }
-
-            this.currentModel = (options.model) ? options.model : options.collection.getElement();
-            this.currentModel.urlRoot = '/purchaseOrders';
-            this.responseObj = {};
-            // this.editablePrice = this.currentModel.get('workflow').status === 'New' || false;
-            this.warehouse = this.currentModel.get('warehouse');
-            this.editable = options.editable || true;
-            this.balanceVissible = false;
-            modelObj = this.currentModel.toJSON();
-            this.onlyView = (modelObj.workflow && modelObj.workflow.status === 'Done');
-        },
-
-        events: {
-            'click .prepay'            : 'createPrepayment',
-            'click .refund'            : 'createRefund',
-            'click #salesReturn'       : 'returnSales',
-            'click .receiveInvoice'    : 'receiveInvoice',
-            'click .cancelOrder'       : 'cancelOrderView',
-            'click .receiveInventory'  : 'receiveInventory',
-            'click #resetPrices'       : 'resetPrices',
-            'click .saveBtn'           : 'saveOrder',
-            'click #attachment_file'   : 'clickInput',
-            'click #viewJournalEntries': journalService.showForDocs,
-            'click .closedBtn' : 'closeOrder'
-        },
-
-        checkActiveClass: function (e) {
-            var $target = $(e.target);
-
-            if ($target.closest('li').hasClass('activeItem')) {
-                return true;
-            }
-
-            return false;
-        },
-
-        createRefund: function (e) {
-            e.preventDefault();
-            e.stopPropagation();
-
-            if (!this.checkActiveClass(e)) {
-                return false;
-            }
-
-            return new RefundCreateView({
-                model       : this.currentModel,
-                dontRedirect: true
-            });
-        },
-
-        cancelOrderView: function (e) {
-            e.preventDefault();
-            e.stopPropagation();
-
-            if (!this.checkActiveClass(e)) {
-                return false;
-            }
-
-            return new ReturnSalesView({
-                model     : this.currentModel,
-                purchase  : true,
-                parentView: this,
-                cancel    : true
-            });
-        },
-
-        returnSales: function (e) {
-            e.preventDefault();
-            e.stopPropagation();
-
-            if (!this.checkActiveClass(e)) {
-                return false;
-            }
-
-            return new ReturnSalesView({
-                model   : this.currentModel,
-                purchase: true
-            });
-        },
-
-        createPrepayment: function (e) {
-            var self = this;
-            var currency = self.currentModel.get('currency');
-            var data = {};
-
-            if (!this.checkActiveClass(e)) {
-                return false;
-            }
-
-            e.preventDefault();
-            e.stopPropagation();
-
-            dataService.getData('/payments/getPrepayments', {
-                id      : self.currentModel.get('_id'),
-                currency: currency
-            }, function (response) {
-                data.totalAmount = self.currentModel.get('paymentInfo').total;
-                data.paymentAmount = response.sumInCurrency / 100;
-                data.invoiceCurrency = currency._id.name;
-                data.paymentCurrency = 'CNY';
-                data.date = new Date();
-
-                dataService.getData(CONSTANTS.URLS.PAYMENT_AMOUNT_LEFT, data,
-                    function (res) {
-                        return new PaymentCreateView({
-                            model      : self.currentModel,
-                            currency   : currency && (typeof currency._id === 'object') ? currency._id : currency,
-                            title      : '创建预付款',
-                            prepayment : true,
-                            mid        : 129,
-                            paymentsSum: data.paymentAmount
-                        });
-                    });
-
-            });
-        },
-
-        render: function () {
-            var self = this;
-            var $thisEl = this.$el;
-            var formString;
-            var template;
-            var timeLine;
-
-            this.template = _.template(EditTemplate);
-
-            formString = this.template({
-                model   : this.currentModel.toJSON(),
-                visible : this.visible,
-                onlyView: this.onlyView,
-                forSales: this.forSales
-            });
-
-            $thisEl.html(formString);
-
-            template = this.templateDoc({
-                model           : this.currentModel.toJSON(),
-                currencySplitter: helpers.currencySplitter,
-                addressMaker    : helpers.addressMaker
-            });
-
-            $thisEl.find('#templateDiv').html(template);
-
-            timeLine = new NoteEditor({
-                model: this.currentModel
-            });
-
-            $thisEl.find('#historyDiv').html(
-                timeLine.render().el
-            );
-
-            $thisEl.find('#attachments').append(
-                new AttachView({
-                    model      : this.currentModel,
-                    contentType: 'order',
-                    forDoc     : true
-                }).render().el
-            );
-
-            this.delegateEvents(this.events);
-
-            return this;
-        }
-
-    });
-
-    FormView.extend = function (childView) {
-        var view = Backbone.View.extend.apply(this, arguments);
-
-        view.prototype.events = _.extend({}, this.prototype.events, childView.events);
-
-        return view;
-    };
-
-    return FormView;
-});
+define([
+    'Backbone',
+    'jQuery',
+    'Underscore',
+    'views/dialogViewBase',
+    'text!templates/purchaseOrders/form/FormTemplate.html',
+    'text!templates/purchaseOrders/temps/documentTemp.html',
+    'views/NoteEditor/NoteView',
+    'views/Editor/AttachView',
+    'views/Payment/CreateView',
+    'views/refund/CreateView',
+    'views/stockReturns/CreateView',
+    'common',
+    'custom',
+    'dataService',
+    'populate',
+    'constants',
+    'helpers',
+    'services/showJournalEntries'
+], function (Backbone, $, _, ParentView, EditTemplate, DocumentTemplate, NoteEditor, AttachView, PaymentCreateView, RefundCreateView, ReturnSalesView, common, Custom, dataService, populate, CONSTANTS, helpers, journalService) {
+
+    var FormView = ParentView.extend({
+        contentType: 'purchaseOrders',
+        imageSrc   : '',
+        template   : _.template(EditTemplate),
+        forSales   : false,
+        service    : false,
+        templateDoc: _.template(DocumentTemplate),
+
+        initialize: function (options) {
+            var modelObj;
+
+            if (options) {
+                this.visible = options.visible;
+            }
+
+            this.currentModel = (options.model) ? options.model : options.collection.getElement();
+            this.currentModel.urlRoot = '/purchaseOrders';
+            this.responseObj = {};
+            // this.editablePrice = this.currentModel.get('workflow').status === 'New' || false;
+            this.warehouse = this.currentModel.get('warehouse');
+            this.editable = options.editable || true;
+            this.balanceVissible = false;
+            modelObj = this.currentModel.toJSON();
+            this.onlyView = (modelObj.workflow && modelObj.workflow.status === 'Done');
+        },
+
+        events: {
+            'click .prepay'            : 'createPrepayment',
+            'click .refund'            : 'createRefund',
+            'click #salesReturn'       : 'returnSales',
+            'click .receiveInvoice'    : 'receiveInvoice',
+            'click .cancelOrder'       : 'cancelOrderView',
+            'click .receiveInventory'  : 'receiveInventory',
+            'click #resetPrices'       : 'resetPrices',
+            'click .saveBtn'           : 'saveOrder',
+            'click #attachment_file'   : 'clickInput',
+            'click #viewJournalEntries': journalService.showForDocs,
+            'click .closedBtn' : 'closeOrder',
+            'click #catchPrices'       : 'catchPrices'
+        },
+
+        checkActiveClass: function (e) {
+            var $target = $(e.target);
+
+            if ($target.closest('li').hasClass('activeItem')) {
+                return true;
+            }
+
+            return false;
+        },
+
+        createRefund: function (e) {
+            e.preventDefault();
+            e.stopPropagation();
+
+            if (!this.checkActiveClass(e)) {
+                return false;
+            }
+
+            return new RefundCreateView({
+                model       : this.currentModel,
+                dontRedirect: true
+            });
+        },
+
+        cancelOrderView: function (e) {
+            e.preventDefault();
+            e.stopPropagation();
+
+            if (!this.checkActiveClass(e)) {
+                return false;
+            }
+
+            return new ReturnSalesView({
+                model     : this.currentModel,
+                purchase  : true,
+                parentView: this,
+                cancel    : true
+            });
+        },
+
+        returnSales: function (e) {
+            e.preventDefault();
+            e.stopPropagation();
+
+            if (!this.checkActiveClass(e)) {
+                return false;
+            }
+
+            return new ReturnSalesView({
+                model   : this.currentModel,
+                purchase: true
+            });
+        },
+
+        createPrepayment: function (e) {
+            var self = this;
+            var currency = self.currentModel.get('currency');
+            var data = {};
+
+            if (!this.checkActiveClass(e)) {
+                return false;
+            }
+
+            e.preventDefault();
+            e.stopPropagation();
+
+            dataService.getData('/payments/getPrepayments', {
+                id      : self.currentModel.get('_id'),
+                currency: currency
+            }, function (response) {
+                data.totalAmount = self.currentModel.get('paymentInfo').total;
+                data.paymentAmount = response.sumInCurrency / 100;
+                data.invoiceCurrency = currency._id.name;
+                data.paymentCurrency = 'CNY';
+                data.date = new Date();
+
+                dataService.getData(CONSTANTS.URLS.PAYMENT_AMOUNT_LEFT, data,
+                    function (res) {
+                        return new PaymentCreateView({
+                            model      : self.currentModel,
+                            currency   : currency && (typeof currency._id === 'object') ? currency._id : currency,
+                            title      : '创建预付款',
+                            prepayment : true,
+                            mid        : 129,
+                            paymentsSum: data.paymentAmount
+                        });
+                    });
+
+            });
+        },
+
+        render: function () {
+            var self = this;
+            var $thisEl = this.$el;
+            var formString;
+            var template;
+            var timeLine;
+
+            this.template = _.template(EditTemplate);
+
+            formString = this.template({
+                model   : this.currentModel.toJSON(),
+                visible : this.visible,
+                onlyView: this.onlyView,
+                forSales: this.forSales
+            });
+
+            $thisEl.html(formString);
+
+            template = this.templateDoc({
+                model           : this.currentModel.toJSON(),
+                currencySplitter: helpers.currencySplitter,
+                addressMaker    : helpers.addressMaker
+            });
+
+            $thisEl.find('#templateDiv').html(template);
+
+            timeLine = new NoteEditor({
+                model: this.currentModel
+            });
+
+            $thisEl.find('#historyDiv').html(
+                timeLine.render().el
+            );
+
+            $thisEl.find('#attachments').append(
+                new AttachView({
+                    model      : this.currentModel,
+                    contentType: 'order',
+                    forDoc     : true
+                }).render().el
+            );
+
+            this.delegateEvents(this.events);
+
+            return this;
+        }
+
+    });
+
+    FormView.extend = function (childView) {
+        var view = Backbone.View.extend.apply(this, arguments);
+
+        view.prototype.events = _.extend({}, this.prototype.events, childView.events);
+
+        return view;
+    };
+
+    return FormView;
+});
diff --git a/byerp/public/js/views/purchaseOrders/list/ListTotalView.js b/byerp/public/js/views/purchaseOrders/list/ListTotalView.js
index 29234f8..1952662 100644
--- a/byerp/public/js/views/purchaseOrders/list/ListTotalView.js
+++ b/byerp/public/js/views/purchaseOrders/list/ListTotalView.js
@@ -1,51 +1,51 @@
-define([
-    'Backbone',
-    'Underscore',
-    'jQuery',
-    'text!templates/purchaseOrders/list/ListTotal.html',
-    'text!templates/Invoices/list/ListTotal.html',
-    'helpers'
-], function (Backbone, _, $, listTemplate, invoiceTotal, helpers) {
-    'use strict';
-    var OrderListTotalView = Backbone.View.extend({
-        el: '#listTotal',
-
-        getTotal: function () {
-            var result = {unTaxed: 0, total: 0, paid: 0, balance: 0, cellSpan: this.cellSpan};
-
-            this.element.find('td.unTaxed').each(function () {
-                result.unTaxed += parseFloat(helpers.spaceReplacer($(this).text()));
-            });
-            this.element.find('td.total').each(function () {
-                result.total += parseFloat(helpers.spaceReplacer($(this).text()));
-            });
-            this.element.find('td.paid').each(function () {
-                result.paid += parseFloat(helpers.spaceReplacer($(this).text()));
-            });
-            this.element.find('td.balance').each(function () {
-                result.balance += parseFloat(helpers.spaceReplacer($(this).text()));
-            });
-
-            return result;
-        },
-
-        initialize: function (options) {
-            this.element = options.element;
-            this.cellSpan = options.cellSpan;
-            this.invoiceTemplate = options.invoiceTemplate;
-        },
-
-        render: function () {
-            var template = this.invoiceTemplate ? _.template(invoiceTotal) : _.template(listTemplate);
-
-            if (this.$el.find('tr').length > 0) {
-                this.$el.find('#unTaxed').text(this.getTotal().unTaxed.toFixed(2));
-                this.$el.find('#total').text(this.getTotal().total.toFixed(2));
-            } else {
-                this.$el.append(template({currencySplitter: helpers.currencySplitter, total: this.getTotal()}));
-            }
-        }
-    });
-
-    return OrderListTotalView;
-});
+define([
+    'Backbone',
+    'Underscore',
+    'jQuery',
+    'text!templates/purchaseOrders/list/ListTotal.html',
+    'text!templates/Invoices/list/ListTotal.html',
+    'helpers'
+], function (Backbone, _, $, listTemplate, invoiceTotal, helpers) {
+    'use strict';
+    var OrderListTotalView = Backbone.View.extend({
+        el: '#listTotal',
+
+        getTotal: function () {
+            var result = {unTaxed: 0, total: 0, paid: 0, balance: 0, cellSpan: this.cellSpan};
+
+            this.element.find('td.unTaxed').each(function () {
+                result.unTaxed += parseFloat(helpers.spaceReplacer($(this).text()));
+            });
+            this.element.find('td.total').each(function () {
+                result.total += parseFloat(helpers.spaceReplacer($(this).text()));
+            });
+            this.element.find('td.paid').each(function () {
+                result.paid += parseFloat(helpers.spaceReplacer($(this).text()));
+            });
+            this.element.find('td.balance').each(function () {
+                result.balance += parseFloat(helpers.spaceReplacer($(this).text()));
+            });
+
+            return result;
+        },
+
+        initialize: function (options) {
+            this.element = options.element;
+            this.cellSpan = options.cellSpan;
+            this.invoiceTemplate = options.invoiceTemplate;
+        },
+
+        render: function () {
+            var template = this.invoiceTemplate ? _.template(invoiceTotal) : _.template(listTemplate);
+
+            if (this.$el.find('tr').length > 0) {
+                this.$el.find('#unTaxed').text(this.getTotal().unTaxed.toFixed(2));
+                this.$el.find('#total').text(this.getTotal().total.toFixed(2));
+            } else {
+                this.$el.append(template({currencySplitter: helpers.currencySplitter, total: this.getTotal()}));
+            }
+        }
+    });
+
+    return OrderListTotalView;
+});
diff --git a/byerp/public/js/views/purchaseOrders/list/ListView.js b/byerp/public/js/views/purchaseOrders/list/ListView.js
index 8aa2d85..b67c833 100644
--- a/byerp/public/js/views/purchaseOrders/list/ListView.js
+++ b/byerp/public/js/views/purchaseOrders/list/ListView.js
@@ -1,195 +1,207 @@
-define([
-    'Backbone',
-    'jQuery',
-    'Underscore',
-    'views/listViewBase',
-    'text!templates/purchaseOrders/list/ListHeader.html',
-    'text!templates/stages.html',
-    'views/purchaseOrders/uploadView',
-    'views/purchaseOrders/CreateView',
-    'views/goodsInNotes/CreateAllView',
-    'views/purchaseOrders/list/ListItemView',
-    'views/purchaseOrders/list/ListTotalView',
-    'views/order/EditView',
-    'models/orderModel',
-    'collections/purchaseOrders/filterCollection',
-    'common',
-    'dataService',
-    'helpers',
-    'constants'
-], function (Backbone, $, _, listViewBase, listTemplate, stagesTamplate, uploadView, createView, createAllView, ListItemView, ListTotalView, EditView, OrderModel, contentCollection, common, dataService, helpers, CONSTANTS) {
-    'use strict';
-    var OrdersListView = listViewBase.extend({
-        CreateView       : createView,
-        CreateAllView    : createAllView,
-        listTemplate     : listTemplate,
-        ListItemView     : ListItemView,
-        contentCollection: contentCollection,
-        contentType      : 'purchaseOrders',
-        hasPagination    : true,
-
-        initialize: function (options) {
-            this.startTime = options.startTime;
-            this.collection = options.collection;
-            this.filter = options.filter || {};
-            this.filter.forSales = {
-                key  : 'forSales',
-                type : 'boolean',
-                value: ['false']
-            };
-            this.formUrl = 'easyErp/' + this.contentType + '/tform/';
-            this.forSales = false;
-            this.sort = options.sort;
-            this.defaultItemsNumber = this.collection.namberToShow || 100;
-            this.newCollection = options.newCollection;
-            this.deleteCounter = 0;
-            this.page = options.collection.page;
-
-            listViewBase.prototype.initialize.call(this, options);
-
-            this.contentCollection = contentCollection;
-        },
-
-        recalcTotal: function () {
-            var total = 0;
-            var balance = 0;
-            var paid = 0;
-
-            _.each(this.collection.toJSON(), function (model) {
-                total += parseFloat(model.paymentInfo.total);
-                balance += parseFloat(model.paymentBalance);
-                paid += parseFloat(model.paymentsPaid);
-            });
-
-            this.$el.find('#total').text(helpers.currencySplitter(total.toFixed(2)));
-            this.$el.find('#balance').text(helpers.currencySplitter((balance / 100).toFixed(2)));
-            this.$el.find('#paid').text(helpers.currencySplitter((paid / 100).toFixed(2)));
-        },
-
-        uploadItem: function(){
-            return new uploadView();
-        },
-
-        goodsItem: function () {
-            var self = this;
-            var $thisEl = this.$el;
-            var $table = $thisEl.find('#listTable');
-            var collection = this.collection;
-            var url = collection.url;
-            var $checkedInputs;
-            var ids = [];
-            $checkedInputs = $table.find('input:checked');
-
-            $.each($checkedInputs, function () {
-                var $el = $(this);
-
-                ids.push($el.val());
-            });
-            var result = [];
-
-            ids = _.compact(ids);
-            var CreateAllView = this.CreateAllView;
-            if(ids.length){
-                 dataService.getData( 'purchaseOrders/getBySupplier', {
-                    ids : ids
-                }, function (response,context) {
-                    return new CreateAllView({orderModels: response});
-                },this);
-            }
-            else{
-                return App.render({
-                    type   : 'error',
-                    message: '请选择要入库的订单！'
-                });
-            }
-           
-        },
-
-        chooseOption: function (e) {
-            var self = this;
-            var target$ = $(e.target);
-            var targetElement = target$.parents('td');
-            var id = targetElement.attr('id');
-            var model = this.collection.get(id);
-
-            model.save({
-                workflow: target$.attr('id')
-            }, {
-                headers: {
-                    mid: 55
-                },
-
-                patch   : true,
-                validate: false,
-                success : function () {
-                    self.showFilteredPage(self.filter, self);
-                }
-            });
-
-            this.hideNewSelect();
-            return false;
-        },
-
-        showNewSelect: function (e) {
-            if ($('.newSelectList').is(':visible')) {
-                this.hideNewSelect();
-                return false;
-            }
-            $(e.target).parent().append(_.template(stagesTamplate, {stagesCollection: this.stages}));
-            return false;
-
-        },
-
-        gotoForm: function (e) {
-            var id = $(e.target).closest('tr').data('id');
-            var page = this.collection.currentPage;
-            var countPerPage = this.collection.pageSize;
-            var url = this.formUrl + id + '/p=' + page + '/c=' + countPerPage;
-
-            if (this.filter) {
-                url += '/filter=' + encodeURI(JSON.stringify(this.filter));
-            }
-
-            if ($(e.target).closest('tfoot').length) {
-                return;
-            }
-
-            App.ownContentType = true;
-            Backbone.history.navigate(url, {trigger: true});
-        },
-
-        hideNewSelect: function () {
-            $('.newSelectList').remove();
-        },
-
-        render: function () {
-            var self;
-            var $currentEl;
-            $('.ui-dialog ').remove();
-
-            self = this;
-            $currentEl = this.$el;
-
-            $currentEl.html('');
-            $currentEl.append(_.template(listTemplate));
-            $currentEl.append(new ListItemView({
-                collection : this.collection,
-                page       : this.page,
-                itemsNumber: this.collection.namberToShow
-            }).render()); // added two parameters page and items number
-            $currentEl.append(new ListTotalView({element: this.$el.find('#listTable'), cellSpan: 7}).render());
-
-            this.recalcTotal();
-
-            dataService.getData(CONSTANTS.URLS.WORKFLOWS_FETCH, {
-                wId         : 'Purchase Order',
-                source      : 'purchase',
-                targetSource: 'order'
-            }, function (stages) {
-                self.stages = stages;
-            });
-        }
-
-    });
-    return OrdersListView;
-});
+define([
+    'Backbone',
+    'jQuery',
+    'Underscore',
+    'views/listViewBase',
+    'text!templates/purchaseOrders/list/ListHeader.html',
+    'text!templates/stages.html',
+    'views/purchaseOrders/uploadView',
+    'views/purchaseOrders/CreateView',
+    'views/goodsInNotes/CreateAllView',
+    'views/purchaseOrders/list/ListItemView',
+    'views/purchaseOrders/list/ListTotalView',
+    'views/order/EditView',
+    'models/orderModel',
+    'collections/purchaseOrders/filterCollection',
+    'common',
+    'dataService',
+    'helpers',
+    'constants'
+], function (Backbone, $, _, listViewBase, listTemplate, stagesTamplate, uploadView, createView, createAllView, ListItemView, ListTotalView, EditView, OrderModel, contentCollection, common, dataService, helpers, CONSTANTS) {
+    'use strict';
+    var OrdersListView = listViewBase.extend({
+        CreateView       : createView,
+        CreateAllView    : createAllView,
+        listTemplate     : listTemplate,
+        ListItemView     : ListItemView,
+        contentCollection: contentCollection,
+        contentType      : 'purchaseOrders',
+        hasPagination    : true,
+
+        initialize: function (options) {
+            this.startTime = options.startTime;
+            this.collection = options.collection;
+            this.filter = options.filter || {};
+            this.filter.forSales = {
+                key  : 'forSales',
+                type : 'boolean',
+                value: ['false']
+            };
+            this.formUrl = 'easyErp/' + this.contentType + '/tform/';
+            this.forSales = false;
+            this.sort = options.sort;
+            this.defaultItemsNumber = this.collection.namberToShow || 100;
+            this.newCollection = options.newCollection;
+            this.deleteCounter = 0;
+            this.page = options.collection.page;
+
+            listViewBase.prototype.initialize.call(this, options);
+
+            this.contentCollection = contentCollection;
+        },
+
+        recalcTotal: function () {
+            var total = 0;
+            var balance = 0;
+            var paid = 0;
+
+            _.each(this.collection.toJSON(), function (model) {
+                total += parseFloat(model.paymentInfo.total);
+                balance += parseFloat(model.paymentBalance);
+                paid += parseFloat(model.paymentsPaid);
+            });
+
+            this.$el.find('#total').text(helpers.currencySplitter(total.toFixed(2)));
+            this.$el.find('#balance').text(helpers.currencySplitter((balance / 100).toFixed(2)));
+            this.$el.find('#paid').text(helpers.currencySplitter((paid / 100).toFixed(2)));
+        },
+
+        uploadItem: function(){
+            return new uploadView();
+        },
+
+        goodsItem: function () {
+            var self = this;
+            var $thisEl = this.$el;
+            var $table = $thisEl.find('#listTable');
+            var collection = this.collection;
+            var url = collection.url;
+            var $checkedInputs;
+            var ids = [];
+            $checkedInputs = $table.find('input:checked');
+
+            $.each($checkedInputs, function () {
+                var $el = $(this);
+
+                ids.push($el.val());
+            });
+            var result = [];
+
+            ids = _.compact(ids);
+            var CreateAllView = this.CreateAllView;
+            if(ids.length){
+                 dataService.getData( 'purchaseOrders/getBySupplier', {
+                    ids : ids
+                }, function (response,context) {
+                    var flag = true;
+                    response.forEach(function(order){
+                        if (order.workflow.status == 'New') {
+                            flag = false;
+                            return App.render({
+                                type   : 'error',
+                                message: '订单'+order.name+'尚未审核！'
+                            });
+                        }
+                    });
+                    if(flag == true){
+                        return new CreateAllView({orderModels: response});
+                    }
+                },this);
+            }
+            else{
+                return App.render({
+                    type   : 'error',
+                    message: '请选择要入库的订单！'
+                });
+            }
+           
+        },
+
+        chooseOption: function (e) {
+            var self = this;
+            var target$ = $(e.target);
+            var targetElement = target$.parents('td');
+            var id = targetElement.attr('id');
+            var model = this.collection.get(id);
+
+            model.save({
+                workflow: target$.attr('id')
+            }, {
+                headers: {
+                    mid: 55
+                },
+
+                patch   : true,
+                validate: false,
+                success : function () {
+                    self.showFilteredPage(self.filter, self);
+                }
+            });
+
+            this.hideNewSelect();
+            return false;
+        },
+
+        showNewSelect: function (e) {
+            if ($('.newSelectList').is(':visible')) {
+                this.hideNewSelect();
+                return false;
+            }
+            $(e.target).parent().append(_.template(stagesTamplate, {stagesCollection: this.stages}));
+            return false;
+
+        },
+
+        gotoForm: function (e) {
+            var id = $(e.target).closest('tr').data('id');
+            var page = this.collection.currentPage;
+            var countPerPage = this.collection.pageSize;
+            var url = this.formUrl + id + '/p=' + page + '/c=' + countPerPage;
+
+            if (this.filter) {
+                url += '/filter=' + encodeURI(JSON.stringify(this.filter));
+            }
+
+            if ($(e.target).closest('tfoot').length) {
+                return;
+            }
+
+            App.ownContentType = true;
+            Backbone.history.navigate(url, {trigger: true});
+        },
+
+        hideNewSelect: function () {
+            $('.newSelectList').remove();
+        },
+
+        render: function () {
+            var self;
+            var $currentEl;
+            $('.ui-dialog ').remove();
+
+            self = this;
+            $currentEl = this.$el;
+
+            $currentEl.html('');
+            $currentEl.append(_.template(listTemplate));
+            $currentEl.append(new ListItemView({
+                collection : this.collection,
+                page       : this.page,
+                itemsNumber: this.collection.namberToShow
+            }).render()); // added two parameters page and items number
+            $currentEl.append(new ListTotalView({element: this.$el.find('#listTable'), cellSpan: 7}).render());
+
+            this.recalcTotal();
+
+            dataService.getData(CONSTANTS.URLS.WORKFLOWS_FETCH, {
+                wId         : 'Purchase Order',
+                source      : 'purchase',
+                targetSource: 'order'
+            }, function (stages) {
+                self.stages = stages;
+            });
+        }
+
+    });
+    return OrdersListView;
+});
diff --git a/byerp/public/js/views/purchaseOrders/uploadView.js b/byerp/public/js/views/purchaseOrders/uploadView.js
index 3769357..1375f43 100644
--- a/byerp/public/js/views/purchaseOrders/uploadView.js
+++ b/byerp/public/js/views/purchaseOrders/uploadView.js
@@ -10,7 +10,7 @@ define([
              _,
              CreateTemplate,
              ParentView,
-             GoodsPlanModel) {
+             orderModel) {
 
     var CreateView = ParentView.extend({
         el         : '#content-holder',
@@ -23,7 +23,7 @@ define([
             if (options) {
                 this.visible = options.visible;
             }
-            this.model = new GoodsPlanModel();
+            this.model = new orderModel();
             this.responseObj = {};
             this.currencySymbol = '$';
             this.deletedProducts = [];
@@ -49,10 +49,10 @@ define([
                     Backbone.history.fragment = '';
                     Backbone.history.navigate(url, {trigger: true});
                 },
-                error: function(){
+                error: function(jqxhr){
                     App.render({
                         type   : 'error',
-                        message: '错误'
+                        message: jqxhr.responseJSON.error
                     });
                 }
             });
diff --git a/byerp/public/js/views/salaryReport/list/ListView.js b/byerp/public/js/views/salaryReport/list/ListView.js
index f5baa91..04d592c 100755
--- a/byerp/public/js/views/salaryReport/list/ListView.js
+++ b/byerp/public/js/views/salaryReport/list/ListView.js
@@ -156,6 +156,8 @@ define([
 
             App.filtersObject.filter = this.filter;
 
+            window.location.reload(); 
+                  
             custom.cacheToApp('salaryReport.filter', this.filter);
         },
 
diff --git a/byerp/public/js/views/settingsOverview/settingsEmployee/payrollStructureTypes/structureElement/CreateView.js b/byerp/public/js/views/settingsOverview/settingsEmployee/payrollStructureTypes/structureElement/CreateView.js
index a0920de..a364639 100644
--- a/byerp/public/js/views/settingsOverview/settingsEmployee/payrollStructureTypes/structureElement/CreateView.js
+++ b/byerp/public/js/views/settingsOverview/settingsEmployee/payrollStructureTypes/structureElement/CreateView.js
@@ -78,8 +78,8 @@ define([
                         _id : 'overtime',
                         name: '加班工资'
                     }, {
-                        _id : 'vacation',
-                        name: '假期工资'
+                        _id : 'communication',
+                        name: '通讯补贴'
                     }
                 ];
             }
@@ -111,6 +111,10 @@ define([
                         _id : 'other',
                         name: '其他扣款'
                     },
+                    {
+                        _id: 'cityHealth',
+                        name: '市医疗保险'
+                    }
                 ];
             }
             self.mapValues = {};
diff --git a/byerp/public/js/views/timeCard/CreateView.js b/byerp/public/js/views/timeCard/CreateView.js
index 71893f5..02f05fd 100644
--- a/byerp/public/js/views/timeCard/CreateView.js
+++ b/byerp/public/js/views/timeCard/CreateView.js
@@ -64,10 +64,15 @@ define([
         },
 
         uploadFile: function (e) {
+            var date = $('.monthPicker').val();
+            date = new Date(date);
+            var year = date.getFullYear();
+            var month = date.getMonth() + 1;
+            var datekey = year * 100 + month;
             var formData = new FormData();
             formData.append('file', $('#file')[0].files[0]);
             $.ajax({
-                url: '/timeCard/importFile',
+                url: '/timeCard/importFile/'+ datekey,
                 type: 'POST',
                 data: formData,
                 processData: false,
@@ -136,6 +141,34 @@ define([
 
             });
 
+            $('.monthPicker').val($.datepicker.formatDate('yy-mm', new Date()));
+            $('.monthPicker').datepicker({
+                dateFormat       : 'yy-mm',
+                changeMonth      : true,
+                changeYear       : true,
+                currentText      : '今天', 
+                closeText        : '确定',
+                showButtonPanel  : true,
+                monthNamesShort: ['一月','二月','三月','四月','五月','六月', '七月','八月','九月','十月','十一月','十二月'],
+                onChangeMonthYear: function (year, month, inst) {
+                    self.month = $('#ui-datepicker-div .ui-datepicker-month :selected').val();
+                    self.year = $('#ui-datepicker-div .ui-datepicker-year :selected').val();
+                    $(this).val($.datepicker.formatDate('yy-mm', new Date(self.year, self.month, 1)));
+                },
+                onClose          : function (dateText, inst) {
+                    self.month = $('#ui-datepicker-div .ui-datepicker-month :selected').val();
+                    self.year = $('#ui-datepicker-div .ui-datepicker-year :selected').val();
+                    $(this).val($.datepicker.formatDate('yy-mm', new Date(self.year, self.month, 1)));
+                }
+            }).focus(function () {
+                $('.ui-datepicker-calendar').hide();
+                $('#ui-datepicker-div').position({
+                    my: 'center top',
+                    at: 'center bottom',
+                    of: $(this)
+                });
+            });
+
             $notDiv = this.$el.find('.attach-container');
             
 
diff --git a/byerp/public/templates/Employees/CreateTemplate.html b/byerp/public/templates/Employees/CreateTemplate.html
index ae41f46..a67039e 100644
--- a/byerp/public/templates/Employees/CreateTemplate.html
+++ b/byerp/public/templates/Employees/CreateTemplate.html
@@ -48,7 +48,7 @@
                                                    id="first"
                                                    required
                                                    maxlength="32"
-                                                   placeholder="First Name"/>
+                                                   placeholder="姓"/>
                                             <label></label>
                                         </div>
                                     </dd>
@@ -61,7 +61,20 @@
                                                    id="last"
                                                    required
                                                    maxlength="32"
-                                                   placeholder="Last Name"/>
+                                                   placeholder="名"/>
+                                            <label></label>
+                                        </div>
+                                    </dd>
+                                    <dt>
+                                        <label for="last">首字母*</label>
+                                    </dt>
+                                    <dd>
+                                        <div class="_inputIconWrap">
+                                            <input type="text"
+                                                   id="alpha"
+                                                   required
+                                                   maxlength="32"
+                                                   placeholder="首字母"/>
                                             <label></label>
                                         </div>
                                     </dd>
@@ -86,7 +99,7 @@
                                             <input type="text"
                                                    id="mobile"
                                                    maxlength="20"
-                                                   placeholder="Personal Mobile"/>
+                                                   placeholder="手机号码"/>
                                             <label></label>
                                         </div>
                                     </dd>
@@ -99,19 +112,19 @@
                                                    id="phone"
                                                    class="blueback"
                                                    maxlength="20"
-                                                   placeholder="Work Phone"/>
+                                                   placeholder="家庭电话"/>
                                             <label></label>
                                         </div>
                                     </dd>
                                     <dt>
-                                        <label for="personalEmail">个人邮箱</label>
+                                        <label for="personalEmail">个人邮箱*</label>
                                     </dt>
                                     <dd>
                                         <div class="_inputIconWrap">
                                             <input type="text"
                                                    id="personalEmail"
                                                    maxlength="48"
-                                                   placeholder="e.g.email@site.com"/>
+                                                   placeholder="邮箱 例:e.g.email@site.com"/>
                                             <label></label>
                                         </div>
                                     </dd>
@@ -123,7 +136,7 @@
                                             <input type="text"
                                                    id="skype"
                                                    maxlength="64"
-                                                   placeholder="Skype"/>
+                                                   placeholder="QQ"/>
                                             <label></label>
                                         </div>
                                     </dd>
@@ -134,7 +147,7 @@
                                         <div class="_inputIconWrap">
                                             <input type="text"
                                                    id="LI"
-                                                   placeholder="LinkedIn"
+                                                   placeholder="微信"
                                                    maxlength="256"/>
                                             <label></label>
                                         </div>
@@ -146,7 +159,7 @@
                                         <div class="_inputIconWrap">
                                             <input type="text"
                                                    id="FB"
-                                                   placeholder="Facebook"
+                                                   placeholder="虚拟号"
                                                    maxlength="256"/>
                                             <label></label>
                                         </div>
@@ -182,7 +195,7 @@
                                                    id="workEmail"
                                                    class="blueback"
                                                    maxlength="48"
-                                                   placeholder="Work Email"/>
+                                                   placeholder="工作邮箱"/>
                                             <label></label>
                                         </div>
                                     </dd>
@@ -194,19 +207,19 @@
                                             <input type="text"
                                                    id="workId"
                                                    maxlength="20"
-                                                   placeholder="Workid"/>
+                                                   placeholder="工号"/>
                                             <label></label>
                                         </div>
                                     </dd>
                                     <dt>
-                                        <label for="status">是否在职</label>
+                                        <label for="status">是否在职*</label>
                                     </dt>
                                     <dd>
                                         <div class="_inputIconWrap">
                                             <input type="text"
                                                    id="status"
                                                    maxlength="20"
-                                                   placeholder="status"/>
+                                                   placeholder="是否在职"/>
                                             <label></label>
                                         </div>
                                     </dd>
@@ -234,6 +247,26 @@
                                              required
                                              maxlength="32"/>
                                     </dd>
+                                    <dt>
+                                      <label>部门内序号</label>
+                                    </dt>
+                                    <dd class="_inputIconWrap">
+                                      <input type="text"
+                                             id="deptRank"
+                                             placeholder="部门内序号" 
+                                             required
+                                             maxlength="32"/>
+                                    </dd>
+                                    <dt>
+                                        <label for="workCentre">工序</label>
+                                    </dt>
+                                    <dd class="_newSelectListWrap">
+                                        <a id="workCentre"
+                                           class="current-selected"
+                                           placeholder="工序"
+                                           href="javascript:;">选择
+                                        </a>
+                                    </dd>
                                 </dl>
                             </div>
                             <div class="clearfix"></div>
@@ -265,7 +298,7 @@
                                 <dd>
                                     <input type="text"
                                            name="nation"
-                                           placeholder="Nation"
+                                           placeholder="名族"
                                            id="nation"
                                            class="nation"
                                            maxlength="60"/>
@@ -276,7 +309,7 @@
                                 <dd>
                                     <input type="text"
                                            name="accountLocation"
-                                           placeholder="accountLocation"
+                                           placeholder="户口所在地"
                                            id="accountLocation"
                                            class="accountLocation"
                                            maxlength="60"/>
@@ -290,7 +323,7 @@
                                            id="identNo"
                                            class="blueback"
                                            maxlength="32"
-                                           placeholder="Identification №"/>
+                                           placeholder="身份证 №"/>
                                 </dd>                         
                                 <dt>
                                     <label for="dateBirth">出生日期</label>
@@ -325,7 +358,7 @@
                                            id="education"
                                            class="blueback"
                                            maxlength="32"
-                                           placeholder="education"/>
+                                           placeholder="学历"/>
                                 </dd>
                                 <dt>
                                     <label for="bankAccountNo">银行卡号 №</label>
@@ -336,7 +369,7 @@
                                            id="bankAccountNo"
                                            class="blueback"
                                            maxlength="32"
-                                           placeholder="Bank Account №"/>
+                                           placeholder="银行卡号 №"/>
                                 </dd>
                                 <dt>
                                     <label for="bankName">开户行</label>
@@ -347,7 +380,7 @@
                                            id="bankName"
                                            class="blueback"
                                            maxlength="32"
-                                           placeholder="bankName"/>
+                                           placeholder="开户行"/>
                                 </dd>
                                 <dt>
                                     <label for="passportNo">护照 №</label></dt>
@@ -357,7 +390,7 @@
                                            id="passportNo"
                                            class="blueback"
                                            maxlength="32"
-                                           placeholder="Passport №"/>
+                                           placeholder="护照 №"/>
                                 </dd>
                                 <dt>
                                     <label for="otherId">其他证件 </label>
@@ -368,7 +401,7 @@
                                            id="otherId"
                                            class="blueback"
                                            maxlength="32"
-                                           placeholder="Other Id"/>
+                                           placeholder="其他证件 Id"/>
                                 </dd>
                             </dl>
                             <div class="clearfix"></div>
@@ -422,7 +455,7 @@
                                    <input type="text"
                                           class="blueback birthPlace"
                                           name="birthPlace"
-                                          placeholder="birthPlace"
+                                          placeholder="出生地"
                                           id="birthPlace"
                                           maxlength="60"/>
                                </dd>
@@ -448,7 +481,7 @@
                                 <dd>
                                     <input type="text"
                                            name="zip"
-                                           placeholder="Zip Code"
+                                           placeholder="邮编"
                                            class="blueback"
                                            id="zip"
                                            maxlength="32"/>
@@ -566,7 +599,7 @@
                                 <th>X</th>
                                 <th>状态</th>
                                 <th>日期</th>
-                                <th>岗位</th>
+                                <th>岗位*</th>
                                 <th>部门*</th>
                                 <th>经理</th>
                                 <th>职务</th>
@@ -611,19 +644,19 @@
                                 <td class="_newSelectListWrap">
                                     <a id="weeklySchedulerDd" class="current-selected"
                                        data-id=""
-                                       href="javascript:;">Select
+                                       href="javascript:;">选择
                                     </a>
                                 </td>
                                 <td class="_newSelectListWrap">
                                     <a id="payrollStructureTypeDd" class="current-selected"
                                        data-id=""
-                                       href="javascript:;">Select
+                                       href="javascript:;">选择
                                     </a>
                                 </td>
                                 <td class="_newSelectListWrap">
                                     <a id="scheduledPayDd" class="current-selected"
                                        data-id=""
-                                       href="javascript:;">Select
+                                       href="javascript:;">选择
                                     </a>
                                 </td>
                                  <td class="editable" data-id="salary"></td> 
diff --git a/byerp/public/templates/Employees/EditTemplate.html b/byerp/public/templates/Employees/EditTemplate.html
index 5d4c140..cf252db 100644
--- a/byerp/public/templates/Employees/EditTemplate.html
+++ b/byerp/public/templates/Employees/EditTemplate.html
@@ -85,6 +85,16 @@
                                                value="<%=model.name.last%>"
                                                required maxlength="32"/>
                                     </dd>
+                                    <dt>
+                                        <label for="last">首字母*</label>
+                                    </dt>
+                                    <dd><input type="text"
+                                               class="blueback"
+                                               id="alpha"
+                                               placeholder="首字母"
+                                               value="<%=model.name.alpha%>"
+                                               required maxlength="32"/>
+                                    </dd>
                                     <!--                <dt><label for="tags">Tags</label></dt><dd><input type="text" id="tags" value="<%=model.tags%>" maxlength="32"/></dd>-->
                                     <dt>
                                         <label for="mobile">手机号码</label>
@@ -128,7 +138,7 @@
                                     <dd><input type="text"
                                                id="LI"
                                                value="<%=model.social.LI%>"
-                                               placeholder="LinkedIn"
+                                               placeholder="微信"
                                                maxlength="256"/>
                                     </dd>
                                     <dt>
@@ -137,7 +147,7 @@
                                     <dd><input type="text"
                                                id="FB"
                                                value="<%=model.social.FB%>"
-                                               placeholder="Facebook"
+                                               placeholder="虚拟号"
                                                maxlength="256"/>
                                     </dd>
                                     <dt>
@@ -147,7 +157,7 @@
                                       <a id="relatedUsersDd"
                                          data-id="<%=model.relatedUser?model.relatedUser._id:''%>"
                                          class="current-selected"
-                                         href="javascript:;"><%=model.relatedUser?(model.relatedUser.login):'Select'%>
+                                         href="javascript:;"><%=model.relatedUser?(model.relatedUser.login):'选择'%>
                                       </a>
                                     </dd>
                                     <dt>
@@ -212,7 +222,7 @@
                                         <a id="sourceDd"
                                            data-id="<%=model.source?model.source:''%>"
                                            class="current-selected"
-                                           href="javascript:;"><%=model.source?(model.source):'Select'%>
+                                           href="javascript:;"><%=model.source?(model.source):'选择'%>
                                         </a>
                                     </dd>
 
@@ -245,7 +255,28 @@
                                      value="<%=model.status%>"
                                      maxlength="32"/>
                                    </dd>
-                                </dl>
+                                   <dt>
+                                      <label>部门内序号</label>
+                                    </dt>
+                                    <dd class="_inputIconWrap">
+                                      <input type="text"
+                                             id="deptRank"
+                                             placeholder="部门内序号" 
+                                             value="<%=model.deptRank? model.deptRank: 0%>" 
+                                             required
+                                             maxlength="32"/>
+                                    </dd>
+                                    <dt>
+                                        <label for="workCentre">工序</label>
+                                    </dt>
+                                    <dd class="_newSelectListWrap">
+                                        <a id="workCentre"
+                                           class="current-selected"
+                                           data-id="<%=model.workCentre? model.workCentre._id: ''%>"
+                                           href="javascript:;"><%=model.workCentre? model.workCentre.name: '选择'%>
+                                        </a>
+                                    </dd>
+                                    </dl>
                             </div>
 
                             <div class="clearfix"></div>
diff --git a/byerp/public/templates/buildingContract/inventoryEdit.html b/byerp/public/templates/buildingContract/inventoryEdit.html
index f9c2432..f1daaee 100644
--- a/byerp/public/templates/buildingContract/inventoryEdit.html
+++ b/byerp/public/templates/buildingContract/inventoryEdit.html
@@ -4,7 +4,7 @@
        <input type="text" style="border: 0; text-align:center;" id="product" value="<%=inventory.product%>" readonly="readonly"/>
     </td> -->
     <td data-name="product" class="jobs trash " style="text-align: center;">
-        <a id="product" class="current-selected" data-id="<%=inventory.productId%>" href="javascript:;"><%=(inventory.product) ? inventory.product : '请选择'%></a>
+        <a id="product" class="current-selected" data-id="<%=inventory.product._id%>" href="javascript:;"><%=(inventory.product) ? inventory.product.name : '请选择'%></a>
     </td>
     <td data-name="quantity" class="jobs trash " style="text-align: center;">
         <input type="text" style="border: 0; text-align:center;" id="quantity" value="<%=inventory.quantity%>" readonly="readonly"/>
diff --git a/byerp/public/templates/designRec/CreateTemplate.html b/byerp/public/templates/designRec/CreateTemplate.html
index c08f3b6..8393412 100755
--- a/byerp/public/templates/designRec/CreateTemplate.html
+++ b/byerp/public/templates/designRec/CreateTemplate.html
@@ -119,7 +119,7 @@
 
             <div class="left withPaddingRightProject" style = "margin-left: 8px; margin-bottom: 14px;">
                 <div style="margin-top: 1px">
-                    <dt style="width: 124px; font-size:13px;">是否通过评审</dt>
+                    <dt style="width: 124px; font-size:13px;">是否来料</dt>
                     <dd style="width: 600px">
                         <input type="radio" name="isReview" style="width: 30px;height: 18px;border: 2px;border-radius: 50% " data-value="true">是
                         <input type="radio" name="isReview" style="width: 30px;height: 18px;border: 2px;border-radius: 50% " data-value="false">否
diff --git a/byerp/public/templates/designRec/EditTemplate.html b/byerp/public/templates/designRec/EditTemplate.html
index 6459e47..75383ae 100755
--- a/byerp/public/templates/designRec/EditTemplate.html
+++ b/byerp/public/templates/designRec/EditTemplate.html
@@ -117,7 +117,7 @@
 
                     <div class="left withPaddingRightProject" style = "margin-left: 8px; margin-bottom: 14px;">
                         <div style="margin-top: 1px">
-                            <dt style="width: 124px; font-size:13px;">是否通过评审</dt>
+                            <dt style="width: 124px; font-size:13px;">是否来料</dt>
                             <dd style="width: 600px">
                                 <input type="radio" name="isReview" style="width: 30px;height: 18px;border: 2px;border-radius: 50% " data-value="true" <%=(model.isReview) ? 'checked' : ''%>>是
                                 <input type="radio" name="isReview" style="width: 30px;height: 18px;border: 2px;border-radius: 50% " data-value="false" <%=(model.isReview) ? '' : 'checked'%>>否
diff --git a/byerp/public/templates/goodsInNotes/CreateTemplate.html b/byerp/public/templates/goodsInNotes/CreateTemplate.html
index d096907..3de9147 100644
--- a/byerp/public/templates/goodsInNotes/CreateTemplate.html
+++ b/byerp/public/templates/goodsInNotes/CreateTemplate.html
@@ -1,31 +1,45 @@
-<div class="form-holder _newForm">
-    <form method="post" action="" class="form" id="stockCorrection">
-        <h4 class="_dialogMainTitle">订单入库 <a class="blue" id="name"> #<%=model.name%></a></h4>
-        <div class="_formWrap">
-            <div class="_formBlock _equal">
-                <div class="_animateInputBox">
-                        <dl class="opp-info">
-                            <dt><label for="date">日期</label></dt>
-                            <dd><input id="date" class="_animate" readonly/></dd>
-
-                            <dt><label for="shippinglist">码单</label></dt>
-                            <dd><input id="shippinglist" class="shippinglist" type="text"/></dd>
-                        </dl>
-                </div>
-            </div>
-            <div class="_formBlock _equal">
-                        <dl class="opp-info">
-                            <dt><label for="warehouseDd">仓库</label></dt>
-                            <dd><a id="warehouseDd" class="current-selected" href="javascript:;" data-id="<%=model.warehouse ? model.warehouse._id : ''%>"><%=model.warehouse ? model.warehouse.name : '选择仓库'%></a></dd>
-                        </dl>
-            </div>
-        </div>
-        
-        <div class="_formWrap">
-            <div class="_formBlock">
-                <div id="productItemsHolder" class="_SkuItemsHolder"></div>
-                <div id="goodsHolder" class="_goodsHolder"></div>
-            </div>
-        </div>
-    </form>
+<div class="form-holder">
+    <form method="post" action="" class="form" id="stockCorrection">
+        <fieldset>
+            <div class="inner">
+
+                <div class="clearfix"></div>
+
+                <div class="topPanel">
+                    <h2>采购订单入库 <span id="name" >#<a class="blue" href="javascript:;"><%=model.name%></a></span></span></h2>
+                    <div class="clearfix"></div>
+                    <!-- <input id="date" class="_inputBordered " readonly/> -->
+
+                    <!--<div class="_dialogRow">Shipping method</div>
+                    <div class="_dialogRow wrapper"><a class="current-selected" id="shippingMethods" href="javascript:;">Select</a></div>
+                    <div class="_dialogRow">Shipping Cost</div>
+                    <div class="_dialogRow"><input id="shippingCost" value="<%=model && model.shippingExpenses ? (model.shippingExpenses.amount / 100).toFixed(2) : 0%>"></div>
+-->
+                </div>
+
+                <div class="topInputHolder">
+                    <div class="half-block left">
+                        <dl class="opp-info">
+                            <dt><label for="date">日期</label></dt>
+                            <dd><input id="date" class="_inputBordered "/readonly></dd>
+
+                            <dt><label for="shippinglist">码单</label></dt>
+                            <dd><input id="shippinglist" class="shippinglist" type="text"/></dd>
+                        </dl>
+                </div>
+                <div class="half-block right">
+                        <dl class="opp-info">
+                            <dt><label for="warehouseDd">仓库</label></dt>
+                            <dd><a id="warehouseDd" class="current-selected" href="javascript:;" data-id="<%=model.warehouse ? model.warehouse._id : ''%>"><%=model.warehouse ? model.warehouse.name : '选择'%></a></dd>
+                        </dl>
+                    </div>
+                    <div class="clearfix"></div>
+                </div>
+                <div class="clearfix"></div>
+                <div id="productItemsHolder" class="_SkuItemsHolder"></div>
+                <div id="goodsHolder" class="_goodsHolder"></div>
+                <div class="clearfix"></div>
+            </div>
+        </fieldset>
+    </form>
 </div>
\ No newline at end of file
diff --git a/byerp/public/templates/goodsInNotes/EmailTemplate.html b/byerp/public/templates/goodsInNotes/EmailTemplate.html
index 95a09f0..68bac49 100644
--- a/byerp/public/templates/goodsInNotes/EmailTemplate.html
+++ b/byerp/public/templates/goodsInNotes/EmailTemplate.html
@@ -1,28 +1,28 @@
-<div class="form-holder">
-    <form method="post" action="" id="sendEmailForm" class="form">
-        <fieldset>
-            <div class="inner">
-                <div class="topInputHolder">
-                    <h2>Email Goods Note</h2>
-                </div>
-                <dl class="opp-info">
-                    <dt><label for="To">To:</label></dt>
-                    <dd>
-                        <input id="To" class="" type="email" value="<%= model.order && model.order.supplier ? model.order.supplier.email : ''%>" multiple/>
-                    </dd>
-                    <dt><label for="Cc">Cc:</label></dt>
-                    <dd>
-                        <input id="Cc" class="" type="email" value="" multiple/>
-                    </dd>
-
-                    <dt><label for="Attachments-list">Attachments:</label></dt>
-                    <dd>
-                        <ul id="Attachments-list" class="attachContainer">
-                            <li><a href="javascript:;"><%=attachment.name %></a></li>
-                        </ul>
-                    </dd>
-                </dl>
-            </div>
-        </fieldset>
-    </form>
+<div class="form-holder">
+    <form method="post" action="" id="sendEmailForm" class="form">
+        <fieldset>
+            <div class="inner">
+                <div class="topInputHolder">
+                    <h2>Email Goods Note</h2>
+                </div>
+                <dl class="opp-info">
+                    <dt><label for="To">To:</label></dt>
+                    <dd>
+                        <input id="To" class="" type="email" value="<%= model.order && model.order.supplier ? model.order.supplier.email : ''%>" multiple/>
+                    </dd>
+                    <dt><label for="Cc">Cc:</label></dt>
+                    <dd>
+                        <input id="Cc" class="" type="email" value="" multiple/>
+                    </dd>
+
+                    <dt><label for="Attachments-list">Attachments:</label></dt>
+                    <dd>
+                        <ul id="Attachments-list" class="attachContainer">
+                            <li><a href="javascript:;"><%=attachment.name %></a></li>
+                        </ul>
+                    </dd>
+                </dl>
+            </div>
+        </fieldset>
+    </form>
 </div>
\ No newline at end of file
diff --git a/byerp/public/templates/goodsInNotes/PackNote.html b/byerp/public/templates/goodsInNotes/PackNote.html
index 7ce35af..8cac46c 100644
--- a/byerp/public/templates/goodsInNotes/PackNote.html
+++ b/byerp/public/templates/goodsInNotes/PackNote.html
@@ -1,12 +1,12 @@
-<div class="form-holder _dialogWrap">
-    <div class="_dialogMainTitle">Set Goods as packed</div>
-    <div class="_dialogBlock">
-        <div class="_dialogRow">Tracking refence</div>
-        <div class="_dialogRow"><input id="currencySymbol" value=""></div>
-        <div class="_dialogRow">Shipping method</div>
-        <div class="_dialogRow wrapper"><a class="current-selected" id="shippingMethods" href="javascript:;">Select</a></div>
-        <div class="_dialogRow">Shipping Cost</div>
-        <div class="_dialogRow"><input id="shippingCost" value="<%=model.order && model.order.shippingExpenses ? (model.order.shippingExpenses.amount / 100).toFixed(2) : 0%>"></div>
-    </div>
-</div>
-
+<div class="form-holder _dialogWrap">
+    <div class="_dialogMainTitle">Set Goods as packed</div>
+    <div class="_dialogBlock">
+        <div class="_dialogRow">Tracking refence</div>
+        <div class="_dialogRow"><input id="currencySymbol" value=""></div>
+        <div class="_dialogRow">Shipping method</div>
+        <div class="_dialogRow wrapper"><a class="current-selected" id="shippingMethods" href="javascript:;">Select</a></div>
+        <div class="_dialogRow">Shipping Cost</div>
+        <div class="_dialogRow"><input id="shippingCost" value="<%=model.order && model.order.shippingExpenses ? (model.order.shippingExpenses.amount / 100).toFixed(2) : 0%>"></div>
+    </div>
+</div>
+
diff --git a/byerp/public/templates/goodsInNotes/ProductItems.html b/byerp/public/templates/goodsInNotes/ProductItems.html
index bd03ff8..80312d7 100644
--- a/byerp/public/templates/goodsInNotes/ProductItems.html
+++ b/byerp/public/templates/goodsInNotes/ProductItems.html
@@ -1,100 +1,100 @@
-
-<table class="list _projectTableLeftAlign tableFixed _invoiceTable">
-    <colgroup>
-        <col width="50px">
-        <col width="50px">
-        <col width="50px">
-        <col width="70px">
-        <col width="50px">
-        <col width="50px">
-        <col width="50px">
-        <col width="50px">
-        <col width="100px">
-    </colgroup>
-    <thead>
-    <tr class="productListItemsColumns _deleteHeader">
-        <th class="width20">产品名称</th>
-        <th class="width20">数量</th>
-        <th class="width20">已入库</th>
-        <th class="width20">备注</th>
-        <th class="width20">税率</th>
-        <th class="width20">税额</th>
-        <th class="width20">总价</th>
-        <th class="width20">入库量/库位</th>
-        <th class="width20">参数</th>
-    </tr>
-    </thead>
-    <tbody id="tbodyProducts">
-    <table class = "orderModel">
-                <colgroup>
-                    <col width="50px">
-                    <col width="50px">
-                    <col width="50px">
-                    <col width="70px">
-                    <col width="50px">
-                    <col width="50px">
-                    <col width="50px">
-                    <col width="50px">
-                    <col width="100px">
-                </colgroup>
-
-    <%products.forEach(function(elem){%>
-
-    <%if (elem.product) {%>
-    <tr class="productItem deleteRow" id="<%=elem._id%>" data-id="<%=elem.warehouse ? elem.warehouse._id : ''%>">
-
-        <td id="productsDd" data-id="<%=elem.product._id%>"><%=elem.product.name%></td>
-        <td data-name="ordered">
-            <input id="ordered" class="quantity statusInfo" maxlength="9" value="<%=elem.quantity%>" size=7 type="text" readonly/>
-        </td>
-        <td data-name="received">
-            <input id="received" class="quantity statusInfo" maxlength="9" value="<%=elem.fulfilled || 0%>" size=7 type="text" readonly/>
-        </td>
-        <td data-name="description"><%=elem.description%></td>
-        <td data-name="taxCodeLine" class="taxCodeLine">
-            <div class="_newSelectListWrap">
-                <a class="current-selected taxCode" id="taxCodeLine" data-content="taxCode" href="javascript:;" data-id="">选择</a>
-            </div>
-        </td>
-        <td data-name="taxesAccount">
-            <input id="taxesAccount" class="taxesAccount statusInfo" maxlength="9" value="<%=(elem.subTotal/(1+17/100)*(17/100)).toFixed(2)%>" size=7 type="text"/>
-        </td>
-        <td data-name="subTotal">
-            <input id="subTotal" class="subTotal statusInfo" maxlength="9" value="<%=(elem.subTotal/1).toFixed(2) || 0%>" size=7 type="text" />
-        </td>
-        <td data-name="newShip">
-            <div class="receiveLocation">
-                <div>
-                    <input id="newShip" class="quantity" maxlength="9" value="<%=elem.quantity - elem.fulfilled%>" size=7 type="text"/>
-                    into
-                </div>
-                <div>
-                    <a class="current-selected" id="locationDd" href="javascript:;" data-id="<%= elem.location ? elem.location._id : ''%>">
-                        <%=elem.location ? elem.location.name: '选择' %>
-                    </a>
-                </div>
-            </div>
-
-        </td>
-        <% elem.parameters.forEach(function(para,index){ %>
-            <% if(index === 0){ %>
-                <% parameter = para.paraname + " : " + para.value; %>
-            <% }else if(para.value !== ""){ %>
-                <% parameter = parameter + " / " + para.paraname + " : " + para.value; %>
-            <% } %>
-        <% }); %>
-        <td data-name="paras"><%=parameter%></td>
-    </tr>
-    <%}%>
-    <%})%>
-    </table>
-
-    <tr>
-        <td class="invisible_border">&nbsp;</td>
-    </tr>
-    </tbody>
-</table>
-<div class="clearfix"></div>
-<div id="totalAmountContainer" class="_totalAmountContainer _createPopup">
-
+
+<table class="list _projectTableLeftAlign tableFixed _invoiceTable">
+    <colgroup>
+        <col width="50px">
+        <col width="50px">
+        <col width="50px">
+        <col width="70px">
+        <col width="50px">
+        <col width="50px">
+        <col width="50px">
+        <col width="50px">
+        <col width="100px">
+    </colgroup>
+    <thead>
+    <tr class="productListItemsColumns _deleteHeader">
+        <th class="width20">产品名称</th>
+        <th class="width20">数量</th>
+        <th class="width20">已入库</th>
+        <th class="width20">备注</th>
+        <th class="width20">税率</th>
+        <th class="width20">税额</th>
+        <th class="width20">总价</th>
+        <th class="width20">入库量/库位</th>
+        <th class="width20">参数</th>
+    </tr>
+    </thead>
+    <tbody id="tbodyProducts">
+    <table class = "orderModel">
+                <colgroup>
+                    <col width="50px">
+                    <col width="50px">
+                    <col width="50px">
+                    <col width="70px">
+                    <col width="50px">
+                    <col width="50px">
+                    <col width="50px">
+                    <col width="50px">
+                    <col width="100px">
+                </colgroup>
+
+    <%products.forEach(function(elem){%>
+
+    <%if (elem.product) {%>
+    <tr class="productItem deleteRow" id="<%=elem._id%>" data-id="<%=elem.warehouse ? elem.warehouse._id : ''%>">
+
+        <td id="productsDd" data-id="<%=elem.product._id%>"><%=elem.product.name%></td>
+        <td data-name="ordered">
+            <input id="ordered" class="quantity statusInfo" maxlength="9" value="<%=elem.quantity%>" size=7 type="text" readonly/>
+        </td>
+        <td data-name="received">
+            <input id="received" class="quantity statusInfo" maxlength="9" value="<%=elem.fulfilled || 0%>" size=7 type="text" readonly/>
+        </td>
+        <td data-name="description"><%=elem.description%></td>
+        <td data-name="taxCodeLine" class="taxCodeLine">
+            <div class="_newSelectListWrap">
+                <a class="current-selected taxCode" id="taxCodeLine" data-content="taxCode" href="javascript:;" data-id="">选择</a>
+            </div>
+        </td>
+        <td data-name="taxesAccount">
+            <input id="taxesAccount" class="taxesAccount statusInfo" maxlength="9" value="<%=(elem.subTotal/(1+17/100)*(17/100)).toFixed(2)%>" size=7 type="text"/>
+        </td>
+        <td data-name="subTotal">
+            <input id="subTotal" class="subTotal statusInfo" maxlength="9" value="<%=(elem.subTotal/1).toFixed(2) || 0%>" size=7 type="text" />
+        </td>
+        <td data-name="newShip">
+            <div class="receiveLocation">
+                <div>
+                    <input id="newShip" class="quantity" maxlength="9" value="<%=elem.quantity - elem.fulfilled%>" size=7 type="text"/>
+                    into
+                </div>
+                <div>
+                    <a class="current-selected" id="locationDd" href="javascript:;" data-id="<%= elem.location ? elem.location._id : ''%>">
+                        <%=elem.location ? elem.location.name: '选择' %>
+                    </a>
+                </div>
+            </div>
+
+        </td>
+        <% elem.parameters.forEach(function(para,index){ %>
+            <% if(index === 0){ %>
+                <% parameter = para.paraname + " : " + para.value; %>
+            <% }else if(para.value !== ""){ %>
+                <% parameter = parameter + " / " + para.paraname + " : " + para.value; %>
+            <% } %>
+        <% }); %>
+        <td data-name="paras"><%=parameter%></td>
+    </tr>
+    <%}%>
+    <%})%>
+    </table>
+
+    <tr>
+        <td class="invisible_border">&nbsp;</td>
+    </tr>
+    </tbody>
+</table>
+<div class="clearfix"></div>
+<div id="totalAmountContainer" class="_totalAmountContainer _createPopup">
+
 </div>
\ No newline at end of file
diff --git a/byerp/public/templates/goodsInNotes/TopBarTemplate.html b/byerp/public/templates/goodsInNotes/TopBarTemplate.html
index 11581f6..0f976e4 100644
--- a/byerp/public/templates/goodsInNotes/TopBarTemplate.html
+++ b/byerp/public/templates/goodsInNotes/TopBarTemplate.html
@@ -1,7 +1,7 @@
-<h3><%=contentHeader%></h3>
-<div id="createBtnHolder" class="btnsBlock">
-    <a href="javascript:;" class="fa fa-wrench" title="Edit" id="top-bar-editBtn"></a>
-    <a href="javascript:;" class="fa fa-check" title="Save" id="top-bar-saveBtn"></a>
-    <!--<a href="javascript:;" class="top-bar-deleteBtn" title="Remove" id="top-bar-deleteBtn"></a>-->
-</div>
-
+<h3><%=contentHeader%></h3>
+<div id="createBtnHolder" class="btnsBlock">
+    <a href="javascript:;" class="fa fa-wrench" title="Edit" id="top-bar-editBtn"></a>
+    <a href="javascript:;" class="fa fa-check" title="Save" id="top-bar-saveBtn"></a>
+    <a href="javascript:;"  class="btn blue slim plus" title="Remove" id="top-bar-deleteBtn">删除</a>
+</div>
+
diff --git a/byerp/public/templates/goodsInNotes/form/ContentTemplate.html b/byerp/public/templates/goodsInNotes/form/ContentTemplate.html
index f6bdbbc..8f572b9 100644
--- a/byerp/public/templates/goodsInNotes/form/ContentTemplate.html
+++ b/byerp/public/templates/goodsInNotes/form/ContentTemplate.html
@@ -1,40 +1,40 @@
-<div class="listWrap proformaList">
-    <div class="listContentWrap">
-        <div class="listContentTitle">
-            <div class="dropDown">
-                <a id="sortBy" class="icon-list5 dropBtn"></a>
-                <ul>
-                    <li class="oe_sortable" data-sort="description">
-                        <span class="dropContent">备注</span>
-                        <span class="sortArrow"></span>
-                    </li>
-                    <li class="oe_sortable" data-sort="createdBy.date">
-                        <span class="dropContent">日期</span>
-                        <span class="sortArrow"></span>
-                    </li>
-                    <li class="oe_sortable" data-sort="warehouse.name">
-                        <span class="dropContent">仓库</span>
-                        <span class="sortArrow"></span>
-                    </li>
-                    <li class="oe_sortable" data-sort="location.name">
-                        <span class="dropContent">库位</span>
-                        <span class="sortArrow"></span>
-                    </li>
-                </ul>
-            </div>
-            <div id="searchContainer"></div>
-        </div>
-        <div id="listContent" class="listContent">
-
-        </div>
-        <div id="listPagination"></div>
-    </div>
-    <div class="formContentWrap">
-        <div class="formContentTitle">
-            <span class="closeBtn"></span>
-        </div>
-        <div id="formContent" class="formContent">
-
-        </div>
-    </div>
+<div class="listWrap proformaList">
+    <div class="listContentWrap">
+        <div class="listContentTitle">
+            <div class="dropDown">
+                <a id="sortBy" class="icon-list5 dropBtn"></a>
+                <ul>
+                    <li class="oe_sortable" data-sort="description">
+                        <span class="dropContent">备注</span>
+                        <span class="sortArrow"></span>
+                    </li>
+                    <li class="oe_sortable" data-sort="createdBy.date">
+                        <span class="dropContent">日期</span>
+                        <span class="sortArrow"></span>
+                    </li>
+                    <li class="oe_sortable" data-sort="warehouse.name">
+                        <span class="dropContent">仓库</span>
+                        <span class="sortArrow"></span>
+                    </li>
+                    <li class="oe_sortable" data-sort="location.name">
+                        <span class="dropContent">库位</span>
+                        <span class="sortArrow"></span>
+                    </li>
+                </ul>
+            </div>
+            <div id="searchContainer"></div>
+        </div>
+        <div id="listContent" class="listContent">
+
+        </div>
+        <div id="listPagination"></div>
+    </div>
+    <div class="formContentWrap">
+        <div class="formContentTitle">
+            <span class="closeBtn"></span>
+        </div>
+        <div id="formContent" class="formContent">
+
+        </div>
+    </div>
 </div>
\ No newline at end of file
diff --git a/byerp/public/templates/goodsInNotes/form/FormTemplate.html b/byerp/public/templates/goodsInNotes/form/FormTemplate.html
index 4a6d186..c925af9 100644
--- a/byerp/public/templates/goodsInNotes/form/FormTemplate.html
+++ b/byerp/public/templates/goodsInNotes/form/FormTemplate.html
@@ -58,6 +58,11 @@
                                 </button>
                             </div>
                         <% } %>
+                            <div class="right">
+                                <button class="btn goodsReturn">
+                                    <span>入库单退货</span>
+                                </button>
+                            </div>
                         <div class="clearfix"></div>
                     </div>
                 </div>
diff --git a/byerp/public/templates/goodsInNotes/goodsNoteItems.html b/byerp/public/templates/goodsInNotes/goodsNoteItems.html
index 989351b..a98574b 100644
--- a/byerp/public/templates/goodsInNotes/goodsNoteItems.html
+++ b/byerp/public/templates/goodsInNotes/goodsNoteItems.html
@@ -1,119 +1,119 @@
-<b>Goods Notes</b>
-<table class="list _projectTableLeftAlign tableFixed _invoiceTable">
-    <colgroup>
-        <col width="100px">
-        <col width="150px">
-        <col width="10%">
-        <col width="10%">
-        <col width="10%">
-        <col width="10%">
-        <col width="10%">
-        <col width="10%">
-        <col width="10%">
-        <col width="10%">
-        <col width="10%">
-        <col width="30px">
-    </colgroup>
-    <thead>
-    <tr class="productListItemsColumns _deleteHeader">
-        <th class="width20">
-            Goods note ID
-        </th>
-        <th class="width20">
-            Warehouse name
-        </th>
-        <th class="width20">
-            Order
-        </th>
-        <th class="width20">
-           Printed
-        </th>
-        <th class="width20">
-            By
-        </th>
-        <th class="width20">
-            Picked
-        </th>
-        <th class="width20">
-            By
-        </th>
-        <th class="width20">
-            Packed
-        </th>
-        <th class="width20">
-            By
-        </th>
-        <th class="width20">
-        Shipped
-        </th>
-        <th class="width20">
-            By
-        </th>
-        <th class="deleteCell"></th>
-    </tr>
-    </thead>
-    <tbody id="tbodyProducts">
-
-    <%goodsNotes.forEach(function(elem){%>
-    <tr class="productItem deleteRow" id="<%=elem._id%>">
-
-        <td data-name="productName" class="">
-
-            <span class="current-selected" id="productsDd" href="javascript:;" data-id="">
-<%= elem ? elem.name : ''%>
-            </span>
-        </td>
-        <td data-name="warehouse">
-            <%= elem.warehouse ? elem.warehouse.name :  ''%>
-        </td>
-        <td data-name="order">
-            <%= elem.order ? elem.order.name :  ''%>
-        </td>
-        <td data-name="printed">
-
-            <%= elem.status && elem.status.printedById  ? elem.status.printedById.login :  ''%>
-        </td>
-        <td data-name="printed">
-            <%= elem.status ? elem.status.printedOn :  ''%>
-        </td>
-        <td data-name="picked">
-            <%= elem.status && elem.status.pickedById ? elem.status.pickedById.login :  ''%>
-
-        </td>
-        <td data-name="printed">
-            <%= elem.status ? elem.status.pickedOn :  ''%>
-        </td>
-        <td data-name="packed">
-
-            <%= elem.status && elem.status.packedById ? elem.status.packedById.login :  ''%>
-        </td>
-        <td data-name="packed">
-            <%= elem.status ? elem.status.packedOn :  ''%>
-        </td>
-        <td data-name="shipped">
-
-            <%= elem.status && elem.status.shippedById ? elem.status.shippedById.login :  ''%>
-        </td>
-        <td data-name="shipped">
-            <%= elem.status ? elem.status.shippedOn :  ''%>
-        </td>
-        <td class="deleteCell centerCell">
-            <%if (elem.status && ! elem.status.shipped){%>
-            <span title="Delete" class="icon-close5 removeJob"></span>
-            <%}%>
-        </td>
-    </tr>
-    <%})%>
-
-    <tr>
-        <td class="invisible_border">&nbsp;</td>
-    </tr>
-    <tr>
-        <td class="invisible_border">&nbsp;</td>
-    </tr>
-    </tbody>
-</table>
-<div class="clearfix"></div>
-<div id="totalAmountContainer" class="_totalAmountContainer _createPopup">
-
+<b>Goods Notes</b>
+<table class="list _projectTableLeftAlign tableFixed _invoiceTable">
+    <colgroup>
+        <col width="100px">
+        <col width="150px">
+        <col width="10%">
+        <col width="10%">
+        <col width="10%">
+        <col width="10%">
+        <col width="10%">
+        <col width="10%">
+        <col width="10%">
+        <col width="10%">
+        <col width="10%">
+        <col width="30px">
+    </colgroup>
+    <thead>
+    <tr class="productListItemsColumns _deleteHeader">
+        <th class="width20">
+            Goods note ID
+        </th>
+        <th class="width20">
+            Warehouse name
+        </th>
+        <th class="width20">
+            Order
+        </th>
+        <th class="width20">
+           Printed
+        </th>
+        <th class="width20">
+            By
+        </th>
+        <th class="width20">
+            Picked
+        </th>
+        <th class="width20">
+            By
+        </th>
+        <th class="width20">
+            Packed
+        </th>
+        <th class="width20">
+            By
+        </th>
+        <th class="width20">
+        Shipped
+        </th>
+        <th class="width20">
+            By
+        </th>
+        <th class="deleteCell"></th>
+    </tr>
+    </thead>
+    <tbody id="tbodyProducts">
+
+    <%goodsNotes.forEach(function(elem){%>
+    <tr class="productItem deleteRow" id="<%=elem._id%>">
+
+        <td data-name="productName" class="">
+
+            <span class="current-selected" id="productsDd" href="javascript:;" data-id="">
+<%= elem ? elem.name : ''%>
+            </span>
+        </td>
+        <td data-name="warehouse">
+            <%= elem.warehouse ? elem.warehouse.name :  ''%>
+        </td>
+        <td data-name="order">
+            <%= elem.order ? elem.order.name :  ''%>
+        </td>
+        <td data-name="printed">
+
+            <%= elem.status && elem.status.printedById  ? elem.status.printedById.login :  ''%>
+        </td>
+        <td data-name="printed">
+            <%= elem.status ? elem.status.printedOn :  ''%>
+        </td>
+        <td data-name="picked">
+            <%= elem.status && elem.status.pickedById ? elem.status.pickedById.login :  ''%>
+
+        </td>
+        <td data-name="printed">
+            <%= elem.status ? elem.status.pickedOn :  ''%>
+        </td>
+        <td data-name="packed">
+
+            <%= elem.status && elem.status.packedById ? elem.status.packedById.login :  ''%>
+        </td>
+        <td data-name="packed">
+            <%= elem.status ? elem.status.packedOn :  ''%>
+        </td>
+        <td data-name="shipped">
+
+            <%= elem.status && elem.status.shippedById ? elem.status.shippedById.login :  ''%>
+        </td>
+        <td data-name="shipped">
+            <%= elem.status ? elem.status.shippedOn :  ''%>
+        </td>
+        <td class="deleteCell centerCell">
+            <%if (elem.status && ! elem.status.shipped){%>
+            <span title="Delete" class="icon-close5 removeJob"></span>
+            <%}%>
+        </td>
+    </tr>
+    <%})%>
+
+    <tr>
+        <td class="invisible_border">&nbsp;</td>
+    </tr>
+    <tr>
+        <td class="invisible_border">&nbsp;</td>
+    </tr>
+    </tbody>
+</table>
+<div class="clearfix"></div>
+<div id="totalAmountContainer" class="_totalAmountContainer _createPopup">
+
 </div>
\ No newline at end of file
diff --git a/byerp/public/templates/goodsInNotes/list/ListHeader.html b/byerp/public/templates/goodsInNotes/list/ListHeader.html
index c93eb75..1143f8b 100644
--- a/byerp/public/templates/goodsInNotes/list/ListHeader.html
+++ b/byerp/public/templates/goodsInNotes/list/ListHeader.html
@@ -3,15 +3,13 @@
     <table class="list stripedList">
         <colgroup>
             <col width="42px">
-            <col width="10%">
-            <col width="10%" hidden>
-            <col width="10%">
-            <col width="10%">
-            <col width="10%">
-            <col width="10%">
-            <col width="10%">
-            <col width="10%">
-            <col width="10%">
+            <col width="16%">
+            <col width="14%">
+            <col width="14%">
+            <col width="14%">
+            <col width="14%">
+            <col width="14%">
+            <col width="14%">
         </colgroup>
         <thead>
         <tr>
@@ -27,12 +25,6 @@
             <th class="oe_sortable" data-sort="shippinglist" style="text-align: center">码单号</th>
                 <span class="arrow down"></span>
                 <span class="arrow up"></span>
-            <th class="oe_sortable" data-sort="order.name" style="text-align: center" hidden>订单号</th>
-                <span class="arrow down"></span>
-                <span class="arrow up"></span>
-            <th class="oe_sortable" data-sort="workflow.name" style="text-align: center">订单状态</th>
-                <span class="arrow down"></span>
-                <span class="arrow up"></span>
             <th class="oe_sortable" data-sort="customer.name" style="text-align: center">供应商</th>
                 <span class="arrow down"></span>
                 <span class="arrow up"></span>
diff --git a/byerp/public/templates/goodsInNotes/list/ListTemplate.html b/byerp/public/templates/goodsInNotes/list/ListTemplate.html
index c07bd99..92d2a3f 100644
--- a/byerp/public/templates/goodsInNotes/list/ListTemplate.html
+++ b/byerp/public/templates/goodsInNotes/list/ListTemplate.html
@@ -15,15 +15,13 @@
     </td>
     <td style="text-align: center"><%=element.name %></td>
     <td style="text-align: center"><%=element.shippinglist %></td>
-    <td style="text-align: center" hidden><%=element.order ? element.order.name : ''%></td>
-    <td style="text-align: center"><%=element.workflow ? element.workflow.name : ''%></td>
     <td style="text-align: center"><%=element.customer ? element.customer.name : ''%></td>
     <td style="text-align: center"><%=element.warehouse ? element.warehouse.name : '' %></td>
     <td style="text-align: center" class="centerCell _statusOrders">
-        <span  style="margin-left: 45%" class="<%=element.status.approved ? 'icon-checked2 green transparented' : 'icon-close3 red transparented'%>"></span>
+        <span class="<%=element.status.approved ? 'icon-checked2 green transparented' : 'icon-close3 red transparented'%>"></span>
     </td>
     <td style="text-align: center" class="centerCell _statusOrders">
-        <span  style="margin-left: 45%" class="<%=element.isValid ? 'icon-checked2 green transparented' : 'icon-close3 red transparented'%>"></span>
+        <span class="<%=element.isValid ? 'icon-checked2 green transparented' : 'icon-close3 red transparented'%>"></span>
     </td>
     <td style="text-align: center"><%=element.description !== ""? element.description : '无' %></td>
 </tr>
diff --git a/byerp/public/templates/goodsInNotes/list/cancelTemplate.html b/byerp/public/templates/goodsInNotes/list/cancelTemplate.html
index da3d82a..e1dce3d 100644
--- a/byerp/public/templates/goodsInNotes/list/cancelTemplate.html
+++ b/byerp/public/templates/goodsInNotes/list/cancelTemplate.html
@@ -1,15 +1,15 @@
-<tr data-id="<%=model._id%>">
-    <td class="notForm"><input type="checkbox" value="<%=model._id%>" class="checkbox"/></td>
-    <td><%=model.startNumber%></td>
-    <td><%=(model && model.assigned) ? model.assigned.name.first + ' ' + model.assigned.name.last : ''%></td>
-    <td><%=(model.supplier && model.supplier.name) ? model.supplier.name.first + ' ' + model.supplier.name.last : ''
-        %>
-    </td>
-    <td><%=model.invoice ? model.invoice.name : ''%></td>
-    <td><%=(model.paymentMethod) ? model.paymentMethod.name : ''%></td>
-    </td>
-
-    <td data-type="dtPicker" class="editable date" data-content="date">
-        <%=model.date%>
-    </td>
-</tr>
+<tr data-id="<%=model._id%>">
+    <td class="notForm"><input type="checkbox" value="<%=model._id%>" class="checkbox"/></td>
+    <td><%=model.startNumber%></td>
+    <td><%=(model && model.assigned) ? model.assigned.name.first + ' ' + model.assigned.name.last : ''%></td>
+    <td><%=(model.supplier && model.supplier.name) ? model.supplier.name.first + ' ' + model.supplier.name.last : ''
+        %>
+    </td>
+    <td><%=model.invoice ? model.invoice.name : ''%></td>
+    <td><%=(model.paymentMethod) ? model.paymentMethod.name : ''%></td>
+    </td>
+
+    <td data-type="dtPicker" class="editable date" data-content="date">
+        <%=model.date%>
+    </td>
+</tr>
diff --git a/byerp/public/templates/goodsInNotes/temps/documentTemp.html b/byerp/public/templates/goodsInNotes/temps/documentTemp.html
index aed863e..770fbf2 100644
--- a/byerp/public/templates/goodsInNotes/temps/documentTemp.html
+++ b/byerp/public/templates/goodsInNotes/temps/documentTemp.html
@@ -5,7 +5,7 @@
         <div class="_isValid">
             <dl>
                 <dt><label for="isValid">是否已收到发票</label></dt>
-                <dd>
+                <dd style="width: 10%">
                     <label class="_customCHeckbox">
                     <input id="isValid" class="isValid" type="checkbox"/>
                     <span></span>
@@ -13,7 +13,13 @@
                 </dd>
             </dl>
         </div>
-        <div class="_invoice">发票号码 ： <input id="invoice" class="invoice" value='<%=model.invoiceName%>' style="width:80px;text-align: center;" type="text"/></div>
+        <div class="_invoice" style="float: left;">发票号码 ： <input id="invoice" class="invoice" value='<%=model.invoiceName%>' style="width:200px;text-align: center;" type="text" placeholder="请输入发票号码"/></div>
+        <div class="right">
+            <button class="btn blue slim weightAdjust">
+                <span>计价数量调整</span>
+            </button>
+            <input id="weightAdjust" value='' style="width:150px;text-align: center;" type="text" placeholder="输入实际计价数量" /></div>
+        </div>
         <% }else if(model.status.approved && model.isValid === false && !model.description){ %>
             <div class="_Premium">发票差额 ： <input id="Premium" class="Premium" value=0 style="width:80px;text-align: center;" type="text"/>[发票金额大于订单金额则填写正数，小于订单金额则填写负数]</div>
             <div class="_invoice">发票号码 ： <input id="invoice" class="invoice" value='<%=model.invoiceName%>' style="width:80px;text-align: center;" type="text"/></div>
@@ -42,11 +48,11 @@
         </div>
         <table class="_templateTable tableFixed">
             <colgroup>
-                <col width="10%">
+                <col width="8%">
                 <col width="6%">
                 <col width="10%">
                 <col width="7%">
-                <col width="7%">
+                <col width="9%">
                 <col width="7%">
                 <col width="7%">
                 <col width="10%">
@@ -56,11 +62,11 @@
             </colgroup>
             <thead>
             <tr>
-                <th style="text-align: center">产品名称</th>
+                <th style="text-align: center">品名</th>
                 <th style="text-align: center">订单号</th>
                 <th style="text-align: center">库位</th>
                 <th style="text-align: center" class="selectedQuantity">数量</th>
-                <th style="text-align: center">单位重量</th>
+                <th style="text-align: center">单位计价量</th>
                 <th style="text-align: center">单价</th>
                 <th style="text-align: center">备注</th>
                 <th style="text-align: center">税率</th>
@@ -73,6 +79,7 @@
             <% var subqty = 0 %>
             <% var subtaxes = 0 %>
             <% var subcost = 0 %>
+            <% var subweight = 0 %>
             <% model.orderRows.forEach(function(row, index){ %>
             <% if(row.selectedQuantity){%>
             <tr class="productItem">
@@ -90,11 +97,11 @@
                 <td data-name="unit">
                     <input style="text-align: center" class="unit" maxlength="9" value="<%=row.unit || 0%>" type="text"/>
                 </td>
+                <% subweight += (row.unit*row.selectedQuantity)%>
                 <td data-name="unitPrice">
                     <input style="text-align: center" class="price" maxlength="9" value="<%=row.unitPrice%>" type="text"/>
                 </td>
                 <td style="text-align: center"><%=row.description%></td>
-                </td>
                 <td data-name="taxCode" class="taxCodeLine">
                     <div class="_newSelectListWrap">
                         <a class="current-selected taxCode" data-content="taxCode" id="taxCodeLine" href="javascript:;"
@@ -109,7 +116,6 @@
                 <td style="text-align: center" data-name="subtotal" class="subtotal">
                     <input style="text-align: center" class="subtotal" maxlength="9" value="<%=(row.selectedQuantity*row.unit*row.unitPrice).toFixed(2)%>" type="text"/>
                 </td>
-                </td>
                 <% subcost += parseFloat((row.selectedQuantity*row.unit*row.unitPrice).toFixed(2))%>
                 <td style="text-align: left" data-name="paras">
                     <table>
@@ -139,9 +145,10 @@
             </tbody>
         </table>
         <div class="totalAmount">
-            <div data-name="subqty"><%='总量：'+subqty%></div>
-            <div data-name="subtaxes"><%='总税额：'+subtaxes%></div>
-            <div data-name="subcost"><%='总计：'+subcost.toFixed(2)%></div>
+            <div data-name="subqty" style="float: left;height: 30px;width: 100px;"><%='总数量：'+subqty%></div>
+            <div data-name="subweight" style="float: left;height: 30px;width: 150px;">总计价量：<a><%=subweight.toFixed(2)%></a></div>
+            <div data-name="subtaxes" style="float: left;height: 30px;width: 150px;"><%='总税额：'+subtaxes.toFixed(2)%></div>
+            <div data-name="subcost" style="float: left;height: 30px;width: 150px;"><%='总计：'+subcost.toFixed(2)%></div>
         </div>
     </div>
 </div>
\ No newline at end of file
diff --git a/byerp/public/templates/goodsOutNotes/CreateTemplate.html b/byerp/public/templates/goodsOutNotes/CreateTemplate.html
index d7df9af..27c4641 100644
--- a/byerp/public/templates/goodsOutNotes/CreateTemplate.html
+++ b/byerp/public/templates/goodsOutNotes/CreateTemplate.html
@@ -1,19 +1,54 @@
+
 <div class="form-holder _newForm _stockCorrectionForm">
     <form method="post" id="stockCorrection">
-        <h4 class="_dialogMainTitle"><strong>源单</strong><span id="name">#<span class="blue"><%=model.name%></span></span><strong>出库单</strong></h4>
+        <h4 class="_dialogMainTitle"><strong>源单</strong><span id="name">#<span class="blue"><%=model.name%></span></span><strong>发货计划</strong></h4>
         <div class="_formWrap">
-            <div class="_formBlock">
-                <div class="_animateInputBox _fixedWidth">
-                    <label for="date" class="_staticLabel">预计发货日期</label>
-                    <input class="_animate"
-                           id="date"
-                           readonly
-                           required/>
+            <div class="half-block left withPaddingRightProject">
+                <div class="inner">
+                    <div class="task-info">
+                        <dt>
+                            <label>预计日期</label>
+                        </dt>
+                        <div class="_modalList">
+                            <div class="_modalSelect _newSelectListWrap">
+                            <input class="_animate"
+                                   id="date"
+                                   readonly
+                                   required/>
+                            </div>
+                        </div>
+                        
+                        <dt>
+                            <label for="load">装货地点</label>
+                        </dt>
+                        <dd>
+                            <input type="text"
+                                   maxlength="30"
+                                   name="load"
+                                   id="load"
+                                   placeholder="装货地点"/>
+                        </dd>
+                        <dt>
+                            <label for="unLoad">卸货地点</label>
+                        </dt>
+                        <dd>
+                            <input type="text"
+                                   maxlength="30"
+                                   name="unLoad"
+                                   id="unLoad"
+                                   placeholder="卸货地点"/>
+                        </dd>
+
+
+                    </div>
                 </div>
             </div>
             <div class="_formBlock">
-                <a href="javascript:;" class="btn blue slim plus" title="获取发货数量" id="getNewShipBtn">获取发货数量</a>
+<!--                 <a href="javascript:;" class="btn blue slim plus" title="获取发货数量" id="getNewShipBtn">获取发货数量</a>
                 <div id="productItemsHolder" class="_SkuItemsHolder"></div>
+                <h4>测试</h4>
+                <input type="text" id="jstree-search"/> -->
+                <div id="jstree_div" class="demo"></div>
             </div>
         </div>
     </form>
diff --git a/byerp/public/templates/purchaseOrders/EditTemplate.html b/byerp/public/templates/purchaseOrders/EditTemplate.html
index df33a85..c613620 100644
--- a/byerp/public/templates/purchaseOrders/EditTemplate.html
+++ b/byerp/public/templates/purchaseOrders/EditTemplate.html
@@ -1,153 +1,153 @@
-<div class="form-holder">
-    <form method="post" action="" id="createPersonsForm" class="form">
-        <fieldset>
-            <div class="inner">
-                <ul class="_statusOrderList" data-class="">
-                    <li class="left _statusOrders">
-                        <%var allocateStatus = model.status ? model.status.allocateStatus : 'NOT' %>
-                        <%var fulfillStatus = model.status ? model.status.fulfillStatus : 'NOT' %>
-                        <%var shippingStatus = model.status ? model.status.shippingStatus : 'NOT' %>
-                        <h3 class="left">#<%=model.name%></h3>
-                        <a id="workflowsDd" class="_workflowsDd current-selected"
-                           data-id="<%= model.workflow ? model.workflow._id : ''%>"
-                           href="javascript:;"><%= model.workflow ?
-                            model.workflow.name : ''%></a>
-                        <span class="_allocationed <%=allocateStatus === 'NOA' ? 'icon-checked yellow' : allocateStatus === 'ALL' ? 'icon-checked green' : '_notDid'%>"></span>
-                        <span class="icon-box <%=fulfillStatus === 'NOA' ? 'yellow' : fulfillStatus === 'ALL' ? 'green' : 'red'%> _fullfilled"></span>
-                        <span class="icon-cargo <%=shippingStatus === 'NOA' ? 'yellow' : shippingStatus === 'ALL' ? 'green' : 'red'%> _shipped"></span>
-                    </li>
-                    <li class="right">
-
-                        <button class="btn slim receiveInvoice">
-                            <span>接收发票</span>
-                        </button>
-                    </li>
-                    <li class="right">
-                        <%if(model.workflow && model.workflow.status !== 'Done'){%>
-                        <button class="btn slim prepay">
-                            <span>预付款</span>
-                        </button>
-                        <%}%>
-                    </li>
-                    <li class="right fullfillOrderWrap">
-                        <a class="btn fullfillOrder" href="javascript:;">
-                            <span>Fulfill order</span>
-                        </a>
-                        <ul>
-                            <li>
-                                <a id="fulfillAll"><span class="fontBold">Fulfill and ship later</span>
-                                    <span class="help">Create a goods-out note for all items to ship later</span>
-                                </a>
-                            </li>
-                            <li>
-                                <a id="fulfilAndShip"><span class="fontBold">Fulfill and mark as shipped</span>
-                                    <span class="help">Create and close a goods-out note for all items</span>
-                                    <span class="help">Shipment will be made today.</span>
-                                </a>
-                            </li>
-                            <li>
-                                <a id="splitFulfil"><span class="fontBold">Partial/Advanced fulfill</span>
-                                    <span class="help">Fulfil only part of the order, goods-out or drop-ship</span>
-                                </a>
-                            </li>
-                        </ul>
-                    </li>
-                </ul>
-                <div class="clearfix"></div>
-                <div class="dialog-tabs-items mainTabs">
-                    <div class="dialog-tabs-item mainTabs active">
-                        <div class="topInputHolder">
-                            <div class="half-block left">
-                                <dl class="opp-info">
-                                    <dt><label>客户</label></dt>
-                                    <dd>
-                                        <%if(model.supplier){%>
-                                        <a id="supplierDd" data-id="<%=model.supplier._id%>"
-                                           href="#easyErp/Companies/form/<%=model.supplier._id%>"><%=model.supplier.name.first
-                                            + ' ' + model.supplier.name.last%></a>
-                                        <%}%>
-                                    </dd>
-                                    <dt><label for="assignedTo">Assigned To</label></dt>
-                                    <dd>
-                                        <a id="assignedTo" class="current-selected" href="javascript:;"
-                                           data-id="<%=model.salesPerson ? model.salesPerson._id : ''%>"><%=model.salesPerson
-                                            && model.salesPerson.name ? model.salesPerson.name.first +' ' +
-                                            model.salesPerson.name.last : 'Select'%></a>
-                                    </dd>
-
-                                    <dt><label for="expectedDate">Payment Due</label></dt>
-                                    <dd>
-                                        <input id="expectedDate" class="_inputBordered " readonly
-                                               value="<%=model.expectedDate%>">
-                                    </dd>
-                                    <dt><label>Order Date</label></dt>
-                                    <dd>
-                                        <input id="orderDate" class="_inputBordered" readonly
-                                               value="<%=model.orderDate%>">
-                                    </dd>
-
-                                    <dt><label for="currencyDd">Currency</label></dt>
-                                    <dd class="_newSelectListWrap">
-                                        <a id="currencyDd" class="current-selected"
-                                           data-id="<%= model.currency && model.currency._id ? model.currency._id._id : null%>"
-                                           data-symbol="<%= model.currency && model.currency._id ? model.currency._id.symbol : null%>"
-                                           href="javascript:;"><%= model.currency && model.currency._id ?
-                                            model.currency._id.name : ''%></a>
-                                    </dd>
-                                </dl>
-                            </div>
-                            <div class="half-block right">
-                                <dl class="opp-info">
-                                    <dt><label for="account">COGS Account</label></dt>
-                                    <dd class="_newSelectListWrap">
-                                        <a id="account" class="current-selected"
-                                           data-id="<%= model.account ? model.account._id : null%>"
-                                           href="javascript:;"><%= model.account ?model.account.name :
-                                            'Select'%></a>
-                                    </dd>
-
-                                    <dt><label for="priceList">价格列表</label></dt>
-                                    <dd class="_modalSelect">
-                                        <a id="priceList" class="current-selected" href="javascript:;"
-                                           data-id="<%=model.priceList ? model.priceList._id : ''%>"><%=model.priceList?model.priceList.name
-                                            : 'Select'%></a>
-                                    </dd>
-
-                                    <dt><label for="warehouseDd">Warehouse</label></dt>
-                                    <dd class="_modalSelect">
-                                        <a id="warehouseDd" class="current-selected" href="javascript:;"
-                                           data-id="<%=model.warehouse ? model.warehouse._id : ''%>"><%=model.warehouse?model.warehouse.name
-                                            : 'Select'%></a>
-                                    </dd>
-
-                                </dl>
-                            </div>
-                            <div class="clearfix"></div>
-                        </div>
-                        <div class="clearfix"></div>
-                        <div id="productItemsHolder">
-
-                        </div>
-                        <div class="_editAllocateAll ">
-                            <a href="javascript:;" id="allocateAll">
-                                <span>Allocate all</span>
-                            </a>
-                            <a href="javascript:;" id="unallocateAll">
-                                <span>Unallocate All</span>
-                            </a>
-                            <%if(model.workflow && model.workflow.status !== 'Done'){%>
-                            <a href="javascript:;" id="resetPrices">
-                                <span>Reset Prices</span>
-                            </a>
-                            <%}>
-                        </div>
-                    </div>
-                    <div class="clearfix"></div>
-                </div>
-
-            </div>
-            <div class="clearfix"></div>
-        </fieldset>
-    </form>
-    <div class="clearfix"></div>
-</div>
+<div class="form-holder">
+    <form method="post" action="" id="createPersonsForm" class="form">
+        <fieldset>
+            <div class="inner">
+                <ul class="_statusOrderList" data-class="">
+                    <li class="left _statusOrders">
+                        <%var allocateStatus = model.status ? model.status.allocateStatus : 'NOT' %>
+                        <%var fulfillStatus = model.status ? model.status.fulfillStatus : 'NOT' %>
+                        <%var shippingStatus = model.status ? model.status.shippingStatus : 'NOT' %>
+                        <h3 class="left">#<%=model.name%></h3>
+                        <a id="workflowsDd" class="_workflowsDd current-selected"
+                           data-id="<%= model.workflow ? model.workflow._id : ''%>"
+                           href="javascript:;"><%= model.workflow ?
+                            model.workflow.name : ''%></a>
+                        <span class="_allocationed <%=allocateStatus === 'NOA' ? 'icon-checked yellow' : allocateStatus === 'ALL' ? 'icon-checked green' : '_notDid'%>"></span>
+                        <span class="icon-box <%=fulfillStatus === 'NOA' ? 'yellow' : fulfillStatus === 'ALL' ? 'green' : 'red'%> _fullfilled"></span>
+                        <span class="icon-cargo <%=shippingStatus === 'NOA' ? 'yellow' : shippingStatus === 'ALL' ? 'green' : 'red'%> _shipped"></span>
+                    </li>
+                    <li class="right">
+
+                        <button class="btn slim receiveInvoice">
+                            <span>接收发票</span>
+                        </button>
+                    </li>
+                    <li class="right">
+                        <%if(model.workflow && model.workflow.status !== 'Done'){%>
+                        <button class="btn slim prepay">
+                            <span>预付款</span>
+                        </button>
+                        <%}%>
+                    </li>
+                    <li class="right fullfillOrderWrap">
+                        <a class="btn fullfillOrder" href="javascript:;">
+                            <span>Fulfill order</span>
+                        </a>
+                        <ul>
+                            <li>
+                                <a id="fulfillAll"><span class="fontBold">Fulfill and ship later</span>
+                                    <span class="help">Create a goods-out note for all items to ship later</span>
+                                </a>
+                            </li>
+                            <li>
+                                <a id="fulfilAndShip"><span class="fontBold">Fulfill and mark as shipped</span>
+                                    <span class="help">Create and close a goods-out note for all items</span>
+                                    <span class="help">Shipment will be made today.</span>
+                                </a>
+                            </li>
+                            <li>
+                                <a id="splitFulfil"><span class="fontBold">Partial/Advanced fulfill</span>
+                                    <span class="help">Fulfil only part of the order, goods-out or drop-ship</span>
+                                </a>
+                            </li>
+                        </ul>
+                    </li>
+                </ul>
+                <div class="clearfix"></div>
+                <div class="dialog-tabs-items mainTabs">
+                    <div class="dialog-tabs-item mainTabs active">
+                        <div class="topInputHolder">
+                            <div class="half-block left">
+                                <dl class="opp-info">
+                                    <dt><label>客户</label></dt>
+                                    <dd>
+                                        <%if(model.supplier){%>
+                                        <a id="supplierDd" data-id="<%=model.supplier._id%>"
+                                           href="#easyErp/Companies/form/<%=model.supplier._id%>"><%=model.supplier.name.first
+                                            + ' ' + model.supplier.name.last%></a>
+                                        <%}%>
+                                    </dd>
+                                    <dt><label for="assignedTo">Assigned To</label></dt>
+                                    <dd>
+                                        <a id="assignedTo" class="current-selected" href="javascript:;"
+                                           data-id="<%=model.salesPerson ? model.salesPerson._id : ''%>"><%=model.salesPerson
+                                            && model.salesPerson.name ? model.salesPerson.name.first +' ' +
+                                            model.salesPerson.name.last : 'Select'%></a>
+                                    </dd>
+
+                                    <dt><label for="expectedDate">Payment Due</label></dt>
+                                    <dd>
+                                        <input id="expectedDate" class="_inputBordered " readonly
+                                               value="<%=model.expectedDate%>">
+                                    </dd>
+                                    <dt><label>Order Date</label></dt>
+                                    <dd>
+                                        <input id="orderDate" class="_inputBordered" readonly
+                                               value="<%=model.orderDate%>">
+                                    </dd>
+
+                                    <dt><label for="currencyDd">Currency</label></dt>
+                                    <dd class="_newSelectListWrap">
+                                        <a id="currencyDd" class="current-selected"
+                                           data-id="<%= model.currency && model.currency._id ? model.currency._id._id : null%>"
+                                           data-symbol="<%= model.currency && model.currency._id ? model.currency._id.symbol : null%>"
+                                           href="javascript:;"><%= model.currency && model.currency._id ?
+                                            model.currency._id.name : ''%></a>
+                                    </dd>
+                                </dl>
+                            </div>
+                            <div class="half-block right">
+                                <dl class="opp-info">
+                                    <dt><label for="account">COGS Account</label></dt>
+                                    <dd class="_newSelectListWrap">
+                                        <a id="account" class="current-selected"
+                                           data-id="<%= model.account ? model.account._id : null%>"
+                                           href="javascript:;"><%= model.account ?model.account.name :
+                                            'Select'%></a>
+                                    </dd>
+
+                                    <dt><label for="priceList">价格列表</label></dt>
+                                    <dd class="_modalSelect">
+                                        <a id="priceList" class="current-selected" href="javascript:;"
+                                           data-id="<%=model.priceList ? model.priceList._id : ''%>"><%=model.priceList?model.priceList.name
+                                            : 'Select'%></a>
+                                    </dd>
+
+                                    <dt><label for="warehouseDd">Warehouse</label></dt>
+                                    <dd class="_modalSelect">
+                                        <a id="warehouseDd" class="current-selected" href="javascript:;"
+                                           data-id="<%=model.warehouse ? model.warehouse._id : ''%>"><%=model.warehouse?model.warehouse.name
+                                            : 'Select'%></a>
+                                    </dd>
+
+                                </dl>
+                            </div>
+                            <div class="clearfix"></div>
+                        </div>
+                        <div class="clearfix"></div>
+                        <div id="productItemsHolder">
+
+                        </div>
+                        <div class="_editAllocateAll ">
+                            <a href="javascript:;" id="allocateAll">
+                                <span>Allocate all</span>
+                            </a>
+                            <a href="javascript:;" id="unallocateAll">
+                                <span>Unallocate All</span>
+                            </a>
+                            <%if(model.workflow && model.workflow.status !== 'Done'){%>
+                            <a href="javascript:;" id="resetPrices">
+                                <span>Reset Prices</span>
+                            </a>
+                            <%}>
+                        </div>
+                    </div>
+                    <div class="clearfix"></div>
+                </div>
+
+            </div>
+            <div class="clearfix"></div>
+        </fieldset>
+    </form>
+    <div class="clearfix"></div>
+</div>
diff --git a/byerp/public/templates/purchaseOrders/TopBarTemplate.html b/byerp/public/templates/purchaseOrders/TopBarTemplate.html
index 9b6ec9c..9f4903c 100644
--- a/byerp/public/templates/purchaseOrders/TopBarTemplate.html
+++ b/byerp/public/templates/purchaseOrders/TopBarTemplate.html
@@ -1,7 +1,7 @@
-<h3><%=contentHeader%></h3>
-<div id="createBtnHolder" class="btnsBlock">
-    <a href="javascript:;" class="btn blue slim icon-plus" title="新增" id="top-bar-createBtn">新增</a>
-    <a href="javascript:;" class="top-bar-deleteBtn" title="删除" id="top-bar-deleteBtn"></a>
-    <a href="javascript:;" class="btn blue slim plus" title="批量预入库" id="top-bar-goodsinBtn">批量预入库</a>
-    <a href="javascript:;" class="btn blue slim plus" title="上传" id="top-bar-uploadBtn">上传</a>
-</div>
+<h3><%=contentHeader%></h3>
+<div id="createBtnHolder" class="btnsBlock">
+    <a href="javascript:;" class="btn blue slim icon-plus" title="新增" id="top-bar-createBtn">新增</a>
+    <a href="javascript:;" class="top-bar-deleteBtn" title="删除" id="top-bar-deleteBtn"></a>
+    <a href="javascript:;" class="btn blue slim plus" title="批量预入库" id="top-bar-goodsinBtn">批量预入库</a>
+    <a href="javascript:;" class="btn blue slim plus" title="上传" id="top-bar-uploadBtn">上传</a>
+</div>
\ No newline at end of file
diff --git a/byerp/public/templates/purchaseOrders/ViewTemplate.html b/byerp/public/templates/purchaseOrders/ViewTemplate.html
index 20c3e1f..7f65232 100644
--- a/byerp/public/templates/purchaseOrders/ViewTemplate.html
+++ b/byerp/public/templates/purchaseOrders/ViewTemplate.html
@@ -1,147 +1,147 @@
-<div class="form-holder">
-
-    <form method="post" action="" id="createPersonsForm" class="form">
-        <fieldset>
-            <div class="inner">
-                <ul class="dialog-tabs" data-class="mainTabs">
-                    <%if (!onlyView){ %>
-                    <li class="right">
-                        <%if(model.workflow && model.workflow.status !== 'Cancelled'){%>
-                        <button class="btn receiveInvoice">
-                            <span>Receive Invoice</span>
-                        </button>
-                        <button class="btn cancelOrder">
-                            <span>Cancel</span>
-                        </button>
-                        <%} else {%>
-                        <button class="btn setDraft">
-                            <span>Set Draft</span>
-                        </button>
-                        <%}%>
-                    </li>
-                    <%}%>
-                </ul>
-                <div class="clearfix"></div>
-                <div class="dialog-tabs-items mainTabs">
-                    <div class="dialog-tabs-item mainTabs active">
-                        <div class="topInputHolder">
-                            <div class="half-block left">
-                                <dl class="opp-info">
-                                    <dt><label>
-                                        <%if(model.supplier){%>
-                                        Customer
-                                        <% } %>
-                                    </label></dt>
-                                    <dd>
-                                        <%if(model.supplier){%>
-                                        <a id="supplierDd" data-id="<%=model.supplier._id%>"
-                                           href="#easyErp/Companies/form/<%=model.supplier._id%>"><%=model.supplier.name.first
-                                            + ' ' + model.supplier.name.last%></a>
-                                        <%}%>
-                                    </dd>
-                                    <% if (forSales){ %>
-                                    <dt><label for="projectDd">Project</label></dt>
-                                    <dd>
-                                        <a id="projectDd" class="" href="javascript:;" data-id="<%=model.project._id%>"><%=model.project.name%></a>
-                                    </dd>
-                                    <% } %>
-                                </dl>
-                            </div>
-                            <div class="half-block left">
-                                <dl class="opp-info">
-                                    <dt><label>Order Date</label></dt>
-                                    <dd>
-                                        <span><%=model.orderDate%></span>
-                                    </dd>
-                                    <!--<dt><label>Deliver To</label></dt>-->
-                                    <!--<dd>-->
-                                    <!--<%if(model.deliverTo){%>-->
-                                    <!--<a id="deliveryDd" href="#easyErp/Companies/form/<%=model.deliverTo._id%>" data-id="<%=model.deliverTo._id%>"><%=model.deliverTo.name%></a>-->
-                                    <!--<%}%>-->
-                                    <!--</dd>-->
-                                    <dt><label for="currencyDd">Currency</label></dt>
-                                    <dd>
-                                        <a id="currencyDd" class=""
-                                           data-id="<%= model.currency && model.currency._id ? model.currency._id._id : null%>"
-                                           href="javascript:;"><%= model.currency && model.currency._id ?
-                                            model.currency._id.name : ''%></a>
-                                    </dd>
-                                </dl>
-                            </div>
-                            <div class="clearfix"></div>
-                        </div>
-                        <div class="clearfix"></div>
-                        <ul class="dialog-tabs" data-class="childTabs">
-                            <li><a class="active" href="javascript:;">Products</a></li>
-                            <!--<li><a href="javascript:;">Bid</a></li>-->
-                            <li><a href="javascript:;">Deliveries & Invoices</a></li>
-                        </ul>
-                        <div class="clearfix"></div>
-                        <div class="dialog-tabs-items childTabs">
-                            <div class="dialog-tabs-item childTabs active">
-                                <div id="productItemsHolder">
-
-                                </div>
-                            </div>
-                            <div class="dialog-tabs-item childTabs">
-                                <div class="delivery-invoices-container">
-                                    <div class="half-block left">
-                                        <dl class="quotation-info">
-                                            <dt><label for="expectedDate">Expected Date</label></dt>
-                                            <dd><input id="expectedDate" placeholder="" type="text"
-                                                       value="<%=model.expectedDate%>" readonly/>
-                                            </dd>
-                                            <dt><label for="destination">Destination</label></dt>
-                                            <dd class="_newSelectListWrap">
-                                                <%if(model.destination){%>
-                                                <a id="destination" class="current-selected"
-                                                   href="javascript:;" data-id="<%=model.destination._id%>"><%=model.destination.name%></a>
-                                                <%} else {%>
-                                                <a id="destination" class="current-selected" href="javascript:;"
-                                                   data-id="">Select</a>
-                                                <%}%>
-                                            </dd>
-                                            <dt><label for="incoterm">Incoterm</label></dt>
-                                            <dd class="_newSelectListWrap">
-                                                <%if(model.incoterm){%>
-                                                <a id="incoterm" class="current-selected" href="javascript:;"
-                                                   data-id="<%= model.incoterm._id%>"><%=model.incoterm.name %></a>
-                                                <%} else {%>
-                                                <a id="incoterm" class="current-selected" href="javascript:;"
-                                                   data-id="">Select</a>
-                                                <%}%>
-                                            </dd>
-                                        </dl>
-                                    </div>
-                                    <div class="half-block left">
-                                        <dl class="quotation-info">
-                                            <dt><label for="invoicingControl">Invoicing Control</label></dt>
-                                            <dd class="_newSelectListWrap">
-                                                <%if(model.invoiceControl){%>
-                                                <a id="invoicingControl" class="current-selected" href="javascript:;"
-                                                   data-id="<%= model.invoiceControl._id %>"><%=model.invoiceControl.name%></a>
-                                                <%} else {%>
-                                                <a id="invoicingControl" class="current-selected" href="javascript:;"
-                                                   data-id="">Select</a>
-                                                <%}%>
-                                            </dd>
-                                            <dt><label for="fiscalPosition">Fiscal Position</label></dt>
-                                            <dd class="_newSelectListWrap">
-                                                <a id="fiscalPosition" class="current-selected" href="javascript:;">Fiscal
-                                                    Position</a>
-                                            </dd>
-                                        </dl>
-                                    </div>
-                                </div>
-                            </div>
-                        </div>
-                        <div class="clearfix"></div>
-                    </div>
-
-                </div>
-                <div class="clearfix"></div>
-            </div>
-        </fieldset>
-    </form>
-    <div class="clearfix"></div>
+<div class="form-holder">
+
+    <form method="post" action="" id="createPersonsForm" class="form">
+        <fieldset>
+            <div class="inner">
+                <ul class="dialog-tabs" data-class="mainTabs">
+                    <%if (!onlyView){ %>
+                    <li class="right">
+                        <%if(model.workflow && model.workflow.status !== 'Cancelled'){%>
+                        <button class="btn receiveInvoice">
+                            <span>Receive Invoice</span>
+                        </button>
+                        <button class="btn cancelOrder">
+                            <span>Cancel</span>
+                        </button>
+                        <%} else {%>
+                        <button class="btn setDraft">
+                            <span>Set Draft</span>
+                        </button>
+                        <%}%>
+                    </li>
+                    <%}%>
+                </ul>
+                <div class="clearfix"></div>
+                <div class="dialog-tabs-items mainTabs">
+                    <div class="dialog-tabs-item mainTabs active">
+                        <div class="topInputHolder">
+                            <div class="half-block left">
+                                <dl class="opp-info">
+                                    <dt><label>
+                                        <%if(model.supplier){%>
+                                        Customer
+                                        <% } %>
+                                    </label></dt>
+                                    <dd>
+                                        <%if(model.supplier){%>
+                                        <a id="supplierDd" data-id="<%=model.supplier._id%>"
+                                           href="#easyErp/Companies/form/<%=model.supplier._id%>"><%=model.supplier.name.first
+                                            + ' ' + model.supplier.name.last%></a>
+                                        <%}%>
+                                    </dd>
+                                    <% if (forSales){ %>
+                                    <dt><label for="projectDd">Project</label></dt>
+                                    <dd>
+                                        <a id="projectDd" class="" href="javascript:;" data-id="<%=model.project._id%>"><%=model.project.name%></a>
+                                    </dd>
+                                    <% } %>
+                                </dl>
+                            </div>
+                            <div class="half-block left">
+                                <dl class="opp-info">
+                                    <dt><label>Order Date</label></dt>
+                                    <dd>
+                                        <span><%=model.orderDate%></span>
+                                    </dd>
+                                    <!--<dt><label>Deliver To</label></dt>-->
+                                    <!--<dd>-->
+                                    <!--<%if(model.deliverTo){%>-->
+                                    <!--<a id="deliveryDd" href="#easyErp/Companies/form/<%=model.deliverTo._id%>" data-id="<%=model.deliverTo._id%>"><%=model.deliverTo.name%></a>-->
+                                    <!--<%}%>-->
+                                    <!--</dd>-->
+                                    <dt><label for="currencyDd">Currency</label></dt>
+                                    <dd>
+                                        <a id="currencyDd" class=""
+                                           data-id="<%= model.currency && model.currency._id ? model.currency._id._id : null%>"
+                                           href="javascript:;"><%= model.currency && model.currency._id ?
+                                            model.currency._id.name : ''%></a>
+                                    </dd>
+                                </dl>
+                            </div>
+                            <div class="clearfix"></div>
+                        </div>
+                        <div class="clearfix"></div>
+                        <ul class="dialog-tabs" data-class="childTabs">
+                            <li><a class="active" href="javascript:;">Products</a></li>
+                            <!--<li><a href="javascript:;">Bid</a></li>-->
+                            <li><a href="javascript:;">Deliveries & Invoices</a></li>
+                        </ul>
+                        <div class="clearfix"></div>
+                        <div class="dialog-tabs-items childTabs">
+                            <div class="dialog-tabs-item childTabs active">
+                                <div id="productItemsHolder">
+
+                                </div>
+                            </div>
+                            <div class="dialog-tabs-item childTabs">
+                                <div class="delivery-invoices-container">
+                                    <div class="half-block left">
+                                        <dl class="quotation-info">
+                                            <dt><label for="expectedDate">Expected Date</label></dt>
+                                            <dd><input id="expectedDate" placeholder="" type="text"
+                                                       value="<%=model.expectedDate%>" readonly/>
+                                            </dd>
+                                            <dt><label for="destination">Destination</label></dt>
+                                            <dd class="_newSelectListWrap">
+                                                <%if(model.destination){%>
+                                                <a id="destination" class="current-selected"
+                                                   href="javascript:;" data-id="<%=model.destination._id%>"><%=model.destination.name%></a>
+                                                <%} else {%>
+                                                <a id="destination" class="current-selected" href="javascript:;"
+                                                   data-id="">Select</a>
+                                                <%}%>
+                                            </dd>
+                                            <dt><label for="incoterm">Incoterm</label></dt>
+                                            <dd class="_newSelectListWrap">
+                                                <%if(model.incoterm){%>
+                                                <a id="incoterm" class="current-selected" href="javascript:;"
+                                                   data-id="<%= model.incoterm._id%>"><%=model.incoterm.name %></a>
+                                                <%} else {%>
+                                                <a id="incoterm" class="current-selected" href="javascript:;"
+                                                   data-id="">Select</a>
+                                                <%}%>
+                                            </dd>
+                                        </dl>
+                                    </div>
+                                    <div class="half-block left">
+                                        <dl class="quotation-info">
+                                            <dt><label for="invoicingControl">Invoicing Control</label></dt>
+                                            <dd class="_newSelectListWrap">
+                                                <%if(model.invoiceControl){%>
+                                                <a id="invoicingControl" class="current-selected" href="javascript:;"
+                                                   data-id="<%= model.invoiceControl._id %>"><%=model.invoiceControl.name%></a>
+                                                <%} else {%>
+                                                <a id="invoicingControl" class="current-selected" href="javascript:;"
+                                                   data-id="">Select</a>
+                                                <%}%>
+                                            </dd>
+                                            <dt><label for="fiscalPosition">Fiscal Position</label></dt>
+                                            <dd class="_newSelectListWrap">
+                                                <a id="fiscalPosition" class="current-selected" href="javascript:;">Fiscal
+                                                    Position</a>
+                                            </dd>
+                                        </dl>
+                                    </div>
+                                </div>
+                            </div>
+                        </div>
+                        <div class="clearfix"></div>
+                    </div>
+
+                </div>
+                <div class="clearfix"></div>
+            </div>
+        </fieldset>
+    </form>
+    <div class="clearfix"></div>
 </div>
\ No newline at end of file
diff --git a/byerp/public/templates/purchaseOrders/form/ContentTemplate.html b/byerp/public/templates/purchaseOrders/form/ContentTemplate.html
index f36ef09..9885a58 100644
--- a/byerp/public/templates/purchaseOrders/form/ContentTemplate.html
+++ b/byerp/public/templates/purchaseOrders/form/ContentTemplate.html
@@ -1,40 +1,40 @@
-<div class="listWrap ordersList">
-    <div class="listContentWrap">
-        <div class="listContentTitle">
-            <div class="dropDown">
-                <a id="sortBy" class="icon-list5 dropBtn"></a>
-                <ul>
-                    <li class="oe_sortable" data-sort="name">
-                        <span class="dropContent">名称</span>
-                        <span class="sortArrow"></span>
-                    </li>
-                    <li class="oe_sortable" data-sort="orderDate">
-                        <span class="dropContent">日期</span>
-                        <span class="sortArrow"></span>
-                    </li>
-                    <li class="oe_sortable" data-sort="paymentInfo.total">
-                        <span class="dropContent">支付总额</span>
-                        <span class="sortArrow"></span>
-                    </li>
-                    <li class="oe_sortable" data-sort="paymentInfo.unTaxed">
-                        <span class="dropContent">税前总额</span>
-                        <span class="sortArrow"></span>
-                    </li>
-                </ul>
-            </div>
-            <div id="searchContainer"></div>
-        </div>
-        <div id="listContent" class="listContent">
-
-        </div>
-        <div id="listPagination"></div>
-    </div>
-    <div class="formContentWrap">
-        <div class="formContentTitle">
-            <span class="closeBtn"></span>
-        </div>
-        <div id="formContent" class="formContent">
-
-        </div>
-    </div>
+<div class="listWrap ordersList">
+    <div class="listContentWrap">
+        <div class="listContentTitle">
+            <div class="dropDown">
+                <a id="sortBy" class="icon-list5 dropBtn"></a>
+                <ul>
+                    <li class="oe_sortable" data-sort="name">
+                        <span class="dropContent">名称</span>
+                        <span class="sortArrow"></span>
+                    </li>
+                    <li class="oe_sortable" data-sort="orderDate">
+                        <span class="dropContent">日期</span>
+                        <span class="sortArrow"></span>
+                    </li>
+                    <li class="oe_sortable" data-sort="paymentInfo.total">
+                        <span class="dropContent">支付总额</span>
+                        <span class="sortArrow"></span>
+                    </li>
+                    <li class="oe_sortable" data-sort="paymentInfo.unTaxed">
+                        <span class="dropContent">税前总额</span>
+                        <span class="sortArrow"></span>
+                    </li>
+                </ul>
+            </div>
+            <div id="searchContainer"></div>
+        </div>
+        <div id="listContent" class="listContent">
+
+        </div>
+        <div id="listPagination"></div>
+    </div>
+    <div class="formContentWrap">
+        <div class="formContentTitle">
+            <span class="closeBtn"></span>
+        </div>
+        <div id="formContent" class="formContent">
+
+        </div>
+    </div>
 </div>
\ No newline at end of file
diff --git a/byerp/public/templates/purchaseOrders/form/EditTemplate.html b/byerp/public/templates/purchaseOrders/form/EditTemplate.html
index 8caafc7..b05f58d 100644
--- a/byerp/public/templates/purchaseOrders/form/EditTemplate.html
+++ b/byerp/public/templates/purchaseOrders/form/EditTemplate.html
@@ -153,6 +153,10 @@
                                             ?
                                             model.warehouse.name : '选择'%></a>
                                     </dd>
+                                    <dt><label>备注</label></dt>
+                                    <dd>
+                                        <textarea id="notes" value="" placeholder="修改时间后请添加备注" style="min-height: 50px;"></textarea>
+                                    </dd>
                                 </dl>
                             </div>
                             <div class="clearfix"></div>
@@ -169,4 +173,4 @@
         </fieldset>
     </form>
     <div class="clearfix"></div>
-</div>
+</div>
\ No newline at end of file
diff --git a/byerp/public/templates/purchaseOrders/form/FormTemplate.html b/byerp/public/templates/purchaseOrders/form/FormTemplate.html
index 2f8c89e..27ed6c4 100644
--- a/byerp/public/templates/purchaseOrders/form/FormTemplate.html
+++ b/byerp/public/templates/purchaseOrders/form/FormTemplate.html
@@ -1,62 +1,62 @@
-<div class="form-holder">
-    <fieldset>
-        <div class="inner">
-            <%var fulfillStatus = model.status ? model.status.fulfillStatus : 'NOT'; %>
-
-            <ul class="_btnsBlockFixed">
-                <li class="right">
-                    <%if ((fulfillStatus !== 'NOT' && fulfillStatus !== 'NOA') || model.prepayment.date || model.stockReturns.date) {%>
-                    <a id="viewJournalEntries"
-                       class="icon-edit-list2 _viewEntries btn slim"
-                       href="javascript:;" title="凭证">
-                    </a>
-                    <%}%>
-                    <button id="editButton" class="btn slim" title="编辑">
-                        <span class="icon-pencil2"></span>
-                    </button>
-                    <button id="exportToPdf" class="btn slim" title="下载PDF">
-                        <span class="icon-pdf"></span>
-                    </button>
-                    <button class="btn slim attach_file" id="attachment_file" title="附件">
-                        <span class="icon-attach"></span>
-                    </button>
-                    <%var classNamePayment = model.workflow && model.workflow.status !== 'Done' ? 'activeItem' :
-                    'passiveItem';%>
-                    <%var classNameRefund = model.prepayment && model.prepayment.sum ? 'activeItem' : 'passiveItem';%>
-
-                    <%if(model.workflow && model.workflow.status !== 'Done'){%>
-                <li class="right fullfillOrderWrap">
-                    <a class="btn slim fullfillOrder" href="javascript:;">
-                        <span>付款</span>
-                    </a>
-                    <ul>
-                        <li class="<%=classNamePayment%>">
-                            <a class="prepay"><span class="fontBold">创建预付款</span></a>
-                        </li>
-                        <li class="<%=classNameRefund%>">
-                            <a class="refund"><span class="fontBold">退款</span></a>
-                        </li>
-                    </ul>
-                </li>
-                    <%}%>
-                    <%if(model.workflow && model.workflow.status !== 'Done'){%>
-                    <button class="editButton btn slim" title="编辑">
-                        <span>发票</span>
-                    </button>
-                    <%}%>
-                </li>
-            </ul>
-            <div class="clearfix"></div>
-            <div class="_templateInvoiceWrp">
-                <div id="templateDiv" class="_templateDiv"></div>
-                <div class="addingInfoWrp">
-                    <div id="historyDiv" class="_pureTemplate"></div>
-                    <div id="attachments" class="invoiceAttachments"></div>
-                </div>
-            </div>
-        </div>
-        <div class="clearfix"></div>
-    </fieldset>
-
-    <div class="clearfix"></div>
+<div class="form-holder">
+    <fieldset>
+        <div class="inner">
+            <%var fulfillStatus = model.status ? model.status.fulfillStatus : 'NOT'; %>
+
+            <ul class="_btnsBlockFixed">
+                <li class="right">
+                    <%if ((fulfillStatus !== 'NOT' && fulfillStatus !== 'NOA') || model.prepayment.date || model.stockReturns.date) {%>
+                    <a id="viewJournalEntries"
+                       class="icon-edit-list2 _viewEntries btn slim"
+                       href="javascript:;" title="凭证">
+                    </a>
+                    <%}%>
+                    <button id="editButton" class="btn slim" title="编辑">
+                        <span class="icon-pencil2"></span>
+                    </button>
+                    <button id="exportToPdf" class="btn slim" title="下载PDF">
+                        <span class="icon-pdf"></span>
+                    </button>
+                    <button class="btn slim attach_file" id="attachment_file" title="附件">
+                        <span class="icon-attach"></span>
+                    </button>
+                    <%var classNamePayment = model.workflow && model.workflow.status !== 'Done' ? 'activeItem' :
+                    'passiveItem';%>
+                    <%var classNameRefund = model.prepayment && model.prepayment.sum ? 'activeItem' : 'passiveItem';%>
+
+                    <%if(model.workflow && model.workflow.status !== 'Done'){%>
+                <li class="right fullfillOrderWrap">
+                    <a class="btn slim fullfillOrder" href="javascript:;">
+                        <span>付款</span>
+                    </a>
+                    <ul>
+                        <li class="<%=classNamePayment%>">
+                            <a class="prepay"><span class="fontBold">创建预付款</span></a>
+                        </li>
+                        <li class="<%=classNameRefund%>">
+                            <a class="refund"><span class="fontBold">退款</span></a>
+                        </li>
+                    </ul>
+                </li>
+                    <%}%>
+                    <%if(model.workflow && model.workflow.status !== 'Done'){%>
+                    <button class="editButton btn slim" title="编辑">
+                        <span>发票</span>
+                    </button>
+                    <%}%>
+                </li>
+            </ul>
+            <div class="clearfix"></div>
+            <div class="_templateInvoiceWrp">
+                <div id="templateDiv" class="_templateDiv"></div>
+                <div class="addingInfoWrp">
+                    <div id="historyDiv" class="_pureTemplate"></div>
+                    <div id="attachments" class="invoiceAttachments"></div>
+                </div>
+            </div>
+        </div>
+        <div class="clearfix"></div>
+    </fieldset>
+
+    <div class="clearfix"></div>
 </div>
\ No newline at end of file
diff --git a/byerp/public/templates/purchaseOrders/form/ListItemTemplate.html b/byerp/public/templates/purchaseOrders/form/ListItemTemplate.html
index bd098cc..d237b85 100644
--- a/byerp/public/templates/purchaseOrders/form/ListItemTemplate.html
+++ b/byerp/public/templates/purchaseOrders/form/ListItemTemplate.html
@@ -1,40 +1,40 @@
-<table id="listTable">
-    <% orders.forEach(function(order, index){ %>
-    <tr data-id="<%=order._id%>"
-    <%if (order.workflow && order.workflow.status === 'Done') { %>
-    class="compactView notEditable"
-    <% } else { %>
-    class="compactView"
-    <%}%>
-    >
-    <td class="checkboxRow">
-        <label class="_customCHeckbox">
-            <input type="checkbox" value="<%=order._id%>"
-            <% if (!order.removable) { %>
-            class="checkbox notRemovable" disabled='disabled'
-            <% } else {%>
-            class="checkbox"
-            <% } %>
-            />
-            <span></span>
-        </label>
-    </td>
-    <td>
-        <div class="compactRowWrap">
-            <div class="compactRow">
-                <div class="firstName"><%- order.name%></div>
-                <div><%= order.supplier && order.supplier.name ? order.supplier.name.last : ''%></div>
-            </div>
-            <div class="compactRow">
-                <div><%= order.orderDate %></div>
-            </div>
-            <div class="compactRow">
-                <div class="total">
-                    总价：<%=(order.paymentInfo) ? currencySplitter(order.paymentInfo.total) : '0.00'%>
-                </div>
-            </div>
-        </div>
-    </td>
-    </tr>
-    <% }) %>
+<table id="listTable">
+    <% orders.forEach(function(order, index){ %>
+    <tr data-id="<%=order._id%>"
+    <%if (order.workflow && order.workflow.status === 'Done') { %>
+    class="compactView notEditable"
+    <% } else { %>
+    class="compactView"
+    <%}%>
+    >
+    <td class="checkboxRow">
+        <label class="_customCHeckbox">
+            <input type="checkbox" value="<%=order._id%>"
+            <% if (!order.removable) { %>
+            class="checkbox notRemovable" disabled='disabled'
+            <% } else {%>
+            class="checkbox"
+            <% } %>
+            />
+            <span></span>
+        </label>
+    </td>
+    <td>
+        <div class="compactRowWrap">
+            <div class="compactRow">
+                <div class="firstName"><%- order.name%></div>
+                <div><%= order.supplier && order.supplier.name ? order.supplier.name.last : ''%></div>
+            </div>
+            <div class="compactRow">
+                <div><%= order.orderDate %></div>
+            </div>
+            <div class="compactRow">
+                <div class="total">
+                    总价：<%=(order.paymentInfo) ? currencySplitter(order.paymentInfo.total) : '0.00'%>
+                </div>
+            </div>
+        </div>
+    </td>
+    </tr>
+    <% }) %>
 </table>
\ No newline at end of file
diff --git a/byerp/public/templates/purchaseOrders/form/ViewTemplate.html b/byerp/public/templates/purchaseOrders/form/ViewTemplate.html
index 01ad1aa..c2d7e1c 100644
--- a/byerp/public/templates/purchaseOrders/form/ViewTemplate.html
+++ b/byerp/public/templates/purchaseOrders/form/ViewTemplate.html
@@ -1,136 +1,136 @@
-<div class="form-holder">
-    <form method="post" action="" id="createPersonsForm" class="form">
-        <fieldset>
-            <div class="inner">
-                <ul class="_statusOrderBlock" data-class="">
-                    <li class="_statusIndicators">
-                        <%var fulfillStatus = model.status ? model.status.fulfillStatus : 'NOT' %>
-                        <span title="Received"
-                              class="icon-box <%=fulfillStatus === 'NOA' ? 'yellow' : fulfillStatus === 'ALL' ? 'green' : 'red'%> _fullfilled"></span>
-                    </li>
-                    <li class="_statusActions">
-                        <a id="workflowsDd" class="btn slim _workflowsDd"
-                           data-id="<%= model.workflow ? model.workflow._id : ''%>"
-                           href="javascript:;"><%= model.workflow ?
-                            model.workflow.name : ''%></a>
-                    </li>
-                    <%var classNameFulfill = fulfillStatus !== 'ALL' ? 'activeItem' : 'passiveItem';%>
-                    <%var classNameCancel = fulfillStatus !== 'NOT' ? 'activeItem' : 'passiveItem';%>
-
-                    <li class="right fullfillOrderWrap">
-                        <a class="btn slim fullfillOrder" href="javascript:;">
-                            <span>订单操作</span>
-                        </a>
-                        <ul>
-                            <li class="<%=classNameFulfill%>">
-                                <a class="receiveInventory"><span class="fontBold">入库</span>
-                                    <span class="help">创建一张入库信息并将货物放入仓库中</span>
-                                </a>
-                            </li>
-                            <li class="<%=classNameCancel%>">
-                                <a id="salesReturn"><span class="fontBold">采购退货</span>
-                                    <span class="help">将产品退回到供应商（部分或全部）</span>
-                                </a>
-                            </li>
-                            <li class="<%=classNameCancel%>">
-                                <a class="cancelOrder"><span class="fontBold">取消</span>
-                                    <span class="help">取消订单并将产品全部退回至供应商</span>
-                                </a>
-                            </li>
-                        </ul>
-                    </li>
-                    <li class="right">
-                        <%if ((fulfillStatus !== 'NOT' && fulfillStatus !== 'NOA') || model.prepayment.sum) {%>
-                        <a title="Journal Entries" id="viewJournalEntries"
-                           class="icon-edit-list2  _viewEntries btn slim" href="javascript:;"></a>
-                        <%}%>
-                        </li>
-
-                </ul>
-                <span class="_orderNumber">#<%=model.name%></span>
-                <%if (model.invoice && model.invoice._id) {%>
-                <%var reference = '#easyErp/purchaseInvoice/tform/' + model.invoice._id;%>
-                <ul class="_statusOrderList">
-                    <li class="left _statusOrders">
-                        <h3 class="_invoiced"><a href="<%=reference%>">#<%=model.invoice.name%></a></h3>
-                    </li>
-                </ul>
-                <%}%>
-                <div class="clearfix"></div>
-                <div class="dialog-tabs-items mainTabs">
-                    <div class="dialog-tabs-item mainTabs active">
-                        <div class="topInputHolder">
-                            <div class="half-block left">
-                                <dl class="opp-info">
-                                    <dt><label>供应商</label></dt>
-                                    <dd>
-                                        <%if(model.supplier){%>
-                                        <span id="supplierDd" data-id="<%=model.supplier._id%>"><%=model.supplier.name.first+ ' ' + model.supplier.name.last%></span>
-                                        <%}%>
-                                    </dd>
-                                    <dt><label for="assignedTo">分配给</label></dt>
-                                    <dd>
-                                        <span id="assignedTo"
-                                              data-id="<%=model.salesPerson ? model.salesPerson._id : ''%>"><%=model.salesPerson && model.salesPerson.name ? model.salesPerson.name.first +' ' + model.salesPerson.name.last : 'None'%></span>
-                                    </dd>
-
-                                    <dt><label for="expectedDate">预计日期</label></dt>
-                                    <dd>
-                                        <input id="expectedDate" class="_inputBordered" value="<%=model.expectedDate%>"
-                                               readonly/>
-                                    </dd>
-                                    <dt><label>订单日期</label></dt>
-                                    <dd>
-                                        <input id="orderDate" class="_inputBordered" value="<%=model.orderDate%>"
-                                               readonly/>
-                                    </dd>
-
-                                </dl>
-                            </div>
-                            <div class="half-block right">
-                                <dl class="opp-info">
-                                    <dt><label for="account">Payable Accrual Account</label></dt>
-                                    <dd class="_newSelectListWrap">
-                                        <span id="account"
-                                              data-id="<%= model.account ? model.account._id : null%>"><%= model.account ?model.account.name :
-                                            'None'%></span>
-                                    </dd>
-
-                                    <dt><label for="costList">消费列表</label></dt>
-                                    <dd>
-                                        <span id="costList" data-id="<%=model.costList ? model.costList._id : ''%>"><%=model.costList ? model.costList.name : 'None'%></span>
-                                    </dd>
-
-                                    <dt><label for="warehouseDd">仓库</label></dt>
-                                    <dd class="_modalSelect">
-                                        <span id="warehouseDd"
-                                              data-id="<%=model.warehouse ? model.warehouse._id : ''%>"><%=model.warehouse ?
-                                            model.warehouse.name : 'Select'%></span>
-                                    </dd>
-
-                                    <dt><label for="currencyDd">货币</label></dt>
-                                    <dd class="_newSelectListWrap">
-                                        <span id="currencyDd"
-                                              data-id="<%= model.currency && model.currency._id ? model.currency._id._id : null%>"><%= model.currency && model.currency._id ?
-                                            model.currency._id.name : ''%></span>
-                                    </dd>
-                                </dl>
-                            </div>
-                            <div class="clearfix"></div>
-                        </div>
-                        <div class="clearfix"></div>
-
-                        <div class="clearfix"></div>
-                        <div id="productItemsHolder">
-
-                        </div>
-
-                    </div>
-                    <div class="clearfix"></div>
-                </div>
-            </div>
-            <div class="clearfix"></div>
-        </fieldset>
-    </form>
-    <div class="clearfix"></div>
+<div class="form-holder">
+    <form method="post" action="" id="createPersonsForm" class="form">
+        <fieldset>
+            <div class="inner">
+                <ul class="_statusOrderBlock" data-class="">
+                    <li class="_statusIndicators">
+                        <%var fulfillStatus = model.status ? model.status.fulfillStatus : 'NOT' %>
+                        <span title="Received"
+                              class="icon-box <%=fulfillStatus === 'NOA' ? 'yellow' : fulfillStatus === 'ALL' ? 'green' : 'red'%> _fullfilled"></span>
+                    </li>
+                    <li class="_statusActions">
+                        <a id="workflowsDd" class="btn slim _workflowsDd"
+                           data-id="<%= model.workflow ? model.workflow._id : ''%>"
+                           href="javascript:;"><%= model.workflow ?
+                            model.workflow.name : ''%></a>
+                    </li>
+                    <%var classNameFulfill = fulfillStatus !== 'ALL' ? 'activeItem' : 'passiveItem';%>
+                    <%var classNameCancel = fulfillStatus !== 'NOT' ? 'activeItem' : 'passiveItem';%>
+
+                    <li class="right fullfillOrderWrap">
+                        <a class="btn slim fullfillOrder" href="javascript:;">
+                            <span>订单操作</span>
+                        </a>
+                        <ul>
+                            <li class="<%=classNameFulfill%>">
+                                <a class="receiveInventory"><span class="fontBold">入库</span>
+                                    <span class="help">创建一张入库信息并将货物放入仓库中</span>
+                                </a>
+                            </li>
+                            <li class="<%=classNameCancel%>">
+                                <a id="salesReturn"><span class="fontBold">采购退货</span>
+                                    <span class="help">将产品退回到供应商（部分或全部）</span>
+                                </a>
+                            </li>
+                            <li class="<%=classNameCancel%>">
+                                <a class="cancelOrder"><span class="fontBold">取消</span>
+                                    <span class="help">取消订单并将产品全部退回至供应商</span>
+                                </a>
+                            </li>
+                        </ul>
+                    </li>
+                    <li class="right">
+                        <%if ((fulfillStatus !== 'NOT' && fulfillStatus !== 'NOA') || model.prepayment.sum) {%>
+                        <a title="Journal Entries" id="viewJournalEntries"
+                           class="icon-edit-list2  _viewEntries btn slim" href="javascript:;"></a>
+                        <%}%>
+                        </li>
+
+                </ul>
+                <span class="_orderNumber">#<%=model.name%></span>
+                <%if (model.invoice && model.invoice._id) {%>
+                <%var reference = '#easyErp/purchaseInvoice/tform/' + model.invoice._id;%>
+                <ul class="_statusOrderList">
+                    <li class="left _statusOrders">
+                        <h3 class="_invoiced"><a href="<%=reference%>">#<%=model.invoice.name%></a></h3>
+                    </li>
+                </ul>
+                <%}%>
+                <div class="clearfix"></div>
+                <div class="dialog-tabs-items mainTabs">
+                    <div class="dialog-tabs-item mainTabs active">
+                        <div class="topInputHolder">
+                            <div class="half-block left">
+                                <dl class="opp-info">
+                                    <dt><label>供应商</label></dt>
+                                    <dd>
+                                        <%if(model.supplier){%>
+                                        <span id="supplierDd" data-id="<%=model.supplier._id%>"><%=model.supplier.name.first+ ' ' + model.supplier.name.last%></span>
+                                        <%}%>
+                                    </dd>
+                                    <dt><label for="assignedTo">分配给</label></dt>
+                                    <dd>
+                                        <span id="assignedTo"
+                                              data-id="<%=model.salesPerson ? model.salesPerson._id : ''%>"><%=model.salesPerson && model.salesPerson.name ? model.salesPerson.name.first +' ' + model.salesPerson.name.last : 'None'%></span>
+                                    </dd>
+
+                                    <dt><label for="expectedDate">预计日期</label></dt>
+                                    <dd>
+                                        <input id="expectedDate" class="_inputBordered" value="<%=model.expectedDate%>"
+                                               readonly/>
+                                    </dd>
+                                    <dt><label>订单日期</label></dt>
+                                    <dd>
+                                        <input id="orderDate" class="_inputBordered" value="<%=model.orderDate%>"
+                                               readonly/>
+                                    </dd>
+
+                                </dl>
+                            </div>
+                            <div class="half-block right">
+                                <dl class="opp-info">
+                                    <dt><label for="account">Payable Accrual Account</label></dt>
+                                    <dd class="_newSelectListWrap">
+                                        <span id="account"
+                                              data-id="<%= model.account ? model.account._id : null%>"><%= model.account ?model.account.name :
+                                            'None'%></span>
+                                    </dd>
+
+                                    <dt><label for="costList">消费列表</label></dt>
+                                    <dd>
+                                        <span id="costList" data-id="<%=model.costList ? model.costList._id : ''%>"><%=model.costList ? model.costList.name : 'None'%></span>
+                                    </dd>
+
+                                    <dt><label for="warehouseDd">仓库</label></dt>
+                                    <dd class="_modalSelect">
+                                        <span id="warehouseDd"
+                                              data-id="<%=model.warehouse ? model.warehouse._id : ''%>"><%=model.warehouse ?
+                                            model.warehouse.name : 'Select'%></span>
+                                    </dd>
+
+                                    <dt><label for="currencyDd">货币</label></dt>
+                                    <dd class="_newSelectListWrap">
+                                        <span id="currencyDd"
+                                              data-id="<%= model.currency && model.currency._id ? model.currency._id._id : null%>"><%= model.currency && model.currency._id ?
+                                            model.currency._id.name : ''%></span>
+                                    </dd>
+                                </dl>
+                            </div>
+                            <div class="clearfix"></div>
+                        </div>
+                        <div class="clearfix"></div>
+
+                        <div class="clearfix"></div>
+                        <div id="productItemsHolder">
+
+                        </div>
+
+                    </div>
+                    <div class="clearfix"></div>
+                </div>
+            </div>
+            <div class="clearfix"></div>
+        </fieldset>
+    </form>
+    <div class="clearfix"></div>
 </div>
\ No newline at end of file
diff --git a/byerp/public/templates/purchaseOrders/list/ListTotal.html b/byerp/public/templates/purchaseOrders/list/ListTotal.html
index 4b081e6..43977c3 100644
--- a/byerp/public/templates/purchaseOrders/list/ListTotal.html
+++ b/byerp/public/templates/purchaseOrders/list/ListTotal.html
@@ -4,4 +4,4 @@
     <td style="text-align:center"><span id="paid" class="money"></span></td>
     <td style="text-align:center"><span id="total" class="money"></span></td>
     <td></td>
-</tr>
+</tr>
\ No newline at end of file
diff --git a/byerp/public/templates/purchaseOrders/temps/documentTemp.html b/byerp/public/templates/purchaseOrders/temps/documentTemp.html
index 1621ff8..986b93b 100644
--- a/byerp/public/templates/purchaseOrders/temps/documentTemp.html
+++ b/byerp/public/templates/purchaseOrders/temps/documentTemp.html
@@ -1,119 +1,124 @@
-<%var currencySymb = '￥'%>
-<%var shipping = model.sourceDocument ?  model.sourceDocument.shippingExpenses : model.shippingExpenses;%>
-<div class="_invoiceTemplate">
-    <div class="ribbon">
-        <div class="ribbon-inner <%=(model.workflow) ? model.workflow.status === 'Done' ? 'ribbon-green' : model.workflow.status === 'New' ? 'ribbon-blue' : 'ribbon-grey' : 'ribbon-grey'%>">
-            <%=(model.workflow) ? model.workflow.name : ''%>
-        </div>
-    </div>
-    <div class="extractPdf">
-        <div class="_templateHeader">
-            <div class="_headerRightPart">
-                <div class="_entityBlock">
-                    <div class="_entityTitle">订单</div>
-                    <div class="_entityNumber">采购订单</div>
-                    <div class="_entityNumber"><b><%=model.name || ''%></b></div>
-                    <div class="_entityNumber"><b><%='工程：'+ model.project.name || ''%></b></div>
-                </div>
-            </div>
-        </div>
-        <div class="_templateDateBlock">
-            <div class="_rightPart">
-                <table class="_templateDateTable tableFixed">
-                    <colgroup>
-                        <col width="60%">
-                        <col width="40%">
-                    </colgroup>
-                    <tbody>
-                    <tr>
-                        <td class="_dateLeftPart">
-                            <div class="_billingBlock">
-                                <div class="_billingTitle">供应商：</div>
-                                <div class="_billingCustomerName"><%=(model.supplier &&
-                                    model.supplier.name)?model.supplier.name.first + ' ' + model.supplier.name.last:""%>
-                                </div>
-                            </div>
-                        </td>
-                        <td class="_dateRightPart">
-                            <table class="tableFixed">
-                                <colgroup>
-                                    <col width="100%">
-                                    <col width="100px">
-                                </colgroup>
-                                <tbody>
-                                <tr>
-                                    <td>预计日期 :</td>
-                                    <td><%=model.expectedDate%></td>
-                                </tr>
-                                <% if (model.orderDate) {%>
-                                <tr>
-                                    <td>订单日期 :</td>
-                                    <td><%=model.orderDate%></td>
-                                </tr>
-                                <% } %>
-                                </tbody>
-                            </table>
-                        </td>
-                    </tr>
-                    </tbody>
-                </table>
-            </div>
-        </div>
-        <table class="_templateTable tableFixed">
-            <colgroup>
-                <col width="50px">
-                <col width="17%">
-                <col width="17%">
-                <col width="16%">
-                <col width="16%">
-                <col width="17%">
-                <col width="17%">
-            </colgroup>
-            <thead>
-            <tr>
-                <th>#</th>
-                <th style="text-align: center">产品</th>
-                <th style="text-align: center">说明</th>
-                <th style="text-align: center">数量</th>
-                <th style="text-align: center">单价</th>
-                <th style="text-align: center">计价数量</th>
-                <th style="text-align: center">小计</th>
-            </tr>
-            </thead>
-            <tbody>
-            <% model.products.forEach(function(product, index){ %>
-                <tr>
-                    <td><%=index + 1%></td>
-                    <td style="text-align: center"><%=product.product.name%></td>
-                    <td style="text-align: center"><%=product && product.description ? product.description : '' %>
-                    </td>
-                    <td style="text-align: center"><%=product.quantity || ''%></td>
-                    <td style="text-align: center"><%=product.unitPrice ? currencySplitter(product.unitPrice.toString()): ''%></td>
-                    <td style="text-align: center"><%=product.priceQty ? product.priceQty : ""%></td>
-                    <td style="text-align: center"><%=product.subTotal ? currencySplitter(product.subTotal.toString()): ''%></td>
-                </tr>
-            <% }); %>
-            </tbody>
-        </table>
-        <table class="_templateTableFooter tableFixed">
-            <colgroup>
-                <col width="80%">
-                <col width="100px">
-            </colgroup>
-            <tbody>
-            <tr>
-                <td>小计</td>
-                <td><%=(model.paymentInfo) ? (model.paymentInfo.unTaxed- (shipping.amount / 100) || 0).toFixed(2) : '0.00'%></td>
-            </tr>
-            <% if (model.prepayment && model.prepayment.sum) {%>
-            <tr>
-                <td>预付款</td>
-                <td><%=currencySymb%><%=currencySplitter((model.prepayment.sum/100).toFixed(2))%>
-                </td>
-            </tr>
-            <% } %>
-            </tbody>
-        </table>
-    </div>
-
-</div>
+<%var shipping = model.sourceDocument ?  model.sourceDocument.shippingExpenses : model.shippingExpenses;%>
+<div class="_invoiceTemplate">
+    <div class="ribbon">
+        <div class="ribbon-inner <%=(model.workflow) ? model.workflow.status === 'Done' ? 'ribbon-green' : model.workflow.status === 'New' ? 'ribbon-blue' : 'ribbon-grey' : 'ribbon-grey'%>">
+            <%=(model.workflow) ? model.workflow.name : ''%>
+        </div>
+    </div>
+    <div class="extractPdf">
+        <div class="_templateHeader">
+            <div class="_headerRightPart">
+                <div class="_entityBlock">
+                    <div class="_entityTitle">订单</div>
+                    <div class="_entityNumber">采购订单</div>
+                    <div class="_entityNumber"><b><%=model.name || ''%></b></div>
+                    <div class="_entityNumber"><b><%='工程：'+ model.project.name || ''%></b></div>
+                </div>
+            </div>
+        </div>
+        <div class="_templateDateBlock">
+            <div class="_rightPart">
+                <table class="_templateDateTable tableFixed">
+                    <colgroup>
+                        <col width="60%">
+                        <col width="40%">
+                    </colgroup>
+                    <tbody>
+                    <tr>
+                        <td class="_dateLeftPart">
+                            <div class="_billingBlock">
+                                <div class="_billingTitle">供应商：</div>
+                                <div class="_billingCustomerName"><%=(model.supplier &&
+                                    model.supplier.name)?model.supplier.name.first + ' ' + model.supplier.name.last:""%>
+                                </div>
+                            </div>
+                        </td>
+                        <td class="_dateRightPart">
+                            <table class="tableFixed">
+                                <colgroup>
+                                    <col width="100%">
+                                    <col width="100px">
+                                </colgroup>
+                                <tbody>
+                                <tr>
+                                    <td>预计日期 :</td>
+                                    <td><%=model.expectedDate%></td>
+                                </tr>
+                                <% if (model.orderDate) {%>
+                                <tr>
+                                    <td>订单日期 :</td>
+                                    <td><%=model.orderDate%></td>
+                                </tr>
+                                <% } %>
+                                </tbody>
+                            </table>
+                        </td>
+                    </tr>
+                    </tbody>
+                </table>
+            </div>
+        </div>
+        <table class="_templateTable tableFixed">
+            <colgroup>
+                <col width="50px">
+                <col width="17%">
+                <col width="17%">
+                <col width="16%">
+                <col width="16%">
+                <col width="17%">
+                <col width="17%">
+            </colgroup>
+            <thead>
+            <tr>
+                <th>#</th>
+                <th style="text-align: center">产品</th>
+                <th style="text-align: center">说明</th>
+                <th style="text-align: center">数量</th>
+                <th style="text-align: center">单价</th>
+                <th style="text-align: center">计价数量</th>
+                <th style="text-align: center">小计</th>
+            </tr>
+            </thead>
+            <tbody>
+            <% model.products.forEach(function(product, index){ %>
+                <tr>
+                    <td><%=index + 1%></td>
+                    <td style="text-align: center"><%=product.product ? product.product.name : '' %></td>
+                    <td style="text-align: center"><%=product && product.description ? product.description : '' %>
+                    </td>
+                    <td style="text-align: center"><%=product.quantity || ''%></td>
+                    <td style="text-align: center"><%=product.unitPrice ? currencySplitter(product.unitPrice.toString()): ''%></td>
+                    <td style="text-align: center"><%=product.priceQty ? product.priceQty : ''%></td>
+                    <td style="text-align: center"><%=product.subTotal ? currencySplitter(product.subTotal.toString()): ''%></td>
+                </tr>
+            <% }); %>
+                <tr class="_totalRow">
+                    <td></td>
+                    <td></td>
+                    <td></td>
+                    <td></td>
+                    <td></td>
+                    <td style="text-align: center"><b>总价格</b></td>
+                    <td style="text-align: center"><b><%=(model.paymentInfo) ? currencySplitter(model.paymentInfo.total) : ''%></b>
+                    </td>
+                </tr>
+            </tbody>
+        </table>
+        <table class="_templateTableFooter tableFixed">
+            <colgroup>
+                <col width="50%">
+                <col width="100px">
+            </colgroup>
+            <tbody>
+            <% if (model.prepayment && model.prepayment.sum) {%>
+            <tr>
+                <td>预付款</td>
+                <td><%=currencySplitter((model.prepayment.sum/100).toFixed(2))%>
+                </td>
+            </tr>
+            <% } %>
+            </tbody>
+        </table>
+    </div>
+
+</div>
\ No newline at end of file
diff --git a/byerp/public/templates/purchaseOrders/thumbnails/ThumbnailsItemTemplate.html b/byerp/public/templates/purchaseOrders/thumbnails/ThumbnailsItemTemplate.html
index 3ae003e..d255b8a 100644
--- a/byerp/public/templates/purchaseOrders/thumbnails/ThumbnailsItemTemplate.html
+++ b/byerp/public/templates/purchaseOrders/thumbnails/ThumbnailsItemTemplate.html
@@ -1,22 +1,22 @@
-<% collection.forEach(function(person){ %>
-<div class="inner thumbnailwithavatar" id="<%=person._id%>">
-    <div class="avatar" style="line-height: 140px">
-        <a class="gotoForm" href="#easyErp/Persons/form/<%=person._id%>"
-           title="<%=person.name.first%> <%=person.name.last%>" data-id="<%=person._id%>">
-            <img src=""/></a>
-    </div>
-    <div class="info">
-        <div>
-            <a class="gotoForm title" href="#easyErp/Persons/form/<%=person._id%>"
-               title="<%=person.name.first%> <%=person.name.last%>" data-id="<%=person._id%>"><span><%=person.name.first%> <%=person.name.last%></span></a>
-        </div>
-
-        <% if (person.company){%>
-        <div><a class="company" title="<%=person.company.name.first%>" data-id="<%=person.company._id%>"
-                href="javascript:;"><%=person.company.name.first%></a></div>
-        <%}%>
-        <div><a href="mailto:<%=person.email%>" target="_blank" title="<%=person.email%>"><%=person.email%></a></div>
-    </div>
-</div>
-
-<% }) %>
+<% collection.forEach(function(person){ %>
+<div class="inner thumbnailwithavatar" id="<%=person._id%>">
+    <div class="avatar" style="line-height: 140px">
+        <a class="gotoForm" href="#easyErp/Persons/form/<%=person._id%>"
+           title="<%=person.name.first%> <%=person.name.last%>" data-id="<%=person._id%>">
+            <img src=""/></a>
+    </div>
+    <div class="info">
+        <div>
+            <a class="gotoForm title" href="#easyErp/Persons/form/<%=person._id%>"
+               title="<%=person.name.first%> <%=person.name.last%>" data-id="<%=person._id%>"><span><%=person.name.first%> <%=person.name.last%></span></a>
+        </div>
+
+        <% if (person.company){%>
+        <div><a class="company" title="<%=person.company.name.first%>" data-id="<%=person.company._id%>"
+                href="javascript:;"><%=person.company.name.first%></a></div>
+        <%}%>
+        <div><a href="mailto:<%=person.email%>" target="_blank" title="<%=person.email%>"><%=person.email%></a></div>
+    </div>
+</div>
+
+<% }) %>
diff --git a/byerp/public/templates/settingsOverview/settingsEmployee/minimumWage/list/ListTemplate.html b/byerp/public/templates/settingsOverview/settingsEmployee/minimumWage/list/ListTemplate.html
index ec1b8bf..6906c7d 100644
--- a/byerp/public/templates/settingsOverview/settingsEmployee/minimumWage/list/ListTemplate.html
+++ b/byerp/public/templates/settingsOverview/settingsEmployee/minimumWage/list/ListTemplate.html
@@ -1,12 +1,12 @@
 <% minimumWage.forEach(function(minimumWage, index){ %>
 <tr data-id="<%=minimumWage._id%>">
     <td data-type="input" class = "centerCell">
-    <span><%=minimumWage.wage%></span>
+    <span><%=minimumWage.wage/100%></span>
     </td>
-    <td data-type="input" class = "centerCell"><%=minimumWage.communication/100%></td>
+    <td data-type="input" class = "centerCell"><%=minimumWage.communication%></td>
     <td>
         <a href="javascript:;" class="icon-note goToEdit _actionCircleBtn" aria-hidden="true"></a>
         <a href="javascript:;" class="icon-trash goToRemove _actionCircleBtn" aria-hidden="true"></a>
     </td>
 </tr>
-<% }) %>
\ No newline at end of file
+<% }) %>
diff --git a/byerp/public/templates/timeCard/CreateTemplate.html b/byerp/public/templates/timeCard/CreateTemplate.html
index c1ba6ba..223a3b3 100644
--- a/byerp/public/templates/timeCard/CreateTemplate.html
+++ b/byerp/public/templates/timeCard/CreateTemplate.html
@@ -1,6 +1,11 @@
 <div class="form-holder _departmentExteral">
 
         <h3 class="_dialogTableTitle">上传文件</h3>
+        	<div>
+        		<label for="month">年月: </label>
+        		<input type="text" id="month" name="month" class="monthPicker" />
+        	</div>
+        	<div class="clearfix"></div>
     		<div>
 		        <dt><label for="file">文件: </label></dt>
 
diff --git a/byerp/public/templates/workPoint/list/ListTemplate.html b/byerp/public/templates/workPoint/list/ListTemplate.html
index 40a2d4a..00d13e2 100644
--- a/byerp/public/templates/workPoint/list/ListTemplate.html
+++ b/byerp/public/templates/workPoint/list/ListTemplate.html
@@ -6,7 +6,7 @@
             <span></span>
         </label>
     </td>
-    <td><%=item.employee.name? (item.employee.name.first+item.employee.name.last): ''%></td>
+    <td><%=(item.employee && item.employee.name)? (item.employee.name.first+item.employee.name.last): ''%></td>
     <td><%= item.point%></td>
 </tr>
 <%})%>
\ No newline at end of file
diff --git a/byerp/routes/goodsIn.js b/byerp/routes/goodsIn.js
index cee5c32..5f484a2 100644
--- a/byerp/routes/goodsIn.js
+++ b/byerp/routes/goodsIn.js
@@ -1,25 +1,25 @@
-var express = require('express');
-var router = express.Router();
-var GoodsNoteHandler = require('../handlers/goodsInNote');
-var authStackMiddleware = require('../helpers/checkAuth');
-var MODULES = require('../constants/modules');
-
-module.exports = function (models, event) {
-    var handler = new GoodsNoteHandler(models, event);
-
-    router.get('/', handler.getForView);
-
-    router.get('/confirmIssue', handler.confirmIssue);
-    router.get('/goodsInNewspecial', handler.goodsInNewspecial);
-    router.get('/goodsOutCreate', handler.goodsOutCreate);
-    router.get('/goodsInNew', handler.goodsInNew);
-    router.get('/getGoodsInNote', handler.getGoodsInNote);
-    router.get('/:id', handler.getForView);
-
-    router.post('/', handler.create);
-    router.post('/return', handler.createReturn);
-    
-    router.delete('/', handler.bulkRemove);
-
-    return router;
-};
+var express = require('express');
+var router = express.Router();
+var GoodsNoteHandler = require('../handlers/goodsInNote');
+var authStackMiddleware = require('../helpers/checkAuth');
+var MODULES = require('../constants/modules');
+
+module.exports = function (models, event) {
+    var handler = new GoodsNoteHandler(models, event);
+
+    router.get('/', handler.getForView);
+
+    router.get('/confirmIssue', handler.confirmIssue);
+    router.get('/goodsInNewspecial', handler.goodsInNewspecial);
+    router.get('/goodsOutCreate', handler.goodsOutCreate);
+    router.get('/goodsInNew', handler.goodsInNew);
+    router.get('/getGoodsInNote', handler.getGoodsInNote);
+    router.get('/:id', handler.getForView);
+
+    router.post('/', handler.create);
+    router.post('/return', handler.createReturn);
+    
+    router.delete('/', handler.bulkRemove);
+
+    return router;
+};
diff --git a/byerp/routes/goodsOut.js b/byerp/routes/goodsOut.js
index c7ca01f..598456a 100644
--- a/byerp/routes/goodsOut.js
+++ b/byerp/routes/goodsOut.js
@@ -11,6 +11,7 @@ module.exports = function (models, event) {
     router.get('/getCurrentGoodsOutNote', handler.getCurrentGoodsOutNote);
     router.get('/getByProject', handler.getByProject);
     router.get('/getBarCodesByName', handler.getBarCodesByName);
+    router.get('/getBarCodesByGoodNote', handler.getBarCodesByGoodNote);
     router.get('/', handler.getForView);
     router.get('/:id', handler.getForView);
 
diff --git a/byerp/routes/purchaseOrders.js b/byerp/routes/purchaseOrders.js
index efec2f4..5f15e97 100644
--- a/byerp/routes/purchaseOrders.js
+++ b/byerp/routes/purchaseOrders.js
@@ -1,371 +1,371 @@
-var express = require('express');
-var router = express.Router();
-var QuotationHandler = require('../handlers/order');
-var authStackMiddleware = require('../helpers/checkAuth');
-var MODULES = require('../constants/modules');
-var multipart = require('connect-multiparty');
-var multipartMiddleware = multipart();
-
-module.exports = function (models, event) {
-    var handler = new QuotationHandler(models, event);
-    var moduleId = MODULES.PURCHASEORDERS;
-    var accessStackMiddleware = require('../helpers/access')(moduleId, models);
-
-    router.use(authStackMiddleware);
-
-
-    /**
-     *@api {get} /purchaseOrders/ Request purchaseOrders
-     *
-     * @apiVersion 0.0.1
-     * @apiName getPurchaseOrders
-     * @apiGroup purchaseOrders
-     *
-     * @apiParam (?Field=value) {String} viewType="list" Type of View
-     * @apiParam (?Field=value) {Number} page=1 Number of page
-     * @apiParam (?Field=value) {Number} count=100 Count of purchaseOrders which will show
-     * @apiParam (?Field=value) {String} contentType="purchaseOrders" Type of content
-     * @apiParam (?Field=value) {Object} filter="{ forSales: { key: 'forSales', type: 'boolean', value: [ 'false' ] } }" Type of content
-     *
-     * @apiSuccess {Object} purchaseOrders
-     * @apiSuccessExample Success-Response:
-     HTTP/1.1 200 OK
-     {
-       "total": 2,
-       "count": 2,
-       "data": [
-         {
-           "_id": "584fbc303a3e8718364754b5",
-           "salesPerson": {
-             "_id": "55f9298456f79c9c0c000006",
-             "name": "Viktor Manhur"
-           },
-           "workflow": {
-             "_id": "56599347bfd103f108eb4caa",
-             "status": "Done",
-             "name": "Invoiced received"
-           },
-           "supplier": {
-             "_id": "57a0432fa12c299d1cdc8feb",
-             "name": "Test Test"
-           },
-           "currency": {
-             "rate": 1,
-             "_id": {
-               "_id": "USD",
-               "name": "USD",
-               "decPlace": 2,
-               "symbol": "$",
-               "active": true
-             }
-           },
-           "paymentInfo": {
-             "taxes": 0,
-             "unTaxed": 49500,
-             "total": 49500
-           },
-           "orderDate": "2016-12-13T00:00:00.000Z",
-           "name": "PO_2",
-           "status": {
-             "allocateStatus": "NOA",
-             "fulfillStatus": "NOA",
-             "shippingStatus": "NOT"
-           },
-           "removable": false,
-           "channel": null,
-           "paymentsPaid": 20000,
-           "total": 2
-         },
-         {
-           "_id": "584aaafff63ec439398b6a64",
-           "salesPerson": {
-             "name": null
-           },
-           "workflow": {
-             "_id": "5555bf276a3f01acae0b5561",
-             "status": "Pending",
-             "name": "Pending PO"
-           },
-           "supplier": {
-             "_id": "57bacf6d4b2d7f3b4233d5c9",
-             "name": "Actifile "
-           },
-           "currency": {
-             "rate": 1,
-             "_id": {
-               "_id": "USD",
-               "name": "USD",
-               "decPlace": 2,
-               "symbol": "$",
-               "active": true
-             }
-           },
-           "paymentInfo": {
-             "taxes": 0,
-             "unTaxed": 200000,
-             "total": 200000
-           },
-           "orderDate": "2016-12-09T00:00:00.000Z",
-           "name": "PO_1",
-           "status": {
-             "allocateStatus": "ALL",
-             "fulfillStatus": "ALL",
-             "shippingStatus": "NOT"
-           },
-           "removable": false,
-           "channel": null,
-           "paymentsPaid": 0,
-           "total": 2
-         }
-       ]
-     }
-     */
-    router.get('/', accessStackMiddleware, handler.getByViewType);
-
-    router.get('/catchPrices', handler.catchPrices);	
-    router.get('/getBySupplier', handler.getBySupplier);
-    router.get('/getFilterValues', handler.getFilterValues);
-
-    /**
-     *@api {get} /purchaseOrders/:id Request purchaseOrder
-     *
-     * @apiVersion 0.0.1
-     * @apiName getPurchaseOrder
-     * @apiGroup purchaseOrders
-     *
-     * @apiSuccess {Object} purchaseOrder
-     * @apiSuccessExample Success-Response:
-     HTTP/1.1 200 OK
-     {
-          _id: "5878df114573d1846774d0d3",
-          _type: "purchaseOrders",
-          __v: 0,
-          conflictTypes: [
-
-          ],
-          editedBy: {
-            date: "2017-01-13T14:07:13.747Z",
-            user: {
-              _id: "5836ec22d291dd500cf6e16a",
-              login: "testAdmin"
-            }
-          },
-          channel: null,
-          createdBy: {
-            date: "2017-01-13T14:07:13.747Z",
-            user: "5836ec22d291dd500cf6e16a"
-          },
-          project: null,
-          creationDate: "2017-01-13T14:07:13.747Z",
-          groups: {
-            group: [
-
-            ],
-            users: [
-
-            ],
-            owner: null
-          },
-          notes: [
-            {
-              date: "2017-01-13T14:07:13.864Z",
-              history: {
-                newValue: "Pending PO",
-                changedField: "Status",
-                collectionName: "ORDER",
-                contentId: "5878df114573d1846774d0d3",
-                date: "2017-01-13T14:07:13.864Z"
-              }
-            },
-            {
-              date: "2017-01-13T14:07:13.864Z",
-              history: {
-                prevValue: null,
-                newValue: "2017-01-12T22:00:00.000Z",
-                changedField: "Payment Due Date",
-                collectionName: "ORDER",
-                contentId: "5878df114573d1846774d0d3",
-                date: "2017-01-13T14:07:13.864Z"
-              }
-            },
-            {
-              date: "2017-01-13T14:07:13.864Z",
-              history: {
-                prevValue: null,
-                newValue: "NOT",
-                changedField: "Fulfilled",
-                collectionName: "ORDER",
-                contentId: "5878df114573d1846774d0d3",
-                date: "2017-01-13T14:07:13.864Z"
-              }
-            },
-            {
-              date: "2017-01-13T14:07:13.864Z",
-              history: {
-                prevValue: null,
-                newValue: "2017-01-13T14:07:13.000Z",
-                changedField: "Order Date",
-                collectionName: "ORDER",
-                contentId: "5878df114573d1846774d0d3",
-                date: "2017-01-13T14:07:13.864Z"
-              }
-            },
-            {
-              date: "2017-01-13T14:07:13.864Z",
-              history: {
-                prevValue: null,
-                newValue: "2017-01-13T14:07:13.747Z",
-                changedField: "Creation Date",
-                collectionName: "ORDER",
-                contentId: "5878df114573d1846774d0d3",
-                date: "2017-01-13T14:07:13.864Z"
-              }
-            }
-          ],
-          attachments: [
-
-          ],
-          whoCanRW: "everyOne",
-          warehouse: {
-            _id: "584a9a81e6fb1adb383f2142",
-            name: "Demo"
-          },
-          tempWorkflow: null,
-          workflow: {
-            _id: "5555bf276a3f01acae0b5561",
-            status: "Pending",
-            name: "Pending PO"
-          },
-          shippingExpenses: {
-            account: null,
-            amount: 0
-          },
-          paymentInfo: {
-            taxes: 0,
-            unTaxed: 2000,
-            discount: 0,
-            total: 2000
-          },
-          priceList: null,
-          costList: null,
-          salesPerson: null,
-          paymentTerm: null,
-          destination: null,
-          name: "PO_32",
-          paymentMethod: null,
-          status: {
-            shippingStatus: "NOR",
-            fulfillStatus: "NOT",
-            allocateStatus: "NOR"
-          },
-          integrationId: "",
-          expectedDate: "2017-01-12T22:00:00.000Z",
-          orderDate: "2017-01-13T14:07:13.000Z",
-          supplier: {
-            _id: "5878dc64ac4f17e81bcd8289",
-            address: {
-              country: "United States",
-              zip: "36258",
-              state: "",
-              city: "Taxacity",
-              street: "acaca"
-            },
-            name: {
-              last: "dog",
-              first: "hot"
-            },
-            fullName: "hot dog",
-            id: "5878dc64ac4f17e81bcd8289"
-          },
-          type: "Not Ordered",
-          forSales: false,
-          currency: {
-            rate: 1,
-            _id: {
-              _id: "USD",
-              active: true,
-              decPlace: 2,
-              symbol: "$",
-              name: "USD"
-            }
-          },
-          products: [
-            {
-              _id: "5878df114573d1846774d0d9",
-              taxCode: null,
-              description: "ERP",
-              totalTaxes: 0,
-              channel: null,
-              creditAccount: null,
-              debitAccount: {
-                _id: "565eb53a6aa50532e5df0bca",
-                name: "101400 Erste USD"
-              },
-              creationDate: "2017-01-13T14:07:43.145Z",
-              nominalCode: 0,
-              subTotal: 2000,
-              costPrice: null,
-              unitPrice: 2000,
-              taxes: [
-                {
-                  tax: 0,
-                  taxCode: null
-                }
-              ],
-              quantity: 1,
-              warehouse: {
-                _id: "584a9a81e6fb1adb383f2142",
-                name: "Demo"
-              },
-              order: "5878df114573d1846774d0d3",
-              product: {
-                _id: "5878dc5dac4f17e81bcd8228",
-                info: {
-                  EAN: null,
-                  ISBN: null,
-                  UPC: null,
-                  SKU: "svsvd1",
-                  categories: [
-                    "564591f9624e48551dfe3b23"
-                  ],
-                  brand: null,
-                  description: "ERP product",
-                  barcode: "",
-                  isActive: true,
-                  productType: "58453a4afc8d676a511283d0"
-                },
-                name: "ERP"
-              },
-              goodsNotes: [
-
-              ],
-              fulfilled: 0
-            }
-          ],
-          account: null,
-          goodsNotes: [
-
-          ],
-          prepayment: {
-
-          },
-          invoice: {
-
-          }
-}
-     */
-    router.get('/:id', handler.getById);
-
-
-    router.post('/', handler.create);
-
-    router.patch('/:id', handler.putchModel);
-
-    router.delete('/:id', handler.remove);
-
-    router.delete('/', handler.bulkRemove);
-
-    router.post('/importexcel/:id', multipartMiddleware, handler.importexcel);
-
-    return router;
-};
+var express = require('express');
+var router = express.Router();
+var QuotationHandler = require('../handlers/order');
+var authStackMiddleware = require('../helpers/checkAuth');
+var MODULES = require('../constants/modules');
+var multipart = require('connect-multiparty');
+var multipartMiddleware = multipart();
+
+module.exports = function (models, event) {
+    var handler = new QuotationHandler(models, event);
+    var moduleId = MODULES.PURCHASEORDERS;
+    var accessStackMiddleware = require('../helpers/access')(moduleId, models);
+
+    router.use(authStackMiddleware);
+
+
+    /**
+     *@api {get} /purchaseOrders/ Request purchaseOrders
+     *
+     * @apiVersion 0.0.1
+     * @apiName getPurchaseOrders
+     * @apiGroup purchaseOrders
+     *
+     * @apiParam (?Field=value) {String} viewType="list" Type of View
+     * @apiParam (?Field=value) {Number} page=1 Number of page
+     * @apiParam (?Field=value) {Number} count=100 Count of purchaseOrders which will show
+     * @apiParam (?Field=value) {String} contentType="purchaseOrders" Type of content
+     * @apiParam (?Field=value) {Object} filter="{ forSales: { key: 'forSales', type: 'boolean', value: [ 'false' ] } }" Type of content
+     *
+     * @apiSuccess {Object} purchaseOrders
+     * @apiSuccessExample Success-Response:
+     HTTP/1.1 200 OK
+     {
+       "total": 2,
+       "count": 2,
+       "data": [
+         {
+           "_id": "584fbc303a3e8718364754b5",
+           "salesPerson": {
+             "_id": "55f9298456f79c9c0c000006",
+             "name": "Viktor Manhur"
+           },
+           "workflow": {
+             "_id": "56599347bfd103f108eb4caa",
+             "status": "Done",
+             "name": "Invoiced received"
+           },
+           "supplier": {
+             "_id": "57a0432fa12c299d1cdc8feb",
+             "name": "Test Test"
+           },
+           "currency": {
+             "rate": 1,
+             "_id": {
+               "_id": "USD",
+               "name": "USD",
+               "decPlace": 2,
+               "symbol": "$",
+               "active": true
+             }
+           },
+           "paymentInfo": {
+             "taxes": 0,
+             "unTaxed": 49500,
+             "total": 49500
+           },
+           "orderDate": "2016-12-13T00:00:00.000Z",
+           "name": "PO_2",
+           "status": {
+             "allocateStatus": "NOA",
+             "fulfillStatus": "NOA",
+             "shippingStatus": "NOT"
+           },
+           "removable": false,
+           "channel": null,
+           "paymentsPaid": 20000,
+           "total": 2
+         },
+         {
+           "_id": "584aaafff63ec439398b6a64",
+           "salesPerson": {
+             "name": null
+           },
+           "workflow": {
+             "_id": "5555bf276a3f01acae0b5561",
+             "status": "Pending",
+             "name": "Pending PO"
+           },
+           "supplier": {
+             "_id": "57bacf6d4b2d7f3b4233d5c9",
+             "name": "Actifile "
+           },
+           "currency": {
+             "rate": 1,
+             "_id": {
+               "_id": "USD",
+               "name": "USD",
+               "decPlace": 2,
+               "symbol": "$",
+               "active": true
+             }
+           },
+           "paymentInfo": {
+             "taxes": 0,
+             "unTaxed": 200000,
+             "total": 200000
+           },
+           "orderDate": "2016-12-09T00:00:00.000Z",
+           "name": "PO_1",
+           "status": {
+             "allocateStatus": "ALL",
+             "fulfillStatus": "ALL",
+             "shippingStatus": "NOT"
+           },
+           "removable": false,
+           "channel": null,
+           "paymentsPaid": 0,
+           "total": 2
+         }
+       ]
+     }
+     */
+    router.get('/', accessStackMiddleware, handler.getByViewType);
+
+    router.get('/catchPrices', handler.catchPrices);	
+    router.get('/getBySupplier', handler.getBySupplier);
+    router.get('/getFilterValues', handler.getFilterValues);
+
+    /**
+     *@api {get} /purchaseOrders/:id Request purchaseOrder
+     *
+     * @apiVersion 0.0.1
+     * @apiName getPurchaseOrder
+     * @apiGroup purchaseOrders
+     *
+     * @apiSuccess {Object} purchaseOrder
+     * @apiSuccessExample Success-Response:
+     HTTP/1.1 200 OK
+     {
+          _id: "5878df114573d1846774d0d3",
+          _type: "purchaseOrders",
+          __v: 0,
+          conflictTypes: [
+
+          ],
+          editedBy: {
+            date: "2017-01-13T14:07:13.747Z",
+            user: {
+              _id: "5836ec22d291dd500cf6e16a",
+              login: "testAdmin"
+            }
+          },
+          channel: null,
+          createdBy: {
+            date: "2017-01-13T14:07:13.747Z",
+            user: "5836ec22d291dd500cf6e16a"
+          },
+          project: null,
+          creationDate: "2017-01-13T14:07:13.747Z",
+          groups: {
+            group: [
+
+            ],
+            users: [
+
+            ],
+            owner: null
+          },
+          notes: [
+            {
+              date: "2017-01-13T14:07:13.864Z",
+              history: {
+                newValue: "Pending PO",
+                changedField: "Status",
+                collectionName: "ORDER",
+                contentId: "5878df114573d1846774d0d3",
+                date: "2017-01-13T14:07:13.864Z"
+              }
+            },
+            {
+              date: "2017-01-13T14:07:13.864Z",
+              history: {
+                prevValue: null,
+                newValue: "2017-01-12T22:00:00.000Z",
+                changedField: "Payment Due Date",
+                collectionName: "ORDER",
+                contentId: "5878df114573d1846774d0d3",
+                date: "2017-01-13T14:07:13.864Z"
+              }
+            },
+            {
+              date: "2017-01-13T14:07:13.864Z",
+              history: {
+                prevValue: null,
+                newValue: "NOT",
+                changedField: "Fulfilled",
+                collectionName: "ORDER",
+                contentId: "5878df114573d1846774d0d3",
+                date: "2017-01-13T14:07:13.864Z"
+              }
+            },
+            {
+              date: "2017-01-13T14:07:13.864Z",
+              history: {
+                prevValue: null,
+                newValue: "2017-01-13T14:07:13.000Z",
+                changedField: "Order Date",
+                collectionName: "ORDER",
+                contentId: "5878df114573d1846774d0d3",
+                date: "2017-01-13T14:07:13.864Z"
+              }
+            },
+            {
+              date: "2017-01-13T14:07:13.864Z",
+              history: {
+                prevValue: null,
+                newValue: "2017-01-13T14:07:13.747Z",
+                changedField: "Creation Date",
+                collectionName: "ORDER",
+                contentId: "5878df114573d1846774d0d3",
+                date: "2017-01-13T14:07:13.864Z"
+              }
+            }
+          ],
+          attachments: [
+
+          ],
+          whoCanRW: "everyOne",
+          warehouse: {
+            _id: "584a9a81e6fb1adb383f2142",
+            name: "Demo"
+          },
+          tempWorkflow: null,
+          workflow: {
+            _id: "5555bf276a3f01acae0b5561",
+            status: "Pending",
+            name: "Pending PO"
+          },
+          shippingExpenses: {
+            account: null,
+            amount: 0
+          },
+          paymentInfo: {
+            taxes: 0,
+            unTaxed: 2000,
+            discount: 0,
+            total: 2000
+          },
+          priceList: null,
+          costList: null,
+          salesPerson: null,
+          paymentTerm: null,
+          destination: null,
+          name: "PO_32",
+          paymentMethod: null,
+          status: {
+            shippingStatus: "NOR",
+            fulfillStatus: "NOT",
+            allocateStatus: "NOR"
+          },
+          integrationId: "",
+          expectedDate: "2017-01-12T22:00:00.000Z",
+          orderDate: "2017-01-13T14:07:13.000Z",
+          supplier: {
+            _id: "5878dc64ac4f17e81bcd8289",
+            address: {
+              country: "United States",
+              zip: "36258",
+              state: "",
+              city: "Taxacity",
+              street: "acaca"
+            },
+            name: {
+              last: "dog",
+              first: "hot"
+            },
+            fullName: "hot dog",
+            id: "5878dc64ac4f17e81bcd8289"
+          },
+          type: "Not Ordered",
+          forSales: false,
+          currency: {
+            rate: 1,
+            _id: {
+              _id: "USD",
+              active: true,
+              decPlace: 2,
+              symbol: "$",
+              name: "USD"
+            }
+          },
+          products: [
+            {
+              _id: "5878df114573d1846774d0d9",
+              taxCode: null,
+              description: "ERP",
+              totalTaxes: 0,
+              channel: null,
+              creditAccount: null,
+              debitAccount: {
+                _id: "565eb53a6aa50532e5df0bca",
+                name: "101400 Erste USD"
+              },
+              creationDate: "2017-01-13T14:07:43.145Z",
+              nominalCode: 0,
+              subTotal: 2000,
+              costPrice: null,
+              unitPrice: 2000,
+              taxes: [
+                {
+                  tax: 0,
+                  taxCode: null
+                }
+              ],
+              quantity: 1,
+              warehouse: {
+                _id: "584a9a81e6fb1adb383f2142",
+                name: "Demo"
+              },
+              order: "5878df114573d1846774d0d3",
+              product: {
+                _id: "5878dc5dac4f17e81bcd8228",
+                info: {
+                  EAN: null,
+                  ISBN: null,
+                  UPC: null,
+                  SKU: "svsvd1",
+                  categories: [
+                    "564591f9624e48551dfe3b23"
+                  ],
+                  brand: null,
+                  description: "ERP product",
+                  barcode: "",
+                  isActive: true,
+                  productType: "58453a4afc8d676a511283d0"
+                },
+                name: "ERP"
+              },
+              goodsNotes: [
+
+              ],
+              fulfilled: 0
+            }
+          ],
+          account: null,
+          goodsNotes: [
+
+          ],
+          prepayment: {
+
+          },
+          invoice: {
+
+          }
+}
+     */
+    router.get('/:id', handler.getById);
+
+
+    router.post('/', handler.create);
+
+    router.patch('/:id', handler.putchModel);
+
+    router.delete('/:id', handler.remove);
+
+    router.delete('/', handler.bulkRemove);
+
+    router.post('/importexcel/:id', multipartMiddleware, handler.importexcel);
+
+    return router;
+};
diff --git a/byerp/routes/timeCard.js b/byerp/routes/timeCard.js
index 80b545a..cea1953 100644
--- a/byerp/routes/timeCard.js
+++ b/byerp/routes/timeCard.js
@@ -26,7 +26,7 @@ module.exports = function (models) {
     });
     
     
-    router.post('/importFile',multipartMiddleware, handler.importFile);
+    router.post('/importFile/:datekey',multipartMiddleware, handler.importFile);
     // router.post('/importFile',multipartMiddleware, function(res,req,next){
     //     res.send("hahah");
     // });
diff --git a/byerp/services/user.js b/byerp/services/user.js
index 4d8149b..9b2a149 100644
--- a/byerp/services/user.js
+++ b/byerp/services/user.js
@@ -22,32 +22,32 @@ module.exports = function (models) {
             var user;
             var err;
 
-            function emailSender(user, waterfallCb) {
-                var name = namesRetriever(user.email);
-
-                if (!user.email) {
-                    return waterfallCb(null, user);
-                }
-
-                if (!sendEmail) {
-                    return waterfallCb(null, user);
-                }
-
-                mailer.registeredNewUser({
-                    firstName: name.first,
-                    lastName : name.last,
-                    login    : user.login,
-                    email    : user.email,
-                    password : password,
-                    host     : process.env.HOST
-                }, function (err) {
-                    if (err) {
-                        logger.error(err);
-                    }
-
-                    waterfallCb(null, user);
-                });
-            }
+            // function emailSender(user, waterfallCb) {
+            //     var name = namesRetriever(user.email);
+
+            //     if (!user.email) {
+            //         return waterfallCb(null, user);
+            //     }
+
+            //     if (!sendEmail) {
+            //         return waterfallCb(null, user);
+            //     }
+
+            //     mailer.registeredNewUser({
+            //         firstName: name.first,
+            //         lastName : name.last,
+            //         login    : user.login,
+            //         email    : user.email,
+            //         password : password,
+            //         host     : process.env.HOST
+            //     }, function (err) {
+            //         if (err) {
+            //             logger.error(err);
+            //         }
+
+            //         waterfallCb(null, user);
+            //     });
+            // }
 
             function saveUser(user, waterfallCb) {
                 user.save(function (err, _user) {
@@ -90,7 +90,7 @@ module.exports = function (models) {
             UserModel = models.get(dbName, 'Users', userSchema);
             user = new UserModel(options);
 
-            async.waterfall([async.apply(saveUser, user), emailSender], callback);
+            async.waterfall([async.apply(saveUser, user)], callback);
 
         };
 
